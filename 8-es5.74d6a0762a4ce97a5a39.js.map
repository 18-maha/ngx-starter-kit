{"version":3,"sources":["webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.module.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/cdk/esm5/drag-drop.es5.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.scss.shim.ngstyle.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.ngfactory.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.html"],"names":["__webpack_require__","d","__webpack_exports__","BreadcrumbsModule","BreadcrumbsComponent","prototype","ngOnInit","DragDrop","CdkDropList","CDK_DROP_LIST","moveItemInArray","DragDropModule","DragDropRegistry","CdkDropListGroup","CDK_DRAG_CONFIG","CdkDrag","CdkDragHandle","CDK_DRAG_PARENT","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","_angular_common__WEBPACK_IMPORTED_MODULE_7__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","rxjs_operators__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_12__","rxjs_operators__WEBPACK_IMPORTED_MODULE_13__","rxjs_operators__WEBPACK_IMPORTED_MODULE_14__","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","passiveEventListenerOptions","Object","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_this","this","_passiveTransform","x","y","_activeTransform","_moveEvents","_moveEventSubscriptions","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","observer","subscription","subscribe","unsubscribe","_pointerDown","event","next","length","targetHandle","find","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","run","pointerPosition","delta","_pointerDirectionDelta","_getPointerPositionOnPage","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_startDragSequence","_pointerUp","isDragging","_removeSubscriptions","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","registerDragItem","defineProperty","get","set","newValue","_toggleNativeDragInteractions","enumerable","configurable","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","forEach","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","withBoundaryElement","boundaryElement","dispose","removeElement","_destroyPreview","_destroyPlaceholder","removeDragItem","complete","clear","_nextSibling","reset","transform","disableHandle","add","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_previewRef","destroy","_placeholderRef","isTouchEvent","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","_initialContainer","pointerMove","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","insertBefore","currentIndex","getItemIndex","_a","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","getTransform","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","deepCloneNode","left","top","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","getTransformTransitionDurationInMs","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","clamp","right","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","removeAttribute","i","min","max","parentNode","removeChild","startsWith","array","fromIndex","toIndex","from","clamp$1","to","_uniqueIdCounter","DropListRef","id","sortingDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_activeDraggables","_draggables","slice","_cacheOwnPosition","_cacheItemPositions","sibling","_startReceiving","pointerX","pointerY","newIndex","_getItemIndexFromPointerPosition","activeDraggables","newPositionReference","splice","push","_reset","withItems","items","connectedTo","withOrientation","orientation","findIndex","reverse","currentItem","isReceiving","size","pointerDelta","_isPointerNearDropContainer","siblings","isHorizontal","siblingAtNewPosition","currentPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","adjustClientRect","_clientRect","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","isInsideClientRect","_canReceive","elementFromPoint","activeSiblings","predicate","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","upEvent","e","options","config","_clearGlobalListeners","Array","instance","ngOnDestroy","ngInjectableDef","factory","token","providedIn","DEFAULT_CONFIG","createDrag","createDropList","parentDrag","_stateChanges","_parentDrag","dropContainer","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","_dragRef","pipe","movedEvent","data","_syncInputs","_handleEvents","ngAfterViewInit","onStable","asObservable","_updateRootElement","changes","childHandleElements","filter","apply","handleInstance","dragRef","freeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","rootElementSelector","getClosestMatchingAncestor","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","selector","boundaryElementSelector","ref","dir","templateRef","emit","markForCheck","currentElement","matches","msMatchesSelector","parentElement","_items","_uniqueIdCounter$1","_group","_sortingDisabled","_dropListRef","_dropLists","ngAfterContentInit","result","change","list","RenderType_BreadcrumbsComponent","View_BreadcrumbsComponent_0","core","encapsulation","styles","View_BreadcrumbsComponent_2","_l","_v","en","$event","ad","onClick","ctrlKey","metaKey","shiftKey","router","common","routerLink","_ck","currVal_2","parent","$implicit","link","href","View_BreadcrumbsComponent_3","View_BreadcrumbsComponent_4","index_ngfactory","icon_es5","inline","color","View_BreadcrumbsComponent_1","flex_es5","core_es5","fxLayout","fxLayoutAlign","ngSwitch","ngSwitchCase","ngIf","last","ngForOf","_co","component","crumbs","title"],"mappings":"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","file":"8-es5.74d6a0762a4ce97a5a39.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n  imports: [MatIconModule, FlexLayoutModule, RouterModule, CommonModule],\n  exports: [BreadcrumbsComponent],\n  declarations: [BreadcrumbsComponent],\n})\nexport class BreadcrumbsModule {}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\n\nexport interface Crumb {\n  name: string;\n  link?: string;\n}\n@Component({\n  selector: 'ngx-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbsComponent implements OnInit {\n  @Input()\n  readonly title: string;\n  @Input()\n  crumbs: ReadonlyArray<Crumb>;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subscription, Subject, Observable, merge } from 'rxjs';\nimport { ElementRef, Injectable, NgZone, Inject, InjectionToken, NgModule, ContentChildren, EventEmitter, forwardRef, Input, Output, Optional, Directive, ChangeDetectorRef, SkipSelf, ContentChild, ViewContainerRef, TemplateRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith, take, map, takeUntil, switchMap, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[(/** @type {?} */ (key))] = source[(/** @type {?} */ (key))];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    var userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    var computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    var property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) { return prop === 'transform' || prop === 'all'; }));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    var propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    var value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    function (part) { return part.trim(); }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nvar activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nvar MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nvar  /**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nDragRef = /** @class */ (function () {\n    function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        var _this = this;\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Amount of subscriptions to the move event. Used to avoid\n         * hitting the zone if the consumer didn't subscribe to it.\n         */\n        this._moveEventSubscriptions = 0;\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        function (observer) {\n            /** @type {?} */\n            var subscription = _this._moveEvents.subscribe(observer);\n            _this._moveEventSubscriptions++;\n            return (/**\n             * @return {?}\n             */\n            function () {\n                subscription.unsubscribe();\n                _this._moveEventSubscriptions--;\n            });\n        }));\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (_this._handles.length) {\n                /** @type {?} */\n                var targetHandle = _this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                function (handle) {\n                    /** @type {?} */\n                    var target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                    _this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!_this.disabled) {\n                _this._initializeDragSequence(_this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (!_this._hasStartedDragging) {\n                /** @type {?} */\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                /** @type {?} */\n                var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                /** @type {?} */\n                var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold && (Date.now() >= _this._dragStartTime + (_this.dragStartDelay || 0))) {\n                    _this._hasStartedDragging = true;\n                    _this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    function () { return _this._startDragSequence(event); }));\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (_this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                    _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);\n            _this._hasMoved = true;\n            event.preventDefault();\n            _this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (_this._dropContainer) {\n                _this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                var activeTransform = _this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                _this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                    _this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (_this._moveEventSubscriptions > 0) {\n                _this._ngZone.run((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this._moveEvents.next({\n                        source: _this,\n                        pointerPosition: constrainedPointerPosition,\n                        event: event,\n                        delta: _this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            // Note that here we use `isDragging` from the service, rather than from `this`.\n            // The difference is that the one from the service reflects whether a dragging sequence\n            // has been initiated, whereas the one on `this` includes whether the user has passed\n            // the minimum dragging threshold.\n            if (!_this._dragDropRegistry.isDragging(_this)) {\n                return;\n            }\n            _this._removeSubscriptions();\n            _this._dragDropRegistry.stopDragging(_this);\n            if (_this._handles) {\n                _this._rootElement.style.webkitTapHighlightColor = _this._rootElementTapHighlight;\n            }\n            if (!_this._hasStartedDragging) {\n                return;\n            }\n            _this.released.next({ source: _this });\n            if (!_this._dropContainer) {\n                // Convert the active transform into a passive one. This means that next time\n                // the user starts dragging the item, its position will be calculated relatively\n                // to the new passive transform.\n                _this._passiveTransform.x = _this._activeTransform.x;\n                _this._passiveTransform.y = _this._activeTransform.y;\n                _this._ngZone.run((/**\n                 * @return {?}\n                 */\n                function () { return _this.ended.next({ source: _this }); }));\n                _this._dragDropRegistry.stopDragging(_this);\n                return;\n            }\n            _this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            function () {\n                _this._cleanupDragArtifacts(event);\n                _this._dragDropRegistry.stopDragging(_this);\n            }));\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    Object.defineProperty(DragRef.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: /**\n         * Whether starting to drag this element is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._toggleNativeDragInteractions();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    DragRef.prototype.getPlaceholderElement = /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._placeholder;\n    };\n    /** Returns the root draggable element. */\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    DragRef.prototype.getRootElement = /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    function () {\n        return this._rootElement;\n    };\n    /** Registers the handles that can be used to drag the element. */\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    DragRef.prototype.withHandles = /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    function (handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        function (handle) { return coerceElement(handle); }));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        function (handle) { return toggleNativeDragInteractions(handle, false); }));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    DragRef.prototype.withPreviewTemplate = /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    function (template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    DragRef.prototype.withPlaceholderTemplate = /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    function (template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    DragRef.prototype.withRootElement = /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    function (rootElement) {\n        /** @type {?} */\n        var element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    DragRef.prototype.withBoundaryElement = /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    function (boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        return (/** @type {?} */ (this));\n    };\n    /** Removes the dragging functionality from the DOM element. */\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    DragRef.prototype.dispose = /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    function () {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeElement(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._nextSibling = (/** @type {?} */ (null));\n    };\n    /** Checks whether the element is currently being dragged. */\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    DragRef.prototype.isDragging = /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    };\n    /** Resets a standalone drag item to its initial position. */\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    DragRef.prototype.reset = /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    function () {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    };\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    DragRef.prototype.disableHandle = /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    function (handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    };\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    DragRef.prototype.enableHandle = /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    function (handle) {\n        this._disabledHandles.delete(handle);\n    };\n    /** Sets the layout direction of the draggable item. */\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    DragRef.prototype.withDirection = /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    function (direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    };\n    /** Sets the container that the item is part of. */\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    DragRef.prototype._withDropContainer = /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    function (container) {\n        this._dropContainer = container;\n    };\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    DragRef.prototype.getFreeDragPosition = /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    function () {\n        return { x: this._passiveTransform.x, y: this._passiveTransform.y };\n    };\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    DragRef.prototype.setFreeDragPosition = /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    function (value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    };\n    /** Unsubscribes from the global subscriptions. */\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._removeSubscriptions = /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n    };\n    /** Destroys the preview element and its ViewRef. */\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._destroyPreview = /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._preview) {\n            removeElement(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    };\n    /** Destroys the placeholder element and its ViewRef. */\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._destroyPlaceholder = /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._placeholder) {\n            removeElement(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    };\n    /** Starts the dragging sequence. */\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._startDragSequence = /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        if (this._dropContainer) {\n            /** @type {?} */\n            var element = this._rootElement;\n            // Grab the `nextSibling` before the preview and placeholder\n            // have been created so we don't get the preview by accident.\n            this._nextSibling = element.nextSibling;\n            /** @type {?} */\n            var preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            var placeholder = this._placeholder = this._createPlaceholderElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild((/** @type {?} */ (element.parentNode)).replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    };\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    DragRef.prototype._initializeDragSequence = /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    function (referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        var isDragging = this.isDragging();\n        /** @type {?} */\n        var isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        var isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        var rootElement = this._rootElement;\n        /** @type {?} */\n        var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._toggleNativeDragInteractions();\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    };\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._cleanupDragArtifacts = /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var _this = this;\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        if (this._nextSibling) {\n            (/** @type {?} */ (this._nextSibling.parentNode)).insertBefore(this._rootElement, this._nextSibling);\n        }\n        else {\n            this._initialContainer.element.appendChild(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var container = (/** @type {?} */ (_this._dropContainer));\n            /** @type {?} */\n            var currentIndex = container.getItemIndex(_this);\n            var _a = _this._getPointerPositionOnPage(event), x = _a.x, y = _a.y;\n            /** @type {?} */\n            var isPointerOverContainer = container._isOverContainer(x, y);\n            _this.ended.next({ source: _this });\n            _this.dropped.next({\n                item: _this,\n                currentIndex: currentIndex,\n                previousIndex: _this._initialContainer.getItemIndex(_this),\n                container: container,\n                previousContainer: _this._initialContainer,\n                isPointerOverContainer: isPointerOverContainer\n            });\n            container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer);\n            _this._dropContainer = _this._initialContainer;\n        }));\n    };\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    DragRef.prototype._updateActiveDropContainer = /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var _this = this;\n        var x = _a.x, y = _a.y;\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        var newContainer = (/** @type {?} */ (this._dropContainer))._getSiblingContainerFromPosition(this, x, y) ||\n            this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left it's\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            function () {\n                // Notify the old container that the item has left.\n                _this.exited.next({ item: _this, container: (/** @type {?} */ (_this._dropContainer)) });\n                (/** @type {?} */ (_this._dropContainer)).exit(_this);\n                // Notify the new container that the item has entered.\n                _this.entered.next({ item: _this, container: (/** @type {?} */ (newContainer)) });\n                _this._dropContainer = (/** @type {?} */ (newContainer));\n                _this._dropContainer.enter(_this, x, y);\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    };\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._createPreviewElement = /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var previewConfig = this._previewTemplate;\n        /** @type {?} */\n        var previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        var preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            var viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = viewRef.rootNodes[0];\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            var element = this._rootElement;\n            /** @type {?} */\n            var elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = elementRect.width + \"px\";\n            preview.style.height = elementRect.height + \"px\";\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        return preview;\n    };\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    DragRef.prototype._animatePreviewToPlaceholder = /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    function () {\n        var _this = this;\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        var placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        var duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            function (resolve) {\n                /** @type {?} */\n                var handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                function (event) {\n                    if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                        _this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                var timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                _this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    };\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._createPlaceholderElement = /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        var placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = this._placeholderRef.rootNodes[0];\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    };\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    DragRef.prototype._getPointerPositionInElement = /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    function (referenceElement, event) {\n        /** @type {?} */\n        var elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    };\n    /** Determines the point of the page that was touched by the user. */\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._getPointerPositionOnPage = /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    };\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._getConstrainedPointerPosition = /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        var constrainedPoint = this.constrainPosition ? this.constrainPosition(point) : point;\n        /** @type {?} */\n        var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n            /** @type {?} */\n            var boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            var previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            var minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            var minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            var maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    };\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    DragRef.prototype._updatePointerDirectionDelta = /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    function (pointerPositionOnPage) {\n        var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n        /** @type {?} */\n        var delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        var changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        var changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    };\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._toggleNativeDragInteractions = /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        var shouldEnable = this.disabled || this._handles.length > 0;\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    };\n    /** Removes the manually-added event listeners from the root element. */\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    DragRef.prototype._removeRootElementListeners = /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    };\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    DragRef.prototype._applyRootElementTransform = /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        /** @type {?} */\n        var transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    };\n    return DragRef;\n}());\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    var clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    var descendantsWithId = clone.querySelectorAll('[id]');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (var i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param {?} element Element to be removed.\n * @return {?}\n */\nfunction removeElement(element) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    return event.type.startsWith('touch');\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    var from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    var to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    var target = array[from];\n    /** @type {?} */\n    var delta = to < from ? -1 : 1;\n    for (var i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    var from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop refs.\n * @type {?}\n */\nvar _uniqueIdCounter = 0;\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nvar DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nvar  /**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nDropListRef = /** @class */ (function () {\n    function DropListRef(element, _dragDropRegistry, _document) {\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * Unique ID for the drop list.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 8.0.0\n         */\n        this.id = \"cdk-drop-list-ref-\" + _uniqueIdCounter++;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = true;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        function () { return true; });\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        _dragDropRegistry.registerDropContainer(this);\n        this._document = _document;\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    DropListRef.prototype.dispose = /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    function () {\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    };\n    /** Whether an item from this list is currently being dragged. */\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    DropListRef.prototype.isDragging = /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._isDragging;\n    };\n    /** Starts dragging an item. */\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    DropListRef.prototype.start = /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._activeDraggables = this._draggables.slice();\n        this._cacheOwnPosition();\n        this._cacheItemPositions();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        function (sibling) { return sibling._startReceiving(_this); }));\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     */\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype.enter = /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY) {\n        this.entered.next({ item: item, container: this });\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        var newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        var activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        var currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        var placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        var newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            var element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this.element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    DropListRef.prototype.exit = /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    function (item) {\n        this._reset();\n        this.exited.next({ item: item, container: this });\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     */\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    DropListRef.prototype.drop = /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    function (item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._reset();\n        this.dropped.next({\n            item: item,\n            currentIndex: currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer: previousContainer,\n            isPointerOverContainer: isPointerOverContainer\n        });\n    };\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    DropListRef.prototype.withItems = /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    function (items) {\n        var _this = this;\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) { return item._withDropContainer((/** @type {?} */ (_this))); }));\n        return (/** @type {?} */ (this));\n    };\n    /** Sets the layout direction of the drop list. */\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    DropListRef.prototype.withDirection = /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    function (direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    DropListRef.prototype.connectedTo = /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    function (connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    DropListRef.prototype.withOrientation = /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    function (orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    DropListRef.prototype.getItemIndex = /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    function (item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        function (currentItem) { return currentItem.drag === item; }));\n    };\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    DropListRef.prototype.isReceiving = /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    function () {\n        return this._activeSiblings.size > 0;\n    };\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    DropListRef.prototype._sortItem = /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        var siblings = this._itemPositions;\n        /** @type {?} */\n        var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        function (currentItem) { return currentItem.drag === item; }));\n        /** @type {?} */\n        var siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        var currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        var newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        var delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        var oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item: item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        function (sibling, index) {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            var isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            var offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    };\n    /** Caches the position of the drop list. */\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._cacheOwnPosition = /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._clientRect = this.element.getBoundingClientRect();\n    };\n    /** Refreshes the position cache of the items and sibling containers. */\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._cacheItemPositions = /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        function (drag) {\n            /** @type {?} */\n            var elementToMeasure = _this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            /** @type {?} */\n            var clientRect = elementToMeasure.getBoundingClientRect();\n            return {\n                drag: drag,\n                offset: 0,\n                // We need to clone the `clientRect` here, because all the values on it are readonly\n                // and we need to be able to update them. Also we can't use a spread here, because\n                // the values on a `ClientRect` aren't own properties. See:\n                // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n                clientRect: {\n                    top: clientRect.top,\n                    right: clientRect.right,\n                    bottom: clientRect.bottom,\n                    left: clientRect.left,\n                    width: clientRect.width,\n                    height: clientRect.height\n                }\n            };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        function (a, b) {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    };\n    /** Resets the container to its initial state. */\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._reset = /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) { return item.getRootElement().style.transform = ''; }));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        function (sibling) { return sibling._stopReceiving(_this); }));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n    };\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    DropListRef.prototype._getSiblingOffsetPx = /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    function (currentIndex, siblings, delta) {\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        var immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            var start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            var end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    };\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @param pointerX Coordinates along the X axis.\n     * @param pointerY Coordinates along the Y axis.\n     */\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._isPointerNearDropContainer = /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    function (pointerX, pointerY) {\n        var _a = this._clientRect, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        /** @type {?} */\n        var xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        var yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    };\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    DropListRef.prototype._getItemOffsetPx = /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    function (currentPosition, newPosition, delta) {\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    };\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    DropListRef.prototype._getItemIndexFromPointerPosition = /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, delta) {\n        var _this = this;\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        function (_a, _, array) {\n            var drag = _a.drag, clientRect = _a.clientRect;\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                var direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._isOverContainer = /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    };\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._getSiblingContainerFromPosition = /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        function (sibling) { return sibling._canReceive(item, x, y); }));\n    };\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._canReceive = /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n            return false;\n        }\n        /** @type {?} */\n        var elementFromPoint = this._document.elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this.element || this.element.contains(elementFromPoint);\n    };\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    DropListRef.prototype._startReceiving = /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    function (sibling) {\n        /** @type {?} */\n        var activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n        }\n    };\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    DropListRef.prototype._stopReceiving = /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    function (sibling) {\n        this._activeSiblings.delete(sibling);\n    };\n    return DropListRef;\n}());\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (var i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nvar activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nvar DragDropRegistry = /** @class */ (function () {\n    function DragDropRegistry(_ngZone, _document) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (_this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    DragDropRegistry.prototype.registerDropContainer = /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    function (drop) {\n        if (!this._dropInstances.has(drop)) {\n            if (this.getDropContainer(drop.id)) {\n                throw Error(\"Drop instance with id \\\"\" + drop.id + \"\\\" has already been registered.\");\n            }\n            this._dropInstances.add(drop);\n        }\n    };\n    /** Adds a drag item instance to the registry. */\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.registerDragItem = /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        var _this = this;\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            function () {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    };\n    /** Removes a drop container from the registry. */\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    DragDropRegistry.prototype.removeDropContainer = /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    function (drop) {\n        this._dropInstances.delete(drop);\n    };\n    /** Removes a drag item instance from the registry. */\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.removeDragItem = /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    };\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    DragDropRegistry.prototype.startDragging = /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    function (drag, event) {\n        var _this = this;\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            var isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                function (e) { return _this.pointerMove.next((/** @type {?} */ (e))); }),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                function (e) { return _this.pointerUp.next((/** @type {?} */ (e))); }),\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // TODO(crisbeto): prevent mouse wheel scrolling while\n            // dragging until we've set up proper scroll handling.\n            if (!isTouchEvent) {\n                this._globalListeners.set('wheel', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            function () {\n                _this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                function (config, name) {\n                    _this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    };\n    /** Stops dragging a drag item instance. */\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.stopDragging = /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    };\n    /** Gets whether a drag item instance is currently being dragged. */\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.isDragging = /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        return this._activeDragInstances.has(drag);\n    };\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    DragDropRegistry.prototype.getDropContainer = /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        return Array.from(this._dropInstances).find((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        function (instance) { return instance.id === id; }));\n    };\n    /**\n     * @return {?}\n     */\n    DragDropRegistry.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        function (instance) { return _this.removeDragItem(instance); }));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        function (instance) { return _this.removeDropContainer(instance); }));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    };\n    /** Clears out the global event listeners from the `document`. */\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    DragDropRegistry.prototype._clearGlobalListeners = /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        function (config, name) {\n            _this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    };\n    DragDropRegistry.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    DragDropRegistry.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ DragDropRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n    return DragDropRegistry;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nvar DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nvar DragDrop = /** @class */ (function () {\n    function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    DragDrop.prototype.createDrag = /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    function (element, config) {\n        if (config === void 0) { config = DEFAULT_CONFIG; }\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    };\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    DragDrop.prototype.createDropList = /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    function (element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document);\n    };\n    DragDrop.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    DragDrop.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewportRuler },\n        { type: DragDropRegistry }\n    ]; };\n    /** @nocollapse */ DragDrop.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n    return DragDrop;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nvar CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * \\@breaking-change 8.0.0\n * @type {?}\n */\nvar CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nvar CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nvar CdkDragHandle = /** @class */ (function () {\n    function CdkDragHandle(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n        /** Whether starting to drag through this handle is disabled. */\n        get: /**\n         * Whether starting to drag through this handle is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._stateChanges.next(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDragHandle.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.complete();\n    };\n    CdkDragHandle.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle'\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragHandle.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n    ]; };\n    CdkDragHandle.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n    };\n    return CdkDragHandle;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nvar CdkDragPlaceholder = /** @class */ (function () {\n    function CdkDragPlaceholder(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CdkDragPlaceholder.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragPlaceholder.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPlaceholder.propDecorators = {\n        data: [{ type: Input }]\n    };\n    return CdkDragPlaceholder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nvar CdkDragPreview = /** @class */ (function () {\n    function CdkDragPreview(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CdkDragPreview.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[cdkDragPreview]'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragPreview.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPreview.propDecorators = {\n        data: [{ type: Input }]\n    };\n    return CdkDragPreview;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nvar CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nvar CdkDrag = /** @class */ (function () {\n    function CdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        var _this = this;\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        function (observer) {\n            /** @type {?} */\n            var subscription = _this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            function (movedEvent) { return ({\n                source: _this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta\n            }); }))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            function () {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: /**\n         * Whether starting to drag this element is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._dragRef.disabled = this._disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    CdkDrag.prototype.getPlaceholderElement = /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getPlaceholderElement();\n    };\n    /** Returns the root draggable element. */\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    CdkDrag.prototype.getRootElement = /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getRootElement();\n    };\n    /** Resets a standalone drag item to its initial position. */\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    CdkDrag.prototype.reset = /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    function () {\n        this._dragRef.reset();\n    };\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    CdkDrag.prototype.getFreeDragPosition = /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getFreeDragPosition();\n    };\n    /**\n     * @return {?}\n     */\n    CdkDrag.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this._updateRootElement();\n            // Listen for any newly-added handles.\n            _this._handles.changes.pipe(startWith(_this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            function (handles) {\n                /** @type {?} */\n                var childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                function (handle) { return handle._parentDrag === _this; }))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                function (handle) { return handle.element; }));\n                _this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            function (handles) {\n                return merge.apply(void 0, handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                function (item) { return item._stateChanges; })));\n            })), takeUntil(_this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            function (handleInstance) {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                var dragRef = _this._dragRef;\n                /** @type {?} */\n                var handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (_this.freeDragPosition) {\n                _this._dragRef.setFreeDragPosition(_this.freeDragPosition);\n            }\n        }));\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkDrag.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        var positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkDrag.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    };\n    /** Syncs the root element with the `DragRef`. */\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    CdkDrag.prototype._updateRootElement = /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var element = this.element.nativeElement;\n        /** @type {?} */\n        var rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(\"cdkDrag must be attached to an element node. \" +\n                (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    };\n    /** Gets the boundary element, based on the `boundaryElementSelector`. */\n    /**\n     * Gets the boundary element, based on the `boundaryElementSelector`.\n     * @private\n     * @return {?}\n     */\n    CdkDrag.prototype._getBoundaryElement = /**\n     * Gets the boundary element, based on the `boundaryElementSelector`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var selector = this.boundaryElementSelector;\n        return selector ? getClosestMatchingAncestor(this.element.nativeElement, selector) : null;\n    };\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDrag.prototype._syncInputs = /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                var dir = _this._dir;\n                /** @type {?} */\n                var placeholder = _this._placeholderTemplate ? {\n                    template: _this._placeholderTemplate.templateRef,\n                    context: _this._placeholderTemplate.data,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                var preview = _this._previewTemplate ? {\n                    template: _this._previewTemplate.templateRef,\n                    context: _this._previewTemplate.data,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref.dragStartDelay = coerceNumberProperty(_this.dragStartDelay);\n                ref.constrainPosition = _this.constrainPosition;\n                ref\n                    .withBoundaryElement(_this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    };\n    /** Handles the events from the underlying `DragRef`. */\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDrag.prototype._handleEvents = /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.started.emit({ source: _this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.released.emit({ source: _this });\n        }));\n        ref.ended.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.ended.emit({ source: _this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.entered.emit({\n                container: event.container.data,\n                item: _this\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.exited.emit({\n                container: event.container.data,\n                item: _this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: _this\n            });\n        }));\n    };\n    CdkDrag.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDrag.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: DragDrop },\n        { type: ChangeDetectorRef }\n    ]; };\n    CdkDrag.propDecorators = {\n        _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n        _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview, { static: false },] }],\n        _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder, { static: false },] }],\n        data: [{ type: Input, args: ['cdkDragData',] }],\n        lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n        rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n        boundaryElementSelector: [{ type: Input, args: ['cdkDragBoundary',] }],\n        dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n        freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n        disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n        constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n        started: [{ type: Output, args: ['cdkDragStarted',] }],\n        released: [{ type: Output, args: ['cdkDragReleased',] }],\n        ended: [{ type: Output, args: ['cdkDragEnded',] }],\n        entered: [{ type: Output, args: ['cdkDragEntered',] }],\n        exited: [{ type: Output, args: ['cdkDragExited',] }],\n        dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n        moved: [{ type: Output, args: ['cdkDragMoved',] }]\n    };\n    return CdkDrag;\n}());\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    var currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nvar CdkDropListGroup = /** @class */ (function () {\n    function CdkDropListGroup() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        get: /**\n         * Whether starting a dragging sequence from inside this group is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDropListGroup.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._items.clear();\n    };\n    CdkDropListGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                },] },\n    ];\n    CdkDropListGroup.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n    };\n    return CdkDropListGroup;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nvar _uniqueIdCounter$1 = 0;\nvar ɵ0 = undefined;\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nvar CdkDropList = /** @class */ (function () {\n    function CdkDropList(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        var _this = this;\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = \"cdk-drop-list-\" + _uniqueIdCounter$1++;\n        this._disabled = false;\n        this._sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        function () { return true; });\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        function (drag, drop) {\n            return _this.enterPredicate(drag.data, drop.data);\n        });\n        this._syncInputs(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from this container is disabled. */\n        get: /**\n         * Whether starting a dragging sequence from this container is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (!!this._group && this._group.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkDropList.prototype, \"sortingDisabled\", {\n        /** Whether sorting within this drop list is disabled. */\n        get: /**\n         * Whether sorting within this drop list is disabled.\n         * @return {?}\n         */\n        function () { return this._sortingDisabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._sortingDisabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDropList.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) {\n            _this._dropListRef.withItems(items.map((/**\n             * @param {?} drag\n             * @return {?}\n             */\n            function (drag) { return drag._dragRef; })));\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    CdkDropList.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /** Starts dragging an item. */\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    CdkDropList.prototype.start = /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    function () {\n        this._dropListRef.start();\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     */\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    CdkDropList.prototype.drop = /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    function (item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, ((/** @type {?} */ (previousContainer)))._dropListRef, isPointerOverContainer);\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     */\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype.enter = /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    CdkDropList.prototype.exit = /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    function (item) {\n        this._dropListRef.exit(item._dragRef);\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    CdkDropList.prototype.getItemIndex = /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    function (item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    };\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._sortItem = /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, pointerDelta) {\n        return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n    };\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._getSiblingContainerFromPosition = /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        /** @type {?} */\n        var result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n        return result ? result.data : null;\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._isOverContainer = /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        return this._dropListRef._isOverContainer(x, y);\n    };\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDropList.prototype._syncInputs = /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return ref.withDirection(value); }));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var siblings = coerceArray(_this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            function (drop) {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    function (list) { return list.id === drop; })))) : drop;\n            }));\n            if (_this._group) {\n                _this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                function (drop) {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = _this.disabled;\n            ref.lockAxis = _this.lockAxis;\n            ref.sortingDisabled = _this.sortingDisabled;\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            function (drop) { return drop && drop !== _this; })).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            function (list) { return list._dropListRef; })))\n                .withOrientation(_this.orientation);\n        }));\n    };\n    /** Handles events from the underlying DropListRef. */\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDropList.prototype._handleEvents = /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.entered.emit({\n                container: _this,\n                item: event.item.data\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.exited.emit({\n                container: _this,\n                item: event.item.data\n            });\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: _this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            _this._changeDetectorRef.markForCheck();\n        }));\n    };\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     */\n    CdkDropList._dropLists = [];\n    CdkDropList.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CdkDropListGroup, useValue: ɵ0 },\n                        { provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDropList.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DragDrop },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n    ]; };\n    CdkDropList.propDecorators = {\n        _draggables: [{ type: ContentChildren, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    function () { return CdkDrag; })), {\n                        // Explicitly set to false since some of the logic below makes assumptions about it.\n                        // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n                        descendants: false\n                    },] }],\n        connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n        data: [{ type: Input, args: ['cdkDropListData',] }],\n        orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n        id: [{ type: Input }],\n        lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n        disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n        sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n        enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n        dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n        entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n        exited: [{ type: Output, args: ['cdkDropListExited',] }],\n        sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n    };\n    return CdkDropList;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DragDropModule = /** @class */ (function () {\n    function DragDropModule() {\n    }\n    DragDropModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    exports: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    providers: [\n                        DragDrop,\n                    ]\n                },] },\n    ];\n    return DragDropModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, CDK_DRAG_PARENT as ɵb };\n//# sourceMappingURL=drag-drop.es5.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"[_nghost-%COMP%]{margin-bottom:24px;display:block}\"];\nexport { styles as styles };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./breadcrumbs.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../../node_modules/@angular/material/icon/typings/index.ngfactory\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/flex-layout/core\";\nimport * as i8 from \"./breadcrumbs.component\";\nvar styles_BreadcrumbsComponent = [i0.styles];\nvar RenderType_BreadcrumbsComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_BreadcrumbsComponent, data: {} });\nexport { RenderType_BreadcrumbsComponent as RenderType_BreadcrumbsComponent };\nfunction View_BreadcrumbsComponent_2(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 3, \"a\", [[\"class\", \"crumb link\"]], [[1, \"target\", 0], [8, \"href\", 4]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i1.ɵnov(_v, 1).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i1.ɵdid(1, 671744, null, 0, i2.RouterLinkWithHref, [i2.Router, i2.ActivatedRoute, i3.LocationStrategy], { routerLink: [0, \"routerLink\"] }, null), i1.ɵpad(2, 1), (_l()(), i1.ɵted(3, null, [\"\", \"\"]))], function (_ck, _v) { var currVal_2 = _ck(_v, 2, 0, _v.parent.context.$implicit.link); _ck(_v, 1, 0, currVal_2); }, function (_ck, _v) { var currVal_0 = i1.ɵnov(_v, 1).target; var currVal_1 = i1.ɵnov(_v, 1).href; _ck(_v, 0, 0, currVal_0, currVal_1); var currVal_3 = _v.parent.context.$implicit.name; _ck(_v, 3, 0, currVal_3); }); }\nfunction View_BreadcrumbsComponent_3(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"div\", [[\"class\", \"link\"]], null, null, null, null, null)), (_l()(), i1.ɵted(1, null, [\"\", \"\"]))], null, function (_ck, _v) { var currVal_0 = _v.parent.context.$implicit.name; _ck(_v, 1, 0, currVal_0); }); }\nfunction View_BreadcrumbsComponent_4(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 2, \"mat-icon\", [[\"class\", \"chevron mat-icon notranslate\"], [\"role\", \"img\"]], [[2, \"mat-icon-inline\", null], [2, \"mat-icon-no-color\", null]], null, null, i4.View_MatIcon_0, i4.RenderType_MatIcon)), i1.ɵdid(1, 9158656, null, 0, i5.MatIcon, [i1.ElementRef, i5.MatIconRegistry, [8, null], [2, i5.MAT_ICON_LOCATION]], null, null), (_l()(), i1.ɵted(-1, 0, [\"chevron_right\"]))], function (_ck, _v) { _ck(_v, 1, 0); }, function (_ck, _v) { var currVal_0 = i1.ɵnov(_v, 1).inline; var currVal_1 = (((i1.ɵnov(_v, 1).color !== \"primary\") && (i1.ɵnov(_v, 1).color !== \"accent\")) && (i1.ɵnov(_v, 1).color !== \"warn\")); _ck(_v, 0, 0, currVal_0, currVal_1); }); }\nfunction View_BreadcrumbsComponent_1(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 9, \"div\", [[\"class\", \"crumb\"], [\"fxLayout\", \"row\"], [\"fxLayoutAlign\", \"start center\"]], null, null, null, null, null)), i1.ɵdid(1, 671744, null, 0, i6.DefaultLayoutDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutStyleBuilder], i7.MediaMarshaller], { fxLayout: [0, \"fxLayout\"] }, null), i1.ɵdid(2, 671744, null, 0, i6.DefaultLayoutAlignDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutAlignStyleBuilder], i7.MediaMarshaller], { fxLayoutAlign: [0, \"fxLayoutAlign\"] }, null), i1.ɵdid(3, 16384, null, 0, i3.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_2)), i1.ɵdid(5, 278528, null, 0, i3.NgSwitchCase, [i1.ViewContainerRef, i1.TemplateRef, i3.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_3)), i1.ɵdid(7, 16384, null, 0, i3.NgSwitchDefault, [i1.ViewContainerRef, i1.TemplateRef, i3.NgSwitch], null, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_4)), i1.ɵdid(9, 16384, null, 0, i3.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var currVal_0 = \"row\"; _ck(_v, 1, 0, currVal_0); var currVal_1 = \"start center\"; _ck(_v, 2, 0, currVal_1); var currVal_2 = !!_v.context.$implicit.link; _ck(_v, 3, 0, currVal_2); var currVal_3 = true; _ck(_v, 5, 0, currVal_3); var currVal_4 = !_v.context.last; _ck(_v, 9, 0, currVal_4); }, null); }\nexport function View_BreadcrumbsComponent_0(_l) { return i1.ɵvid(2, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"div\", [[\"class\", \"title\"]], null, null, null, null, null)), (_l()(), i1.ɵted(1, null, [\"\", \"\"])), (_l()(), i1.ɵeld(2, 0, null, null, 4, \"div\", [[\"class\", \"crumbs\"], [\"fxLayout\", \"row\"], [\"fxLayoutAlign\", \"start center\"]], null, null, null, null, null)), i1.ɵdid(3, 671744, null, 0, i6.DefaultLayoutDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutStyleBuilder], i7.MediaMarshaller], { fxLayout: [0, \"fxLayout\"] }, null), i1.ɵdid(4, 671744, null, 0, i6.DefaultLayoutAlignDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutAlignStyleBuilder], i7.MediaMarshaller], { fxLayoutAlign: [0, \"fxLayoutAlign\"] }, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_1)), i1.ɵdid(6, 278528, null, 0, i3.NgForOf, [i1.ViewContainerRef, i1.TemplateRef, i1.IterableDiffers], { ngForOf: [0, \"ngForOf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_1 = \"row\"; _ck(_v, 3, 0, currVal_1); var currVal_2 = \"start center\"; _ck(_v, 4, 0, currVal_2); var currVal_3 = _co.crumbs; _ck(_v, 6, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.title; _ck(_v, 1, 0, currVal_0); }); }\nexport function View_BreadcrumbsComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"ngx-breadcrumbs\", [], null, null, null, View_BreadcrumbsComponent_0, RenderType_BreadcrumbsComponent)), i1.ɵdid(1, 114688, null, 0, i8.BreadcrumbsComponent, [], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar BreadcrumbsComponentNgFactory = i1.ɵccf(\"ngx-breadcrumbs\", i8.BreadcrumbsComponent, View_BreadcrumbsComponent_Host_0, { title: \"title\", crumbs: \"crumbs\" }, {}, []);\nexport { BreadcrumbsComponentNgFactory as BreadcrumbsComponentNgFactory };\n","<div class=\"title\">{{ title }}</div>\n<div class=\"crumbs\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  <div\n    class=\"crumb\"\n    *ngFor=\"let crumb of crumbs; let last = last\"\n    [ngSwitch]=\"!!crumb.link\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n  >\n    <a *ngSwitchCase=\"true\" class=\"crumb link\" [routerLink]=\"[crumb.link]\">{{ crumb.name }}</a>\n    <div *ngSwitchDefault class=\"link\">{{ crumb.name }}</div>\n    <mat-icon *ngIf=\"!last\" class=\"chevron\">chevron_right</mat-icon>\n  </div>\n</div>\n"],"sourceRoot":""}