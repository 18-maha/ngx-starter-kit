{"version":3,"sources":["webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/services/random-account.service.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/services/random-account.service.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/containers/accounts-grid-list/accounts-grid-list.component.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/containers/accounts-grid-list/accounts-grid-list.component.html","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/containers/accounts-grid-list/accounts-grid-list.component.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/models/account.model.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/models/account.model.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/components/account-edit/states.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/addMonths/index.js.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/getDaysInMonth/index.js.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/__ivy_ngcc__/esm2015/autocomplete.js.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/components/account-edit/account-edit.component.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/components/account-edit/account-edit.component.html","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/components/account-edit/account-edit.component.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/subYears/index.js.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/addYears/index.js.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/services/account.service.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/services/account.service.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/containers/accounts-table/accounts-table.component.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.component.html","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/containers/accounts-table/accounts-table.component.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/components/account-detail/account-detail.component.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/components/account-detail/account-detail.component.html","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/components/account-detail/account-detail.component.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/grid.module.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/lib/grid.module.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/grid/src/index.ts"],"names":["random_account_service_RandomAccountService","RandomAccountService","[object Object]","httpClient","this","baseUrl","params","http","g","append","pageSize","get","pipe","Object","map","a","response","results","id","ngInjectableDef","core","fc","token","factory","t","wc","c","providedIn","_c0","_c1","_c2","_c3","_c4","_c5","_c6","_c7","_c8","_c9","_c10","_c11","_c12","_c13","_c14","AccountsGridListComponent_ng_container_18_Template","rf","ctx","lc","_c15","_c16","_c17","_c18","_c19","AccountsGridListComponent_ng_template_21_mat_grid_tile_1_Template","_r161","rc","qc","bd","zc","$event","Rc","account_r159","$implicit","Dc","onClick","kc","fd","oc","Ec","ctx_r158","Uc","Yb","selection","isSelected","cd","Kc","picture","thumbnail","Tc","jd","name","title","first","last","hd","email","kd","location","street","city","state","zip","Fc","dob","date","phone","cell","AccountsGridListComponent_ng_template_21_Template","dd","ctx_r155","Jc","renderData","_c20","_c21","_c22","_c23","_c24","_c25","_c26","_c27","AccountsGridListComponent_ng_template_23_ng_container_1_mat_list_item_3_mat_divider_11_Template","AccountsGridListComponent_ng_template_23_ng_container_1_mat_list_item_3_Template","_r169","account_r165","last_r166","ctx_r164","gd","gender","AccountsGridListComponent_ng_template_23_ng_container_1_Template","nc","mc","accounts_r163","key","value","AccountsGridListComponent_ng_template_23_Template","ctx_r157","Gc","_c28","accounts_grid_list_component_AccountsGridListComponent","AccountsGridListComponent","router","accountService","crumbs","link","collections","getAll","toPromise","then","accounts","accountDataSource","table","k","paginator","connect","filterValue","trim","toLowerCase","filter","account","tslib_es6","__awaiter","toggle","accountP","getById","console","log","ngComponentDef","dc","type","selectors","jc","fesm2015_router","h","viewQuery","_t","Xc","Nc","Ac","gridView","consts","vars","template","applyFilter","target","ed","_r151","Oc","_r154","_r156","directives","breadcrumbs_component","card","toolbar","form_field","b","flex","input","f","icon","button_toggle","common","n","grid_list","m","e","i","d","esm2015_button","list","divider","esm2015_core","l","pipes","group_by_pipe","styles","account_model_Account","shared_src","super","arguments","Address","Gender","male","female","states","addMonths","dirtyDate","dirtyAmount","length","TypeError","toDate","amount","toInteger","desiredMonth","getMonth","dateWithDesiredMonth","Date","setFullYear","getFullYear","setHours","daysInMonth","year","monthIndex","lastDayOfMonth","getDate","setMonth","Math","min","autocomplete_c0","autocomplete_c1","autocomplete_c2","autocomplete_c3","MatAutocomplete_ng_template_0_Template","Hc","ctx_r106","_classList","autocomplete_c4","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","A","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","showPanel","_isOpen","displayWith","optionSelected","opened","closed","_autoActiveFirstOption","isOpen","coercion","classList","split","reduce","className","_setVisibilityClasses","nativeElement","_keyManager","a11y","options","withWrap","_setVisibility","scrollTop","panel","markForCheck","event","emit","r","contentQueries","dirIndex","ac","p","o","optionGroups","ab","md","hostBindings","elIndex","pc","inputs","disableRipple","panelWidth","outputs","exportAs","features","Tb","provide","useExisting","Rb","ngContentSelectors","Ic","encapsulation","changeDetection","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","overlay","useFactory","scrollStrategies","reposition","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","fesm2015_forms","mb","autocomplete_MatAutocompleteTrigger","multi","MatAutocompleteTrigger","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","Subscription","EMPTY","_canOpenOnNextFocus","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","merge","onSelectionChange","onStable","asObservable","take","switchMap","window","runOutsideAngular","addEventListener","_scrollStrategy","autocompleteDisabled","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","unsubscribe","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","of","activeOption","activeItem","fromEvent","clickTarget","formField","contains","overlayElement","Promise","resolve","_setTriggerValue","fn","isDisabled","disabled","keyCode","keycodes","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","x","newScrollPosition","y","_getScrollTop","_setScrollTop","firstStable","optionChanges","tap","reapplyLastPosition","delay","wasOpen","subscribe","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","Error","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","portal","create","_getOverlayConfig","keydownEvents","altKey","next","stopPropagation","change","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPosition","originX","originY","overlayX","overlayY","abovePosition","panelClass","positions","withPositions","connectedTo","elementRef","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","ngDirectiveDef","ec","gb","L","bidi","scrolling","Ub","_handleFocus","_handleInput","_handleKeydown","Vb","toString","Sb","MatAutocompleteModule","ngModuleDef","hc","ngInjectorDef","gc","providers","imports","q","account_edit_component_c0","account_edit_component_c1","account_edit_component_c2","account_edit_component_c3","account_edit_component_c4","account_edit_component_c5","account_edit_component_c6","account_edit_component_c7","account_edit_component_c8","account_edit_component_c9","account_edit_component_c10","account_edit_component_c11","account_edit_component_c12","account_edit_component_c13","account_edit_component_c14","account_edit_component_c15","account_edit_component_c16","account_edit_component_c17","account_edit_component_c18","account_edit_component_c19","account_edit_component_c20","account_edit_component_c21","account_edit_component_c22","account_edit_component_c23","AccountEditComponent_mat_option_22_Template","gender_r174","AccountEditComponent_mat_option_35_Template","state_r175","account_edit_component_AccountEditComponent","AccountEditComponent","data","dialogRef","fb","genderOptions","keys","maxDate","minDate","ngOnInit","filteredStates","entityForm","valueChanges","startWith","filterStates","slice","indexOf","item","group","first_name","u","required","last_name","minLength","company","address","updateOn","esm2015_dialog","submit","_r170","_r172","invalid","drag_drop","v","j","datepicker","esm2015_select","autocomplete_MatAutocomplete","account_service_AccountService","AccountService","environment","API_BASE_URL","entityPath","accounts_table_component_c0","accounts_table_component_c1","accounts_table_component_c2","accounts_table_component_c3","accounts_table_component_c4","accounts_table_component_c5","accounts_table_component_c6","accounts_table_component_c7","accounts_table_component_c8","accounts_table_component_c9","accounts_table_component_c10","accounts_table_component_c11","accounts_table_component_c12","accounts_table_component_c13","accounts_table_component_c14","accounts_table_component_c15","accounts_table_component_c16","accounts_table_component_c17","accounts_table_component_c18","accounts_table_component_c19","accounts_table_component_c20","accounts_table_component_c21","accounts_table_component_c22","accounts_table_component_c23","AccountsTableComponent_mat_toolbar_2_button_8_Template","_r193","accounts_table_component_c24","AccountsTableComponent_mat_toolbar_2_button_9_Template","_r189","accounts_table_component_c25","accounts_table_component_c26","accounts_table_component_c27","AccountsTableComponent_mat_toolbar_2_button_12_Template","_r197","column_r194","toggleColumnVisibility","visible","header","accounts_table_component_c28","AccountsTableComponent_mat_toolbar_2_button_13_Template","_r201","openPopUp","AccountsTableComponent_mat_toolbar_2_Template","_r203","_r186","ctx_r176","showColumnFilter","columns","showActionColumn","_c29","AccountsTableComponent_mat_progress_bar_3_Template","_c30","_c31","_c32","_c33","AccountsTableComponent_ng_container_7_mat_header_cell_1_Template","_r207","ctx_r206","masterToggle","ctx_r204","dataSource","filteredData","isMasterToggleChecked","isMasterToggleIndeterminate","_c34","AccountsTableComponent_ng_container_7_mat_cell_2_Template","_r210","row_r208","ctx_r211","selectRow","ctx_r205","AccountsTableComponent_ng_container_7_Template","_c35","_c36","_c37","AccountsTableComponent_ng_container_8_mat_header_cell_1_Template","column_r212","_c38","_c39","_c40","AccountsTableComponent_ng_container_8_mat_cell_2_ng_container_1_ng_container_1_Template","_c41","a0","a1","column","AccountsTableComponent_ng_container_8_mat_cell_2_ng_container_1_Template","row_r216","Mc","property","AccountsTableComponent_ng_container_8_mat_cell_2_ng_template_2_Template","displayFn","AccountsTableComponent_ng_container_8_mat_cell_2_Template","_r218","AccountsTableComponent_ng_container_8_Template","sticky","_c42","AccountsTableComponent_ng_container_9_mat_header_cell_1_Template","ctx_r226","actionColumn","_c43","_c44","AccountsTableComponent_ng_container_9_mat_cell_2_Template","_r230","entity_r228","delete","AccountsTableComponent_ng_container_9_Template","ctx_r181","AccountsTableComponent_mat_header_row_10_Template","_c45","AccountsTableComponent_mat_row_11_Template","row_r232","ctx_r183","_c46","accounts_table_component_AccountsTableComponent","AccountsTableComponent","store","dialog","snack","confirmService","entity","format","stringToDate","showToolbar","formRef","confirm","confirmed","mergeMap","_","open","duration","dispatch","ngxs_router_plugin","catchError","error","throwError","isNew","getNewEntity","disableClose","payload","afterClosed","res","concatMap","updateOrCreate","ngxs_store","snack_bar","src","loading$","maxSelectable","displayedColumns","sort","menu","esm2015_checkbox","progress_bar","s","account_detail_component_c0","account_detail_component_c1","account_detail_component_c2","AccountDetailComponent_mat_list_item_9_Template","entry_r234","account_detail_component_AccountDetailComponent","AccountDetailComponent","route","animationTrigger$","BehaviorSubject","sub","animation","animations_src","matModules","autocomplete_MatAutocompleteModule","grid_module_GridModule","GridModule","ngx_utils_src","breadcrumbs_src","forChild","path","redirectTo","pathMatch","component","depth","children","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"7-es2015.c0af094bd5dd1bd5dca2.js","sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\n// generated using https://transform.now.sh/json-to-ts-interface/\nexport interface ResponseObject {\n  results?: (RandomAccount)[] | null;\n  info: Info;\n}\n\nexport interface Info {\n  seed: string;\n  results: number;\n  page: number;\n  version: string;\n}\n\nexport interface RandomAccount {\n  gender: string;\n  name: Name;\n  location: Location;\n  email: string;\n  dob: Dob;\n  phone: string;\n  cell: string;\n  id: Id;\n  picture: Picture;\n  nat: string;\n}\n\nexport interface Name {\n  title: string;\n  first: string;\n  last: string;\n}\n\nexport interface Location {\n  street: string;\n  city: string;\n  state: string;\n  postcode: number;\n  coordinates: Coordinates;\n  timezone: Timezone;\n}\n\nexport interface Coordinates {\n  latitude: string;\n  longitude: string;\n}\n\nexport interface Timezone {\n  offset: string;\n  description: string;\n}\n\nexport interface Dob {\n  date: string;\n  age: number;\n}\n\nexport interface Id {\n  name: string;\n  value: string;\n}\n\nexport interface Picture {\n  large: string;\n  medium: string;\n  thumbnail: string;\n}\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n@Injectable()\nexport class RandomAccountService {\n  // public url = 'https://randomuser.me/api/?nat=us&results=100&exc=login,registered&seed=sumo';\n  public baseUrl = 'https://randomuser.me/api/';\n  params = new HttpParams()\n    .append('seed', 'sumo')\n    .append('nat', 'us')\n    .append('exc', 'login,registered');\n\n  constructor(private httpClient: HttpClient) {}\n\n  getAll(pageSize: number = 100) {\n    const params = this.params.append('results', '' + pageSize);\n    return this.httpClient\n      .get<ResponseObject>(this.baseUrl, { params })\n      .pipe(map((response: ResponseObject) => response.results));\n  }\n\n  getById(id: string) {\n    const params = this.params.append('id', id).append('results', '1');\n    return this.httpClient\n      .get<ResponseObject>(this.baseUrl, { params })\n      .pipe(map((response: ResponseObject) => response.results[0]));\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// @Injectable({\n//   providedIn: 'root'\n// })\nexport class RandomAccountService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n        // public url = 'https://randomuser.me/api/?nat=us&results=100&exc=login,registered&seed=sumo';\n        this.baseUrl = 'https://randomuser.me/api/';\n        this.params = new HttpParams()\n            .append('seed', 'sumo')\n            .append('nat', 'us')\n            .append('exc', 'login,registered');\n    }\n    getAll(pageSize = 100) {\n        const params = this.params.append('results', '' + pageSize);\n        return this.httpClient\n            .get(this.baseUrl, { params })\n            .pipe(map((response) => response.results));\n    }\n    getById(id) {\n        const params = this.params.append('id', id).append('results', '1');\n        return this.httpClient\n            .get(this.baseUrl, { params })\n            .pipe(map((response) => response.results[0]));\n    }\n}\nRandomAccountService.ngInjectableDef = i0.ɵɵdefineInjectable({ token: RandomAccountService, factory: function RandomAccountService_Factory(t) { return new (t || RandomAccountService)(i0.ɵɵinject(i1.HttpClient)); }, providedIn: null });\n/*@__PURE__*/ i0.ɵsetClassMetadata(RandomAccountService, [{\n        type: Injectable\n    }], function () { return [{ type: i1.HttpClient }]; }, null);\n","import * as tslib_1 from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatButtonToggleGroup } from '@angular/material/button-toggle';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { RandomAccountService } from '../../services/random-account.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/random-account.service\";\nimport * as i3 from \"../../../../../breadcrumbs/src/lib/breadcrumbs.component\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/toolbar\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/flex-layout/flex\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/button-toggle\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/material/paginator\";\nimport * as i13 from \"@angular/material/grid-list\";\nimport * as i14 from \"@angular/material/button\";\nimport * as i15 from \"@angular/material/list\";\nimport * as i16 from \"@angular/material/divider\";\nimport * as i17 from \"@angular/material/core\";\nimport * as i18 from \"../../../../../ngx-utils/src/lib/pipes/helper/group-by.pipe\";\nconst _c0 = [\"gridView\"];\nconst _c1 = [\"title\", \"Grid\", 3, \"crumbs\"];\nconst _c2 = [1, \"mat-elevation-z8\"];\nconst _c3 = [\"fxFlex\", \"\"];\nconst _c4 = [\"matInput\", \"\", 3, \"keyup\"];\nconst _c5 = [\"filter\", \"\"];\nconst _c6 = [2, \"margin-left\", \"16px\"];\nconst _c7 = [\"gridView\", \"matButtonToggleGroup\"];\nconst _c8 = [\"value\", \"list\"];\nconst _c9 = [\"value\", \"grid\", \"checked\", \"\"];\nconst _c10 = [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"];\nconst _c11 = [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\"];\nconst _c12 = [\"paginator\", \"\"];\nconst _c13 = [\"grid\", \"\"];\nconst _c14 = [\"list\", \"\"];\nfunction AccountsGridListComponent_ng_container_18_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n} }\nconst _c15 = [\"cols\", \"3\", \"rowHeight\", \"250px\", \"gutterSize\", \"10px\", 1, \"fix-height\"];\nconst _c16 = [4, \"ngFor\", \"ngForOf\"];\nconst _c17 = [3, \"click\"];\nconst _c18 = [\"mat-card-avatar\", \"\", 3, \"src\"];\nconst _c19 = [\"mat-button\", \"\"];\nfunction AccountsGridListComponent_ng_template_21_mat_grid_tile_1_Template(rf, ctx) { if (rf & 1) {\n    const _r161 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-grid-tile\");\n    i0.ɵɵelementStart(1, \"mat-card\", _c17);\n    i0.ɵɵstyling();\n    i0.ɵɵlistener(\"click\", function AccountsGridListComponent_ng_template_21_mat_grid_tile_1_Template_mat_card_click_1_listener($event) { i0.ɵɵrestoreView(_r161); const account_r159 = ctx.$implicit; const ctx_r160 = i0.ɵɵnextContext(2); return ctx_r160.onClick(account_r159); });\n    i0.ɵɵelementStart(2, \"mat-card-header\");\n    i0.ɵɵelement(3, \"img\", _c18);\n    i0.ɵɵelementStart(4, \"mat-card-title\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-card-subtitle\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-card-content\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelement(10, \"br\");\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"date\");\n    i0.ɵɵelement(13, \"br\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelement(15, \"br\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelement(17, \"br\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"mat-card-actions\");\n    i0.ɵɵelementStart(19, \"button\", _c19);\n    i0.ɵɵtext(20, \"LIKE\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", _c19);\n    i0.ɵɵtext(22, \"SHARE\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const account_r159 = ctx.$implicit;\n    const ctx_r158 = i0.ɵɵnextContext(2);\n    i0.ɵɵselect(1);\n    i0.ɵɵclassProp(\"active\", ctx_r158.selection.isSelected(account_r159));\n    i0.ɵɵstylingApply();\n    i0.ɵɵselect(3);\n    i0.ɵɵpropertyInterpolate(\"src\", account_r159.picture.thumbnail, i0.ɵɵsanitizeUrl);\n    i0.ɵɵselect(5);\n    i0.ɵɵtextInterpolate3(\"\", account_r159.name.title, \" \", account_r159.name.first, \" \", account_r159.name.last, \"\");\n    i0.ɵɵselect(7);\n    i0.ɵɵtextInterpolate1(\" \", account_r159.email, \"\");\n    i0.ɵɵselect(9);\n    i0.ɵɵtextInterpolate4(\" Address: \", account_r159.location.street, \", \", account_r159.location.city, \", \", account_r159.location.state, \" \", account_r159.location.zip, \"\");\n    i0.ɵɵselect(11);\n    i0.ɵɵtextInterpolate1(\" Date of Birth: \", i0.ɵɵpipeBind1(12, 14, account_r159.dob.date), \"\");\n    i0.ɵɵselect(14);\n    i0.ɵɵtextInterpolate1(\" email: \", account_r159.email, \"\");\n    i0.ɵɵselect(16);\n    i0.ɵɵtextInterpolate2(\" phone: \", account_r159.phone, \", cell: \", account_r159.cell, \"\");\n} }\nfunction AccountsGridListComponent_ng_template_21_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-list\", _c15);\n    i0.ɵɵtemplate(1, AccountsGridListComponent_ng_template_21_mat_grid_tile_1_Template, 23, 16, \"mat-grid-tile\", _c16);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r155 = i0.ɵɵnextContext();\n    i0.ɵɵselect(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 1, ctx_r155.renderData));\n} }\nconst _c20 = [1, \"fix-height\"];\nconst _c21 = [\"mat-subheader\", \"\"];\nconst _c22 = [3, \"active\", \"click\", 4, \"ngFor\", \"ngForOf\"];\nconst _c23 = [\"matListIcon\", \"\"];\nconst _c24 = [\"matLine\", \"\"];\nconst _c25 = [1, \"subline\"];\nconst _c26 = [3, \"inset\", 4, \"ngIf\"];\nconst _c27 = [3, \"inset\"];\nfunction AccountsGridListComponent_ng_template_23_ng_container_1_mat_list_item_3_mat_divider_11_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-divider\", _c27);\n} if (rf & 2) {\n    i0.ɵɵproperty(\"inset\", true);\n} }\nfunction AccountsGridListComponent_ng_template_23_ng_container_1_mat_list_item_3_Template(rf, ctx) { if (rf & 1) {\n    const _r169 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-list-item\", _c17);\n    i0.ɵɵstyling();\n    i0.ɵɵlistener(\"click\", function AccountsGridListComponent_ng_template_23_ng_container_1_mat_list_item_3_Template_mat_list_item_click_0_listener($event) { i0.ɵɵrestoreView(_r169); const account_r165 = ctx.$implicit; const ctx_r168 = i0.ɵɵnextContext(3); return ctx_r168.onClick(account_r165); });\n    i0.ɵɵelementStart(1, \"mat-icon\", _c23);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", _c18);\n    i0.ɵɵelementStart(4, \"h3\", _c24);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", _c24);\n    i0.ɵɵelementStart(7, \"span\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"span\", _c25);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, AccountsGridListComponent_ng_template_23_ng_container_1_mat_list_item_3_mat_divider_11_Template, 1, 1, \"mat-divider\", _c26);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const account_r165 = ctx.$implicit;\n    const last_r166 = ctx.last;\n    const ctx_r164 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassProp(\"active\", ctx_r164.selection.isSelected(account_r165));\n    i0.ɵɵstylingApply();\n    i0.ɵɵselect(2);\n    i0.ɵɵtextInterpolate(account_r165.gender == \"male\" ? \"person\" : \"face\");\n    i0.ɵɵselect(3);\n    i0.ɵɵpropertyInterpolate(\"src\", account_r165.picture.thumbnail, i0.ɵɵsanitizeUrl);\n    i0.ɵɵselect(5);\n    i0.ɵɵtextInterpolate2(\"\", account_r165.name.first, \" \", account_r165.name.last, \"\");\n    i0.ɵɵselect(8);\n    i0.ɵɵtextInterpolate1(\" \", account_r165.email, \" \");\n    i0.ɵɵselect(10);\n    i0.ɵɵtextInterpolate1(\"-- \", account_r165.phone, \" \");\n    i0.ɵɵselect(11);\n    i0.ɵɵproperty(\"ngIf\", !last_r166);\n} }\nfunction AccountsGridListComponent_ng_template_23_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"h3\", _c21);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, AccountsGridListComponent_ng_template_23_ng_container_1_mat_list_item_3_Template, 12, 8, \"mat-list-item\", _c22);\n    i0.ɵɵelement(4, \"mat-divider\");\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const accounts_r163 = ctx.$implicit;\n    i0.ɵɵselect(2);\n    i0.ɵɵtextInterpolate(accounts_r163.key);\n    i0.ɵɵselect(3);\n    i0.ɵɵproperty(\"ngForOf\", accounts_r163.value);\n} }\nfunction AccountsGridListComponent_ng_template_23_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list\", _c20);\n    i0.ɵɵtemplate(1, AccountsGridListComponent_ng_template_23_ng_container_1_Template, 5, 2, \"ng-container\", _c16);\n    i0.ɵɵpipe(2, \"groupBy\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r157 = i0.ɵɵnextContext();\n    i0.ɵɵselect(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(2, 1, i0.ɵɵpipeBind1(3, 4, ctx_r157.renderData), \"gender\"));\n} }\nconst _c28 = [6, 9, 12, 18];\nexport class AccountsGridListComponent {\n    constructor(router, accountService) {\n        this.router = router;\n        this.accountService = accountService;\n        this.crumbs = [\n            { name: 'Dashboard', link: '/dashboard' },\n            { name: 'Grid', link: '/dashboard/grid' },\n            { name: 'Grid List' },\n        ];\n        this.selection = new SelectionModel(false, []);\n    }\n    ngOnInit() {\n        this.accountService\n            .getAll()\n            .toPromise()\n            .then(accounts => {\n            this.accountDataSource = new MatTableDataSource(accounts);\n            this.accountDataSource.paginator = this.paginator;\n            this.renderData = this.accountDataSource.connect();\n        });\n    }\n    ngOnDestroy() { }\n    applyFilter(filterValue) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n        this.accountDataSource.filter = filterValue;\n    }\n    onClick(account) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.selection.toggle(account);\n            const accountP = yield this.accountService.getById(account.id.value).toPromise();\n            console.log(accountP);\n        });\n    }\n}\nAccountsGridListComponent.ngComponentDef = i0.ɵɵdefineComponent({ type: AccountsGridListComponent, selectors: [[\"ngx-accounts-grid-list\"]], factory: function AccountsGridListComponent_Factory(t) { return new (t || AccountsGridListComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.RandomAccountService)); }, viewQuery: function AccountsGridListComponent_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵstaticViewQuery(_c0, true);\n        i0.ɵɵstaticViewQuery(MatPaginator, true);\n    } if (rf & 2) {\n        var _t;\n        i0.ɵɵqueryRefresh((_t = i0.ɵɵloadQuery())) && (ctx.gridView = _t.first);\n        i0.ɵɵqueryRefresh((_t = i0.ɵɵloadQuery())) && (ctx.paginator = _t.first);\n    } }, consts: 25, vars: 7, template: function AccountsGridListComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"ngx-breadcrumbs\", _c1);\n        i0.ɵɵelementStart(1, \"mat-card\", _c2);\n        i0.ɵɵelementStart(2, \"mat-toolbar\");\n        i0.ɵɵelementStart(3, \"mat-form-field\", _c3);\n        i0.ɵɵelementStart(4, \"input\", _c4, _c5);\n        i0.ɵɵlistener(\"keyup\", function AccountsGridListComponent_Template_input_keyup_4_listener($event) { return ctx.applyFilter($event.target.value); });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-label\");\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(9, \" Filter \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-button-toggle-group\", _c6, _c7);\n        i0.ɵɵelementStart(12, \"mat-button-toggle\", _c8);\n        i0.ɵɵelementStart(13, \"mat-icon\");\n        i0.ɵɵtext(14, \"view_list\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-button-toggle\", _c9);\n        i0.ɵɵelementStart(16, \"mat-icon\");\n        i0.ɵɵtext(17, \"view_comfy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, AccountsGridListComponent_ng_container_18_Template, 1, 0, \"ng-container\", _c10);\n        i0.ɵɵelement(19, \"mat-paginator\", _c11, _c12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(21, AccountsGridListComponent_ng_template_21_Template, 3, 3, \"ng-template\", null, _c13, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(23, AccountsGridListComponent_ng_template_23_Template, 4, 6, \"ng-template\", null, _c14, i0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        const _r151 = i0.ɵɵreference(11);\n        const _r154 = i0.ɵɵreference(22);\n        const _r156 = i0.ɵɵreference(24);\n        i0.ɵɵproperty(\"crumbs\", ctx.crumbs);\n        i0.ɵɵselect(18);\n        i0.ɵɵproperty(\"ngIf\", _r151.value === \"grid\")(\"ngIfThen\", _r154)(\"ngIfElse\", _r156);\n        i0.ɵɵselect(19);\n        i0.ɵɵproperty(\"pageSize\", 6)(\"pageSizeOptions\", _c28)(\"showFirstLastButtons\", true);\n    } }, directives: [i3.BreadcrumbsComponent, i4.MatCard, i5.MatToolbar, i6.MatFormField, i7.DefaultFlexDirective, i8.MatInput, i6.MatLabel, i9.MatIcon, i10.MatButtonToggleGroup, i10.MatButtonToggle, i11.NgIf, i12.MatPaginator, i13.MatGridList, i11.NgForOf, i13.MatGridTile, i4.MatCardHeader, i4.MatCardAvatar, i4.MatCardTitle, i4.MatCardSubtitle, i4.MatCardContent, i4.MatCardActions, i14.MatButton, i15.MatList, i15.MatListSubheaderCssMatStyler, i16.MatDivider, i15.MatListItem, i15.MatListIconCssMatStyler, i17.MatLine], pipes: [i11.AsyncPipe, i11.DatePipe, i18.GroupByPipe], styles: [\"[_nghost-%COMP%]{display:block;padding:1.5%;position:relative}.fix-height[_ngcontent-%COMP%]{position:relative;top:0;max-height:52vh;margin:auto;padding:0;overflow:auto}mat-toolbar[_ngcontent-%COMP%]{padding:8px 24px 0}mat-form-field[_ngcontent-%COMP%]{font-size:16px}mat-grid-tile[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]{width:calc(100% - 70px);height:calc(100% - 70px);box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transition:transform .25s ease}mat-grid-tile[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]:hover{cursor:pointer;box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);transform:translateY(-1rem)}mat-grid-tile[_ngcontent-%COMP%]   mat-card.active[_ngcontent-%COMP%]{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}mat-grid-tile[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]   .mat-card-subtitle[_ngcontent-%COMP%], mat-grid-tile[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]   .mat-card-title[_ngcontent-%COMP%]{white-space:nowrap;width:30em;overflow:hidden;text-overflow:ellipsis}mat-grid-tile[_ngcontent-%COMP%]   mat-card.mat-bg-primary[_ngcontent-%COMP%]{background:#3f51b5!important;color:#fff!important}mat-grid-tile[_ngcontent-%COMP%]   mat-card.mat-bg-accent[_ngcontent-%COMP%]{background-color:#ffc107;color:#000}mat-grid-tile[_ngcontent-%COMP%]   mat-card.mat-bg-warn[_ngcontent-%COMP%]{background-color:#f44336;color:#fff}mat-list-item[_ngcontent-%COMP%]:hover{cursor:pointer;background:#f5f5f5}mat-list-item.active[_ngcontent-%COMP%]{background:#eaeaea}mat-list-item[_ngcontent-%COMP%]   .subline[_ngcontent-%COMP%]{color:#999}\"] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AccountsGridListComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-accounts-grid-list',\n                templateUrl: './accounts-grid-list.component.html',\n                styleUrls: ['./accounts-grid-list.component.scss'],\n            }]\n    }], function () { return [{ type: i1.Router }, { type: i2.RandomAccountService }]; }, { gridView: [{\n            type: ViewChild,\n            args: ['gridView', { static: true }]\n        }], paginator: [{\n            type: ViewChild,\n            args: [MatPaginator, { static: true }]\n        }] });\n","<ngx-breadcrumbs title=\"Grid\" [crumbs]=\"crumbs\"></ngx-breadcrumbs>\n\n<mat-card class=\"mat-elevation-z8\">\n  <mat-toolbar>\n    <!-- <div>Accounts | </div> -->\n    <mat-form-field fxFlex>\n      <input matInput #filter (keyup)=\"applyFilter($event.target.value)\" />\n      <mat-label>\n        <mat-icon>search</mat-icon>\n        Filter\n      </mat-label>\n    </mat-form-field>\n    <mat-button-toggle-group #gridView=\"matButtonToggleGroup\" style=\"margin-left: 16px\">\n      <mat-button-toggle value=\"list\"> <mat-icon>view_list</mat-icon> </mat-button-toggle>\n      <mat-button-toggle value=\"grid\" checked> <mat-icon>view_comfy</mat-icon> </mat-button-toggle>\n    </mat-button-toggle-group>\n  </mat-toolbar>\n\n  <ng-container *ngIf=\"gridView.value === 'grid'; then grid; else list\"> </ng-container>\n\n  <mat-paginator\n    #paginator\n    [pageSize]=\"6\"\n    [pageSizeOptions]=\"[6, 9, 12, 18]\"\n    [showFirstLastButtons]=\"true\"\n  ></mat-paginator>\n</mat-card>\n\n<ng-template #grid>\n  <mat-grid-list cols=\"3\" rowHeight=\"250px\" gutterSize=\"10px\" class=\"fix-height\">\n    <mat-grid-tile *ngFor=\"let account of (renderData | async)\">\n      <!-- <mat-card (click)=\"onClick(account)\" [class.active]=\"selection.isSelected(account)\"> -->\n      <!-- <mat-card-header> -->\n      <!-- <img mat-card-avatar src=\"https://source.unsplash.com/random/200x200\"> -->\n      <!-- <mat-card-title>{{ account.first_name }}</mat-card-title> -->\n      <!-- <mat-card-subtitle>{{ account.last_name }}</mat-card-subtitle> -->\n      <!-- </mat-card-header> -->\n      <!-- &lt;!&ndash;<img mat-card-image src=\"https://source.unsplash.com/random/800x600\">&ndash;&gt; -->\n      <!-- &lt;!&ndash;<mat-card-content>&ndash;&gt; -->\n      <!-- &lt;!&ndash;<p>Something pretty ... </p>&ndash;&gt; -->\n      <!-- &lt;!&ndash;</mat-card-content>&ndash;&gt; -->\n      <!-- </mat-card> -->\n      <mat-card (click)=\"onClick(account)\" [class.active]=\"selection.isSelected(account)\">\n        <mat-card-header>\n          <!-- <img mat-card-avatar src=\"https://source.unsplash.com/random/200x200\"> -->\n          <img mat-card-avatar src=\"{{ account.picture.thumbnail }}\" />\n          <mat-card-title>{{ account.name.title }} {{ account.name.first }} {{ account.name.last }}</mat-card-title>\n          <mat-card-subtitle> {{ account.email }}</mat-card-subtitle>\n        </mat-card-header>\n        <!-- <img mat-card-image src=\"{{account.picture.medium}}\"> -->\n        <mat-card-content>\n          Address: {{ account.location.street }}, {{ account.location.city }}, {{ account.location.state }}\n          {{ account.location.zip }}<br />\n          Date of Birth: {{ account.dob.date | date }}<br />\n          email: {{ account.email }}<br />\n          phone: {{ account.phone }}, cell: {{ account.cell }}<br />\n        </mat-card-content>\n        <mat-card-actions> <button mat-button>LIKE</button> <button mat-button>SHARE</button> </mat-card-actions>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</ng-template>\n\n<ng-template #list>\n  <mat-list class=\"fix-height\">\n    <ng-container *ngFor=\"let accounts of (renderData | async | groupBy: 'gender')\">\n      <h3 mat-subheader>{{ accounts.key }}</h3>\n      <mat-list-item\n        *ngFor=\"let account of accounts.value; let last = last\"\n        (click)=\"onClick(account)\"\n        [class.active]=\"selection.isSelected(account)\"\n      >\n        <mat-icon matListIcon>{{ account.gender == 'male' ? 'person' : 'face' }}</mat-icon>\n        <!-- <img mat-list-avatar src=\"https://source.unsplash.com/random/200x200\"> -->\n        <img mat-card-avatar src=\"{{ account.picture.thumbnail }}\" />\n        <h3 matLine>{{ account.name.first }} {{ account.name.last }}</h3>\n        <p matLine>\n          <span> {{ account.email }} </span><span class=\"subline\">-- {{ account.phone }} </span>\n        </p>\n        <mat-divider [inset]=\"true\" *ngIf=\"!last\"></mat-divider>\n      </mat-list-item>\n      <mat-divider></mat-divider>\n    </ng-container>\n  </mat-list>\n</ng-template>\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { MatButtonToggleGroup } from '@angular/material/button-toggle';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { SelectionModel } from '@angular/cdk/collections';\n\nimport { RandomAccount, RandomAccountService } from '../../services/random-account.service';\nimport { Crumb } from '@ngx-starter-kit/breadcrumbs';\n\n@Component({\n  selector: 'ngx-accounts-grid-list',\n  templateUrl: './accounts-grid-list.component.html',\n  styleUrls: ['./accounts-grid-list.component.scss'],\n})\nexport class AccountsGridListComponent implements OnInit, OnDestroy {\n  @ViewChild('gridView', { static: true }) gridView: MatButtonToggleGroup;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n\n  crumbs: ReadonlyArray<Crumb> = [\n    { name: 'Dashboard', link: '/dashboard' },\n    { name: 'Grid', link: '/dashboard/grid' },\n    { name: 'Grid List' },\n  ];\n\n  accountDataSource: MatTableDataSource<Partial<RandomAccount>>;\n  renderData: BehaviorSubject<Partial<RandomAccount>[]>;\n  selection = new SelectionModel<Partial<RandomAccount>>(false, []);\n\n  constructor(private router: Router, private accountService: RandomAccountService) {}\n\n  ngOnInit() {\n    this.accountService\n      .getAll()\n      .toPromise()\n      .then(accounts => {\n        this.accountDataSource = new MatTableDataSource<Partial<RandomAccount>>(accounts);\n        this.accountDataSource.paginator = this.paginator;\n        this.renderData = this.accountDataSource.connect();\n      });\n  }\n\n  ngOnDestroy() {}\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.accountDataSource.filter = filterValue;\n  }\n\n  async onClick(account: Partial<RandomAccount>) {\n    this.selection.toggle(account);\n    const accountP = await this.accountService.getById(account.id.value).toPromise();\n    console.log(accountP);\n  }\n}\n","import { Entity } from '@ngx-starter-kit/shared';\n\nexport class Account extends Entity {\n  public id = 0;\n  // tslint:disable-next-line:variable-name\n  public first_name?: string;\n  // tslint:disable-next-line:variable-name\n  public last_name?: string;\n  public gender?: Gender;\n  public dob?: Date;\n  public email?: string;\n  public phone?: string;\n  public company?: string;\n  public address?: Address;\n}\n\nexport class Address {\n  constructor(public street?: string, public city?: string, public state?: string, public zip?: string) {}\n}\n\nexport enum Gender {\n  male = 'make',\n  female = 'female',\n}\n","import { Entity } from '@ngx-starter-kit/shared';\nexport class Account extends Entity {\n    constructor() {\n        super(...arguments);\n        this.id = 0;\n    }\n}\nexport class Address {\n    constructor(street, city, state, zip) {\n        this.street = street;\n        this.city = city;\n        this.state = state;\n        this.zip = zip;\n    }\n}\nexport var Gender;\n(function (Gender) {\n    Gender[\"male\"] = \"make\";\n    Gender[\"female\"] = \"female\";\n})(Gender || (Gender = {}));\n","export const states = [\n  'Alabama',\n  'Alaska',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'Florida',\n  'Georgia',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Pennsylvania',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming',\n];\n","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getDaysInMonth from '../getDaysInMonth/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  var desiredMonth = date.getMonth() + amount;\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(date.getFullYear(), desiredMonth, 1);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(desiredMonth, Math.min(daysInMonth, date.getDate()));\n  return date;\n}","import toDate from '../toDate/index.js';\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * var result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, InjectionToken, Input, Output, TemplateRef, ViewChild, ViewEncapsulation, Directive, forwardRef, Host, NgZone, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisableRipple, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { Subscription, defer, fromEvent, merge, of, Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"panel\"];\nconst _c1 = [1, \"mat-autocomplete\"];\nconst _c2 = [\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"];\nconst _c3 = [\"panel\", \"\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", _c2, _c3);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r106 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r106.id)(\"ngClass\", ctx_r106._classList);\n} }\nconst _c4 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected.\n */\nclass MatAutocompleteSelectedEvent {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/**\n * \\@docs-private\n */\nclass MatAutocompleteBase {\n}\n/** @type {?} */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/**\n * Injection token to be used to override the default options for `mat-autocomplete`.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} defaults\n     */\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Whether the autocomplete panel should be visible, depending on option length.\n         */\n        this.showPanel = false;\n        this._isOpen = false;\n        /**\n         * Function that maps an option's control value to its display value in the trigger.\n         */\n        this.displayWith = null;\n        /**\n         * Event that is emitted whenever an option from the list is selected.\n         */\n        this.optionSelected = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event that is emitted when the autocomplete panel is closed.\n         */\n        this.closed = new EventEmitter();\n        this._classList = {};\n        /**\n         * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n         */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /**\n     * Whether the autocomplete panel is open.\n     * @return {?}\n     */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     * @return {?}\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     * @param {?} value\n     * @return {?}\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((/**\n             * @param {?} classList\n             * @param {?} className\n             * @return {?}\n             */\n            (classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }), (/** @type {?} */ ({})));\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     * @param {?} scrollTop\n     * @return {?}\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /**\n     * Returns the panel's scrollTop.\n     * @return {?}\n     */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /**\n     * Panel should hide itself when the option list is empty.\n     * @return {?}\n     */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits the `select` event.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitSelectEvent(option) {\n        /** @type {?} */\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /**\n     * Sets the autocomplete visibility classes on a classlist based on the panel is visible.\n     * @private\n     * @param {?} classList\n     * @return {?}\n     */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], factory: function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); }, contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostBindings: function MatAutocomplete_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵelementHostAttrs(_c1);\n    } }, inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, consts: 1, vars: 0, template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{ selector: 'mat-autocomplete',\n                template: \"<ng-template><div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel><ng-content></ng-content></div></ng-template>\",\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}@media (-ms-high-contrast:active){.mat-autocomplete-panel{outline:solid 1px}}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ]\n            }]\n    }], function () { return [{ type: ChangeDetectorRef }, { type: ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { constructor: [], _changeDetectorRef: [], _elementRef: [], showPanel: [], _isOpen: [], displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], _classList: [], id: [], _autoActiveFirstOption: [], isOpen: [], autoActiveFirstOption: [{\n            type: Input\n        }], autoActiveFirstOption: [], classList: [{\n            type: Input,\n            args: ['class']\n        }], ngAfterContentInit: [], _keyManager: [], _setScrollTop: [], _getScrollTop: [], _setVisibility: [], _emitSelectEvent: [], _setVisibilityClasses: [], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel', { static: false }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelWidth: [{\n            type: Input\n        }] });\n/** @nocollapse */\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], factory: function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); }, exportAs: [\"matAutocompleteOrigin\"] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ElementRef }]; }, { constructor: [], elementRef: [] });\n/** @nocollapse */\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The height of each autocomplete option.\n * @type {?}\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @type {?}\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatAutocompleteTrigger)),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    /**\n     * @param {?} _element\n     * @param {?} _overlay\n     * @param {?} _viewContainerRef\n     * @param {?} _zone\n     * @param {?} _changeDetectorRef\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _formField\n     * @param {?} _document\n     * @param {?=} _viewportRuler\n     */\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /**\n         * Whether or not the label state is being overridden.\n         */\n        this._manuallyFloatingLabel = false;\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /**\n         * Stream of keyboard events that can close the panel.\n         */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = (/**\n         * @return {?}\n         */\n        () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        });\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when autocomplete has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * \\@docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /**\n         * Stream of autocomplete option selections.\n         */\n        this.optionSelections = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelections)));\n        }))));\n        if (typeof window !== 'undefined') {\n            _zone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                window.addEventListener('blur', this._windowBlurHandler);\n            }));\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     * @return {?}\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /**\n     * Whether or not the autocomplete panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /**\n     * Opens the autocomplete suggestion panel.\n     * @return {?}\n     */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /**\n     * Closes the autocomplete suggestion panel.\n     * @return {?}\n     */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            (/** @type {?} */ (this._overlayRef)).updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     * @return {?}\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter((/**\n         * @return {?}\n         */\n        () => this._overlayAttached))), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter((/**\n             * @return {?}\n             */\n            () => this._overlayAttached))) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /**\n     * The currently active option, coerced to MatOption type.\n     * @return {?}\n     */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /**\n     * Stream of clicks outside of the autocomplete panel.\n     * @private\n     * @return {?}\n     */\n    _getOutsideClickStream() {\n        return merge((/** @type {?} */ (fromEvent(this._document, 'click'))), (/** @type {?} */ (fromEvent(this._document, 'touchend'))))\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const clickTarget = (/** @type {?} */ (event.target));\n            /** @type {?} */\n            const formField = this._formField ?\n                this._formField._elementRef.nativeElement : null;\n            return this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        })));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        Promise.resolve(null).then((/**\n         * @return {?}\n         */\n        () => this._setTriggerValue(value)));\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            /** @type {?} */\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            /** @type {?} */\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _handleInput(event) {\n        /** @type {?} */\n        let target = (/** @type {?} */ (event.target));\n        /** @type {?} */\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @private\n     * @param {?=} shouldAnimate Whether the label should be animated when it is floated.\n     * @return {?}\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /**\n     * If the label has been manually elevated, return it to its normal state.\n     * @private\n     * @return {?}\n     */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     * @private\n     * @return {?}\n     */\n    _scrollToOption() {\n        /** @type {?} */\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        /** @type {?} */\n        const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n        this.autocomplete._setScrollTop(newScrollPosition);\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     * @private\n     * @return {?}\n     */\n    _subscribeToClosingActions() {\n        /** @type {?} */\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        /** @type {?} */\n        const optionChanges = this.autocomplete.options.changes.pipe(tap((/**\n         * @return {?}\n         */\n        () => this._positionStrategy.reapplyLastPosition())), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                (/** @type {?} */ (this._overlayRef)).updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this._setValueAndClose(event)));\n    }\n    /**\n     * Destroys the autocomplete suggestion panel.\n     * @private\n     * @return {?}\n     */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setTriggerValue(value) {\n        /** @type {?} */\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        /** @type {?} */\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     * @private\n     * @param {?} skip\n     * @return {?}\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        /** @type {?} */\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }));\n            if (this._viewportRuler) {\n                this._viewportSubscription = this._viewportRuler.change().subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                }));\n            }\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        /** @type {?} */\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /**\n     * Sets the positions on a position strategy based on the directive's input state.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _setStrategyPositions(positionStrategy) {\n        /** @type {?} */\n        const belowPosition = {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        };\n        /** @type {?} */\n        const abovePosition = {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            panelClass: 'mat-autocomplete-panel-above'\n        };\n        /** @type {?} */\n        let positions;\n        if (this.position === 'above') {\n            positions = [abovePosition];\n        }\n        else if (this.position === 'below') {\n            positions = [belowPosition];\n        }\n        else {\n            positions = [belowPosition, abovePosition];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /**\n     * Returns the width of the input element, so the panel width can match it.\n     * @private\n     * @return {?}\n     */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     * @private\n     * @return {?}\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /**\n     * Determines whether the panel can be opened.\n     * @private\n     * @return {?}\n     */\n    _canOpen() {\n        /** @type {?} */\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\nMatAutocompleteTrigger.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], factory: function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MatFormField, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ViewportRuler)); }, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵallocHostVars(7);\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler($event) { return ctx._handleFocus(); });\n        ɵngcc0.ɵɵlistener(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler($event) { return ctx._onTouched(); });\n        ɵngcc0.ɵɵlistener(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); });\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature()] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ElementRef }, { type: Overlay }, { type: ViewContainerRef }, { type: NgZone }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: Directionality, decorators: [{\n                type: Optional\n            }] }, { type: MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ViewportRuler }]; }, { constructor: [], _element: [], _overlay: [], _viewContainerRef: [], _zone: [], _changeDetectorRef: [], _dir: [], _formField: [], _document: [], _viewportRuler: [], _componentDestroyed: [], _autocompleteDisabled: [], _manuallyFloatingLabel: [], _viewportSubscription: [], _canOpenOnNextFocus: [], _closeKeyEventStream: [], _windowBlurHandler: [], _onChange: [], _onTouched: [], position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], _overlayAttached: [], optionSelections: [], _scrollStrategy: [], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocompleteDisabled: [], ngOnChanges: [], ngOnDestroy: [], panelOpen: [], openPanel: [], closePanel: [], updatePosition: [], panelClosingActions: [], activeOption: [], _getOutsideClickStream: [], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], _handleKeydown: [], _handleInput: [], _previousValue: [], _handleFocus: [], _floatLabel: [], _resetLabel: [], _scrollToOption: [], _subscribeToClosingActions: [], _destroyPanel: [], _overlayRef: [], _setTriggerValue: [], _setValueAndClose: [], _clearPreviousSelectedOption: [], _attachOverlay: [], _portal: [], _closingActionsSubscription: [], _getOverlayConfig: [], _getOverlayPosition: [], _positionStrategy: [], _setStrategyPositions: [], _getConnectedElement: [], _getPanelWidth: [], _getHostWidth: [], _resetActiveItem: [], _canOpen: [], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] });\n/** @nocollapse */\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n        MatOptionModule,\n        MatCommonModule] });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [MatAutocomplete,\n        MatOptionModule,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin,\n        MatCommonModule]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MatAutocompleteSelectedEvent, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocomplete, MatAutocompleteModule, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, getMatAutocompleteMissingPanelError, AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocompleteTrigger, MatAutocompleteOrigin };\n\n//# sourceMappingURL=autocomplete.js.map","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { Gender } from '../../models/account.model';\nimport { states } from './states';\nimport { EntityFormComponent } from '@ngx-starter-kit/shared';\nimport { subYears } from 'date-fns/esm';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/cdk/drag-drop\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/datepicker\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"@angular/material/autocomplete\";\nimport * as i11 from \"@angular/material/button\";\nimport * as i12 from \"@angular/material/core\";\nconst _c0 = [\"mat-dialog-title\", \"\", \"cdkDrag\", \"\", \"cdkDragHandle\", \"\", \"cdkDragRootElement\", \".cdk-overlay-pane\", 2, \"cursor\", \"move\"];\nconst _c1 = [3, \"formGroup\", \"ngSubmit\"];\nconst _c2 = [\"fxLayout\", \"column\", \"fxLayout.gt-sm\", \"row\", \"fxLayoutGap.gt-sm\", \"24px\"];\nconst _c3 = [\"fxFlex\", \"\"];\nconst _c4 = [\"matInput\", \"\", \"type\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\", \"required\", \"\"];\nconst _c5 = [\"matInput\", \"\", \"name\", \"company\", \"formControlName\", \"company\", \"placeholder\", \"Company / Organization\"];\nconst _c6 = [\"matInput\", \"\", \"name\", \"first_name\", \"formControlName\", \"first_name\", \"placeholder\", \"Fisrt Name\", \"required\", \"\"];\nconst _c7 = [\"matInput\", \"\", \"name\", \"last_name\", \"formControlName\", \"last_name\", \"placeholder\", \"Last Name\", \"required\", \"\"];\nconst _c8 = [\"matInput\", \"\", \"name\", \"dob\", \"formControlName\", \"dob\", \"placeholder\", \"Date of Birth\", \"required\", \"\", 3, \"matDatepicker\", \"min\", \"max\"];\nconst _c9 = [\"matSuffix\", \"\", 3, \"for\"];\nconst _c10 = [\"picker\", \"\"];\nconst _c11 = [\"name\", \"gender\", \"formControlName\", \"gender\", \"placeholder\", \"Gender\"];\nconst _c12 = [3, \"value\", 4, \"ngFor\", \"ngForOf\"];\nconst _c13 = [\"matInput\", \"\", \"type\", \"tel\", \"name\", \"phone\", \"formControlName\", \"phone\", \"placeholder\", \"Telephone\", \"required\", \"\"];\nconst _c14 = [\"fxLayout\", \"column\", \"fxLayout.gt-sm\", \"row\", \"fxLayoutGap.gt-sm\", \"24px\", \"formGroupName\", \"address\"];\nconst _c15 = [\"matInput\", \"\", \"name\", \"street\", \"formControlName\", \"street\", \"placeholder\", \"Street\", \"required\", \"\"];\nconst _c16 = [\"matInput\", \"\", \"name\", \"city\", \"formControlName\", \"city\", \"placeholder\", \"City\", \"required\", \"\"];\nconst _c17 = [\"matInput\", \"\", \"name\", \"state\", \"formControlName\", \"state\", \"placeholder\", \"State\", \"aria-label\", \"State\", 3, \"matAutocomplete\"];\nconst _c18 = [\"auto\", \"matAutocomplete\"];\nconst _c19 = [\"matInput\", \"\", \"name\", \"zip\", \"formControlName\", \"zip\", \"placeholder\", \"Zip / Postal Code\", \"required\", \"\"];\nconst _c20 = [\"fxLayout\", \"row\", \"fxLayoutAlign\", \"space-between center\"];\nconst _c21 = [\"mat-button\", \"\", \"color\", \"warn\", \"type\", \"button\", 3, \"mat-dialog-close\"];\nconst _c22 = [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"];\nconst _c23 = [3, \"value\"];\nfunction AccountEditComponent_mat_option_22_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", _c23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const gender_r174 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", gender_r174);\n    i0.ɵɵselect(1);\n    i0.ɵɵtextInterpolate1(\" \", gender_r174, \" \");\n} }\nfunction AccountEditComponent_mat_option_35_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", _c23);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const state_r175 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", state_r175);\n    i0.ɵɵselect(1);\n    i0.ɵɵtextInterpolate1(\" \", state_r175, \" \");\n} }\nexport class AccountEditComponent extends EntityFormComponent {\n    constructor(data, dialogRef, fb) {\n        super(data, dialogRef);\n        this.data = data;\n        this.dialogRef = dialogRef;\n        this.fb = fb;\n        this.genderOptions = Object.keys(Gender);\n        this.states = states;\n        this.maxDate = new Date();\n        this.minDate = subYears(this.maxDate, 100);\n    }\n    /* Optional */\n    // tslint:disable-next-line\n    ngOnInit() {\n        super.ngOnInit();\n        this.filteredStates = this.entityForm.get('address.state').valueChanges.pipe(startWith(''), map(state => (state ? this.filterStates(state) : this.states.slice())));\n    }\n    filterStates(name) {\n        return this.states.filter(state => state.toLowerCase().indexOf(name.toLowerCase()) === 0);\n    }\n    buildForm(item) {\n        // this.entityForm = this.fb.group(item);\n        this.entityForm = this.fb.group({\n            first_name: [item.first_name || '', Validators.required],\n            last_name: [item.last_name || '', Validators.required],\n            gender: [item.gender || '', Validators.required],\n            dob: [item.dob, Validators.required],\n            email: [item.email || '', [Validators.required, Validators.email]],\n            phone: [item.phone || '', [Validators.required, Validators.minLength(11)]],\n            company: [item.company || '', Validators.required],\n            address: this.fb.group({\n                street: [item.address.street || '', Validators.required],\n                city: [item.address.city || '', Validators.required],\n                state: [item.address.state || '', Validators.required],\n                zip: [item.address.zip || '', Validators.required],\n            }),\n        }, { updateOn: 'blur' });\n    }\n}\nAccountEditComponent.ngComponentDef = i0.ɵɵdefineComponent({ type: AccountEditComponent, selectors: [[\"ngx-account-edit\"]], factory: function AccountEditComponent_Factory(t) { return new (t || AccountEditComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.FormBuilder)); }, features: [i0.ɵɵInheritDefinitionFeature], consts: 44, vars: 13, template: function AccountEditComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", _c0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", _c1);\n        i0.ɵɵlistener(\"ngSubmit\", function AccountEditComponent_Template_form_ngSubmit_2_listener($event) { return ctx.submit(); });\n        i0.ɵɵelementStart(3, \"mat-dialog-content\");\n        i0.ɵɵelementStart(4, \"div\", _c2);\n        i0.ɵɵelementStart(5, \"mat-form-field\", _c3);\n        i0.ɵɵelement(6, \"input\", _c4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-form-field\", _c3);\n        i0.ɵɵelement(8, \"input\", _c5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", _c2);\n        i0.ɵɵelementStart(10, \"mat-form-field\", _c3);\n        i0.ɵɵelement(11, \"input\", _c6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\", _c3);\n        i0.ɵɵelement(13, \"input\", _c7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", _c2);\n        i0.ɵɵelementStart(15, \"mat-form-field\", _c3);\n        i0.ɵɵelement(16, \"input\", _c8);\n        i0.ɵɵelement(17, \"mat-datepicker-toggle\", _c9);\n        i0.ɵɵelement(18, \"mat-datepicker\", null, _c10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-form-field\", _c3);\n        i0.ɵɵelementStart(21, \"mat-select\", _c11);\n        i0.ɵɵtemplate(22, AccountEditComponent_mat_option_22_Template, 2, 2, \"mat-option\", _c12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"mat-form-field\", _c3);\n        i0.ɵɵelement(24, \"input\", _c13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", _c14);\n        i0.ɵɵelementStart(26, \"mat-form-field\", _c3);\n        i0.ɵɵelement(27, \"input\", _c15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", _c14);\n        i0.ɵɵelementStart(29, \"mat-form-field\", _c3);\n        i0.ɵɵelement(30, \"input\", _c16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"mat-form-field\", _c3);\n        i0.ɵɵelement(32, \"input\", _c17);\n        i0.ɵɵelementStart(33, \"mat-autocomplete\", null, _c18);\n        i0.ɵɵtemplate(35, AccountEditComponent_mat_option_35_Template, 2, 2, \"mat-option\", _c12);\n        i0.ɵɵpipe(36, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-form-field\", _c3);\n        i0.ɵɵelement(38, \"input\", _c19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"mat-dialog-actions\", _c20);\n        i0.ɵɵelementStart(40, \"button\", _c21);\n        i0.ɵɵtext(41, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"button\", _c22);\n        i0.ɵɵtext(43, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r170 = i0.ɵɵreference(19);\n        const _r172 = i0.ɵɵreference(34);\n        i0.ɵɵselect(1);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵselect(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.entityForm);\n        i0.ɵɵselect(16);\n        i0.ɵɵproperty(\"matDatepicker\", _r170)(\"min\", ctx.minDate)(\"max\", ctx.maxDate);\n        i0.ɵɵselect(17);\n        i0.ɵɵproperty(\"for\", _r170);\n        i0.ɵɵselect(22);\n        i0.ɵɵproperty(\"ngForOf\", ctx.genderOptions);\n        i0.ɵɵselect(32);\n        i0.ɵɵproperty(\"matAutocomplete\", _r172);\n        i0.ɵɵselect(35);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(36, 11, ctx.filteredStates));\n        i0.ɵɵselect(40);\n        i0.ɵɵproperty(\"mat-dialog-close\", false);\n        i0.ɵɵselect(42);\n        i0.ɵɵproperty(\"disabled\", ctx.entityForm.invalid);\n    } }, directives: [i1.MatDialogTitle, i3.CdkDrag, i3.CdkDragHandle, i2.ɵangular_packages_forms_forms_z, i2.NgControlStatusGroup, i2.FormGroupDirective, i1.MatDialogContent, i4.DefaultLayoutDirective, i4.DefaultLayoutGapDirective, i5.MatFormField, i4.DefaultFlexDirective, i6.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i7.MatDatepickerInput, i7.MatDatepickerToggle, i5.MatSuffix, i7.MatDatepicker, i8.MatSelect, i9.NgForOf, i2.FormGroupName, i10.MatAutocompleteTrigger, i10.MatAutocomplete, i1.MatDialogActions, i4.DefaultLayoutAlignDirective, i11.MatButton, i1.MatDialogClose, i12.MatOption], pipes: [i9.AsyncPipe], styles: [\"\"] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AccountEditComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-account-edit',\n                templateUrl: './account-edit.component.html',\n                styleUrls: ['./account-edit.component.scss'],\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_DATA]\n            }] }, { type: i1.MatDialogRef }, { type: i2.FormBuilder }]; }, null);\n","<h1 mat-dialog-title cdkDrag cdkDragHandle cdkDragRootElement=\".cdk-overlay-pane\" style=\"cursor: move\">{{ title }}</h1>\n\n<form [formGroup]=\"entityForm\" (ngSubmit)=\"submit()\">\n  <mat-dialog-content>\n    <div fxLayout=\"column\" fxLayout.gt-sm=\"row\" fxLayoutGap.gt-sm=\"24px\">\n      <mat-form-field fxFlex>\n        <input matInput type=\"email\" name=\"email\" formControlName=\"email\" placeholder=\"Email\" required />\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <input matInput name=\"company\" formControlName=\"company\" placeholder=\"Company / Organization\" />\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"column\" fxLayout.gt-sm=\"row\" fxLayoutGap.gt-sm=\"24px\">\n      <mat-form-field fxFlex>\n        <input matInput name=\"first_name\" formControlName=\"first_name\" placeholder=\"Fisrt Name\" required />\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <input matInput name=\"last_name\" formControlName=\"last_name\" placeholder=\"Last Name\" required />\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"column\" fxLayout.gt-sm=\"row\" fxLayoutGap.gt-sm=\"24px\">\n      <mat-form-field fxFlex>\n        <input\n          matInput\n          name=\"dob\"\n          formControlName=\"dob\"\n          [matDatepicker]=\"picker\"\n          placeholder=\"Date of Birth\"\n          [min]=\"minDate\"\n          [max]=\"maxDate\"\n          required\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <mat-select name=\"gender\" formControlName=\"gender\" placeholder=\"Gender\">\n          <mat-option *ngFor=\"let gender of genderOptions\" [value]=\"gender\"> {{ gender }} </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <input matInput type=\"tel\" name=\"phone\" formControlName=\"phone\" placeholder=\"Telephone\" required />\n      </mat-form-field>\n    </div>\n\n    <div fxLayout=\"column\" fxLayout.gt-sm=\"row\" fxLayoutGap.gt-sm=\"24px\" formGroupName=\"address\">\n      <mat-form-field fxFlex>\n        <input matInput name=\"street\" formControlName=\"street\" placeholder=\"Street\" required />\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"column\" fxLayout.gt-sm=\"row\" fxLayoutGap.gt-sm=\"24px\" formGroupName=\"address\">\n      <mat-form-field fxFlex>\n        <input matInput name=\"city\" formControlName=\"city\" placeholder=\"City\" required />\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <input\n          matInput\n          name=\"state\"\n          formControlName=\"state\"\n          placeholder=\"State\"\n          aria-label=\"State\"\n          [matAutocomplete]=\"auto\"\n        />\n        <mat-autocomplete #auto=\"matAutocomplete\">\n          <mat-option *ngFor=\"let state of (filteredStates | async)\" [value]=\"state\"> {{ state }} </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n      <mat-form-field fxFlex>\n        <input matInput name=\"zip\" formControlName=\"zip\" placeholder=\"Zip / Postal Code\" required />\n      </mat-form-field>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <button mat-button color=\"warn\" type=\"button\" [mat-dialog-close]=\"false\">Cancel</button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"entityForm.invalid\">Save</button>\n  </mat-dialog-actions>\n</form>\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\n\nimport { Account, Gender } from '../../models/account.model';\nimport { states } from './states';\nimport { Observable } from 'rxjs';\nimport { EntityFormComponent } from '@ngx-starter-kit/shared';\nimport { subYears } from 'date-fns/esm';\n\n@Component({\n  selector: 'ngx-account-edit',\n  templateUrl: './account-edit.component.html',\n  styleUrls: ['./account-edit.component.scss'],\n})\nexport class AccountEditComponent extends EntityFormComponent<Account> {\n  readonly genderOptions = Object.keys(Gender);\n  readonly states: string[] = states;\n  filteredStates: Observable<string[]>;\n\n  readonly maxDate = new Date();\n  readonly minDate = subYears(this.maxDate, 100);\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { title: string; payload: Account },\n    public dialogRef: MatDialogRef<AccountEditComponent>,\n    private fb: FormBuilder,\n  ) {\n    super(data, dialogRef);\n  }\n\n  /* Optional */\n  // tslint:disable-next-line\n  ngOnInit() {\n    super.ngOnInit();\n    this.filteredStates = this.entityForm.get('address.state').valueChanges.pipe(\n      startWith(''),\n      map(state => (state ? this.filterStates(state) : this.states.slice())),\n    );\n  }\n\n  private filterStates(name: string) {\n    return this.states.filter(state => state.toLowerCase().indexOf(name.toLowerCase()) === 0);\n  }\n\n  buildForm(item: Account) {\n    // this.entityForm = this.fb.group(item);\n    this.entityForm = this.fb.group(\n      {\n        first_name: [item.first_name || '', Validators.required],\n        last_name: [item.last_name || '', Validators.required],\n        gender: [item.gender || '', Validators.required],\n        dob: [item.dob, Validators.required],\n        email: [item.email || '', [Validators.required, Validators.email]],\n        phone: [item.phone || '', [Validators.required, Validators.minLength(11)]],\n        company: [item.company || '', Validators.required],\n        address: this.fb.group({\n          street: [item.address.street || '', Validators.required],\n          city: [item.address.city || '', Validators.required],\n          state: [item.address.state || '', Validators.required],\n          zip: [item.address.zip || '', Validators.required],\n        }),\n      },\n      { updateOn: 'blur' },\n    );\n  }\n}\n","import toInteger from '../_lib/toInteger/index.js';\nimport addYears from '../addYears/index.js';\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * var result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * var result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EntityService } from '@ngx-starter-kit/shared';\nimport { Account } from '../models/account.model';\nimport { environment } from '@env/environment';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n@Injectable()\nexport class AccountService extends EntityService<Account> {\n  // Optionally overwrite baseUrl\n  public baseUrl = environment.API_BASE_URL;\n\n  readonly entityPath = 'accounts';\n\n  constructor(httpClient: HttpClient) {\n    super(httpClient);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EntityService } from '@ngx-starter-kit/shared';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// @Injectable({\n//   providedIn: 'root'\n// })\nexport class AccountService extends EntityService {\n    constructor(httpClient) {\n        super(httpClient);\n        // Optionally overwrite baseUrl\n        this.baseUrl = environment.API_BASE_URL;\n        this.entityPath = 'accounts';\n    }\n}\nAccountService.ngInjectableDef = i0.ɵɵdefineInjectable({ token: AccountService, factory: function AccountService_Factory(t) { return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient)); }, providedIn: null });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AccountService, [{\n        type: Injectable\n    }], function () { return [{ type: i1.HttpClient }]; }, null);\n","import { Component } from '@angular/core';\nimport { Account, Address } from '../../models/account.model';\nimport { AccountService } from '../../services/account.service';\nimport { EntitiesComponent, EntityColumnDef } from '@ngx-starter-kit/shared';\nimport { AppConfirmService } from '@ngx-starter-kit/app-confirm';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { catchError, tap, concatMap, filter, mergeMap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { format } from 'date-fns/esm';\nimport { AccountEditComponent } from '../../components/account-edit/account-edit.component';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Store } from '@ngxs/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/account.service\";\nimport * as i2 from \"@ngxs/store\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@ngx-starter-kit/app-confirm\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/table\";\nimport * as i10 from \"@angular/material/sort\";\nimport * as i11 from \"@angular/material/paginator\";\nimport * as i12 from \"@angular/router\";\nimport * as i13 from \"@angular/material/toolbar\";\nimport * as i14 from \"@angular/material/form-field\";\nimport * as i15 from \"@angular/material/input\";\nimport * as i16 from \"@angular/material/icon\";\nimport * as i17 from \"@angular/material/menu\";\nimport * as i18 from \"@angular/material/button\";\nimport * as i19 from \"@angular/material/checkbox\";\nimport * as i20 from \"@angular/material/progress-bar\";\nconst _c0 = [\"fxLayout\", \"column\"];\nconst _c1 = [1, \"mat-elevation-z8\"];\nconst _c2 = [4, \"ngIf\"];\nconst _c3 = [\"mode\", \"indeterminate\", 4, \"ngIf\"];\nconst _c4 = [\"matSort\", \"\", 3, \"dataSource\"];\nconst _c5 = [\"table\", \"\"];\nconst _c6 = [\"matColumnDef\", \"select\", 4, \"ngIf\"];\nconst _c7 = [3, \"matColumnDef\", \"sticky\", \"stickyEnd\", 4, \"ngFor\", \"ngForOf\"];\nconst _c8 = [\"sticky\", \"\", 3, \"matColumnDef\", 4, \"ngIf\"];\nconst _c9 = [4, \"matHeaderRowDef\", \"matHeaderRowDefSticky\"];\nconst _c10 = [\"class\", \"row\", 3, \"selected\", 4, \"matRowDef\", \"matRowDefColumns\"];\nconst _c11 = [3, \"pageSize\", \"pageSizeOptions\", \"showFirstLastButtons\"];\nconst _c12 = [\"paginator\", \"\"];\nconst _c13 = [\"o\", \"outlet\"];\nconst _c14 = [\"fxFlex\", \"\"];\nconst _c15 = [\"matInput\", \"\", 3, \"keyup\"];\nconst _c16 = [\"filter\", \"\"];\nconst _c17 = [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"];\nconst _c18 = [\"mat-icon-button\", \"\", \"style\", \"margin-left: 16px\", \"type\", \"button\", 3, \"matMenuTriggerFor\", 4, \"ngIf\"];\nconst _c19 = [\"yPosition\", \"below\", \"xPosition\", \"before\"];\nconst _c20 = [\"columnFilter\", \"matMenu\"];\nconst _c21 = [\"class\", \"checkbox-item mat-menu-item\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"];\nconst _c22 = [\"mat-mini-fab\", \"\", \"color\", \"primary\", \"style\", \"margin-left: 16px\", \"matTooltip\", \"add\", 3, \"click\", 4, \"ngIf\"];\nconst _c23 = [\"mat-button\", \"\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"];\nfunction AccountsTableComponent_mat_toolbar_2_button_8_Template(rf, ctx) { if (rf & 1) {\n    const _r193 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", _c23);\n    i0.ɵɵlistener(\"click\", function AccountsTableComponent_mat_toolbar_2_button_8_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r193); i0.ɵɵnextContext(); const _r186 = i0.ɵɵreference(3); return _r186.value = \"\"; });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} }\nconst _c24 = [\"mat-icon-button\", \"\", \"type\", \"button\", 2, \"margin-left\", \"16px\", 3, \"matMenuTriggerFor\"];\nfunction AccountsTableComponent_mat_toolbar_2_button_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", _c24);\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"filter_list\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r189 = i0.ɵɵreference(11);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r189);\n} }\nconst _c25 = [1, \"checkbox-item\", \"mat-menu-item\", 3, \"click\"];\nconst _c26 = [1, \"checkbox\", 3, \"checked\", \"change\", \"click\"];\nconst _c27 = [\"checkbox\", \"\"];\nfunction AccountsTableComponent_mat_toolbar_2_button_12_Template(rf, ctx) { if (rf & 1) {\n    const _r197 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", _c25);\n    i0.ɵɵlistener(\"click\", function AccountsTableComponent_mat_toolbar_2_button_12_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r197); const column_r194 = ctx.$implicit; const ctx_r196 = i0.ɵɵnextContext(2); return ctx_r196.toggleColumnVisibility(column_r194, $event); });\n    i0.ɵɵelementStart(1, \"mat-checkbox\", _c26, _c27);\n    i0.ɵɵlistener(\"change\", function AccountsTableComponent_mat_toolbar_2_button_12_Template_mat_checkbox_change_1_listener($event) { const column_r194 = ctx.$implicit; return column_r194.visible = !column_r194.visible; });\n    i0.ɵɵlistener(\"click\", function AccountsTableComponent_mat_toolbar_2_button_12_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r197); return $event.stopPropagation(); });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r194 = ctx.$implicit;\n    i0.ɵɵselect(1);\n    i0.ɵɵproperty(\"checked\", column_r194.visible);\n    i0.ɵɵselect(3);\n    i0.ɵɵtextInterpolate1(\" \", column_r194.header, \" \");\n} }\nconst _c28 = [\"mat-mini-fab\", \"\", \"color\", \"primary\", \"matTooltip\", \"add\", 2, \"margin-left\", \"16px\", 3, \"click\"];\nfunction AccountsTableComponent_mat_toolbar_2_button_13_Template(rf, ctx) { if (rf & 1) {\n    const _r201 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", _c28);\n    i0.ɵɵlistener(\"click\", function AccountsTableComponent_mat_toolbar_2_button_13_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r201); const ctx_r200 = i0.ɵɵnextContext(2); return ctx_r200.openPopUp(); });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"add\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} }\nfunction AccountsTableComponent_mat_toolbar_2_Template(rf, ctx) { if (rf & 1) {\n    const _r203 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-toolbar\");\n    i0.ɵɵelementStart(1, \"mat-form-field\", _c14);\n    i0.ɵɵelementStart(2, \"input\", _c15, _c16);\n    i0.ɵɵlistener(\"keyup\", function AccountsTableComponent_mat_toolbar_2_Template_input_keyup_2_listener($event) { i0.ɵɵrestoreView(_r203); const ctx_r202 = i0.ɵɵnextContext(); return ctx_r202.applyFilter($event.target.value); });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-label\");\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"search\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \"Filter \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, AccountsTableComponent_mat_toolbar_2_button_8_Template, 3, 0, \"button\", _c17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, AccountsTableComponent_mat_toolbar_2_button_9_Template, 3, 1, \"button\", _c18);\n    i0.ɵɵelementStart(10, \"mat-menu\", _c19, _c20);\n    i0.ɵɵtemplate(12, AccountsTableComponent_mat_toolbar_2_button_12_Template, 4, 2, \"button\", _c21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(13, AccountsTableComponent_mat_toolbar_2_button_13_Template, 3, 0, \"button\", _c22);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _r186 = i0.ɵɵreference(3);\n    const ctx_r176 = i0.ɵɵnextContext();\n    i0.ɵɵselect(8);\n    i0.ɵɵproperty(\"ngIf\", _r186.value !== \"\");\n    i0.ɵɵselect(9);\n    i0.ɵɵproperty(\"ngIf\", ctx_r176.showColumnFilter);\n    i0.ɵɵselect(12);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r176.columns);\n    i0.ɵɵselect(13);\n    i0.ɵɵproperty(\"ngIf\", ctx_r176.showActionColumn);\n} }\nconst _c29 = [\"mode\", \"indeterminate\"];\nfunction AccountsTableComponent_mat_progress_bar_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-progress-bar\", _c29);\n} }\nconst _c30 = [\"matColumnDef\", \"select\"];\nconst _c31 = [4, \"matHeaderCellDef\"];\nconst _c32 = [4, \"matCellDef\"];\nconst _c33 = [3, \"disabled\", \"checked\", \"indeterminate\", \"change\"];\nfunction AccountsTableComponent_ng_container_7_mat_header_cell_1_Template(rf, ctx) { if (rf & 1) {\n    const _r207 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵelementStart(1, \"mat-checkbox\", _c33);\n    i0.ɵɵlistener(\"change\", function AccountsTableComponent_ng_container_7_mat_header_cell_1_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r207); const ctx_r206 = i0.ɵɵnextContext(2); return $event ? ctx_r206.masterToggle() : null; });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r204 = i0.ɵɵnextContext(2);\n    i0.ɵɵselect(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r204.dataSource.filteredData.length)(\"checked\", ctx_r204.isMasterToggleChecked())(\"indeterminate\", ctx_r204.isMasterToggleIndeterminate());\n} }\nconst _c34 = [3, \"checked\", \"click\", \"change\"];\nfunction AccountsTableComponent_ng_container_7_mat_cell_2_Template(rf, ctx) { if (rf & 1) {\n    const _r210 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵelementStart(1, \"mat-checkbox\", _c34);\n    i0.ɵɵlistener(\"click\", function AccountsTableComponent_ng_container_7_mat_cell_2_Template_mat_checkbox_click_1_listener($event) { i0.ɵɵrestoreView(_r210); return $event.stopPropagation(); });\n    i0.ɵɵlistener(\"change\", function AccountsTableComponent_ng_container_7_mat_cell_2_Template_mat_checkbox_change_1_listener($event) { i0.ɵɵrestoreView(_r210); const row_r208 = ctx.$implicit; const ctx_r211 = i0.ɵɵnextContext(2); return $event ? ctx_r211.selectRow(row_r208) : null; });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r208 = ctx.$implicit;\n    const ctx_r205 = i0.ɵɵnextContext(2);\n    i0.ɵɵselect(1);\n    i0.ɵɵproperty(\"checked\", ctx_r205.selection.isSelected(row_r208));\n} }\nfunction AccountsTableComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, _c30);\n    i0.ɵɵtemplate(1, AccountsTableComponent_ng_container_7_mat_header_cell_1_Template, 2, 3, \"mat-header-cell\", _c31);\n    i0.ɵɵtemplate(2, AccountsTableComponent_ng_container_7_mat_cell_2_Template, 2, 1, \"mat-cell\", _c32);\n    i0.ɵɵelementContainerEnd();\n} }\nconst _c35 = [3, \"matColumnDef\", \"sticky\", \"stickyEnd\"];\nconst _c36 = [\"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"];\nconst _c37 = [\"mat-sort-header\", \"\"];\nfunction AccountsTableComponent_ng_container_8_mat_header_cell_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\", _c37);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r212 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵselect(1);\n    i0.ɵɵtextInterpolate1(\" \", column_r212.header, \" \");\n} }\nconst _c38 = [4, \"ngIf\", \"ngIfElse\"];\nconst _c39 = [\"noTemplate\", \"\"];\nconst _c40 = [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"];\nfunction AccountsTableComponent_ng_container_8_mat_cell_2_ng_container_1_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n} }\nconst _c41 = function (a0, a1) { return { $implicit: a0, column: a1 }; };\nfunction AccountsTableComponent_ng_container_8_mat_cell_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AccountsTableComponent_ng_container_8_mat_cell_2_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", _c40);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const row_r216 = i0.ɵɵnextContext().$implicit;\n    const column_r212 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵselect(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", column_r212.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c41, row_r216, row_r216[column_r212.property]));\n} }\nfunction AccountsTableComponent_ng_container_8_mat_cell_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵtext(0);\n} if (rf & 2) {\n    const row_r216 = i0.ɵɵnextContext().$implicit;\n    const column_r212 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵtextInterpolate1(\" \", column_r212.displayFn(row_r216), \" \");\n} }\nfunction AccountsTableComponent_ng_container_8_mat_cell_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵtemplate(1, AccountsTableComponent_ng_container_8_mat_cell_2_ng_container_1_Template, 2, 5, \"ng-container\", _c38);\n    i0.ɵɵtemplate(2, AccountsTableComponent_ng_container_8_mat_cell_2_ng_template_2_Template, 1, 1, \"ng-template\", null, _c39, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const _r218 = i0.ɵɵreference(3);\n    const column_r212 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵselect(1);\n    i0.ɵɵproperty(\"ngIf\", column_r212.template)(\"ngIfElse\", _r218);\n} }\nfunction AccountsTableComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, _c35);\n    i0.ɵɵtemplate(1, AccountsTableComponent_ng_container_8_mat_header_cell_1_Template, 2, 1, \"mat-header-cell\", _c36);\n    i0.ɵɵtemplate(2, AccountsTableComponent_ng_container_8_mat_cell_2_Template, 4, 2, \"mat-cell\", _c32);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const column_r212 = ctx.$implicit;\n    i0.ɵɵproperty(\"matColumnDef\", column_r212.property)(\"sticky\", column_r212.sticky === \"start\")(\"stickyEnd\", column_r212.sticky === \"end\");\n} }\nconst _c42 = [\"sticky\", \"\", 3, \"matColumnDef\"];\nfunction AccountsTableComponent_ng_container_9_mat_header_cell_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r226 = i0.ɵɵnextContext(2);\n    i0.ɵɵselect(1);\n    i0.ɵɵtextInterpolate(ctx_r226.actionColumn);\n} }\nconst _c43 = [\"type\", \"button\", \"color\", \"primary\", \"mat-icon-button\", \"\", 3, \"click\"];\nconst _c44 = [\"type\", \"button\", \"color\", \"warn\", \"mat-icon-button\", \"\", 3, \"click\"];\nfunction AccountsTableComponent_ng_container_9_mat_cell_2_Template(rf, ctx) { if (rf & 1) {\n    const _r230 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵelementStart(1, \"button\", _c43);\n    i0.ɵɵlistener(\"click\", function AccountsTableComponent_ng_container_9_mat_cell_2_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r230); const entity_r228 = ctx.$implicit; const ctx_r229 = i0.ɵɵnextContext(2); return ctx_r229.openPopUp(entity_r228); });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"edit_mode\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", _c44);\n    i0.ɵɵlistener(\"click\", function AccountsTableComponent_ng_container_9_mat_cell_2_Template_button_click_4_listener($event) { i0.ɵɵrestoreView(_r230); const entity_r228 = ctx.$implicit; const ctx_r231 = i0.ɵɵnextContext(2); return ctx_r231.delete(entity_r228).subscribe(); });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} }\nfunction AccountsTableComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, _c42);\n    i0.ɵɵtemplate(1, AccountsTableComponent_ng_container_9_mat_header_cell_1_Template, 2, 1, \"mat-header-cell\", _c31);\n    i0.ɵɵtemplate(2, AccountsTableComponent_ng_container_9_mat_cell_2_Template, 7, 0, \"mat-cell\", _c32);\n    i0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r181 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matColumnDef\", ctx_r181.actionColumn);\n} }\nfunction AccountsTableComponent_mat_header_row_10_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-header-row\");\n} }\nconst _c45 = [1, \"row\"];\nfunction AccountsTableComponent_mat_row_11_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-row\", _c45);\n    i0.ɵɵstyling();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r232 = ctx.$implicit;\n    const ctx_r183 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"selected\", ctx_r183.selection.isSelected(row_r232));\n    i0.ɵɵstylingApply();\n} }\nconst _c46 = [5, 10, 20];\n// TODO: search with facets https://github.com/sfeir-open-source/angular-search-experience\n// https://ngx.tools/#/search?q=Go\nexport class AccountsTableComponent extends EntitiesComponent {\n    constructor(accountService, store, dialog, snack, confirmService) {\n        super(accountService);\n        this.store = store;\n        this.dialog = dialog;\n        this.snack = snack;\n        this.confirmService = confirmService;\n        this.crumbs = [\n            { name: 'Dashboard', link: '/dashboard' },\n            { name: 'Grid', link: '/dashboard/grid' },\n            { name: 'CRUD Table' },\n        ];\n        // readonly columns = [ { property: 'id'},{ property: 'name'},{ property: 'gender'},{ property: 'age'} ] as EntityColumnDef<Account>[]\n        this.columns = [\n            // prettier-ignore\n            new EntityColumnDef({ property: 'userId', header: 'No.', displayFn: (entity) => `${entity.id}` }),\n            // prettier-ignore\n            // tslint:disable:max-line-length\n            new EntityColumnDef({ property: 'Name', header: 'Name', displayFn: (entity) => `${entity.first_name} ${entity.last_name}` }),\n            new EntityColumnDef({ property: 'gender', header: 'Gender' }),\n            // prettier-ignore\n            new EntityColumnDef({ property: 'dob', header: 'DoB', displayFn: (entity) => `${format(this.stringToDate(entity.dob), 'MMMM dd, yyyy')}` }),\n            new EntityColumnDef({ property: 'city', header: 'City', displayFn: entity => `${entity.address.city}` }),\n            new EntityColumnDef({\n                property: 'state',\n                header: 'State',\n                displayFn: entity => `${entity.address.state}`,\n            }),\n        ];\n        // optional\n        this.showActionColumn = true;\n        this.showColumnFilter = true;\n        this.showToolbar = true;\n        this.formRef = AccountEditComponent;\n    }\n    // optional\n    delete(item) {\n        return this.confirmService.confirm('Confirm', `Delete ${item.first_name} ${item.last_name}?`).pipe(filter(confirmed => confirmed === true), mergeMap(_ => super.delete(item)), tap(_ => {\n            this.snack.open('Member Deleted!', 'OK', { duration: 5000 });\n            this.store.dispatch(new Navigate([`/dashboard/grid/crud-table`]));\n        }), catchError(error => {\n            this.snack.open(error, 'OK', { duration: 10000 });\n            return throwError('Ignore Me!');\n        }));\n    }\n    // required to override\n    getNewEntity() {\n        const entity = new Account();\n        entity.address = new Address();\n        return entity;\n    }\n    // optional\n    showDetails(entity) {\n        if (entity) {\n            this.store.dispatch(new Navigate([`/dashboard/grid/crud-table/${entity.id}`]));\n        }\n        else {\n            this.store.dispatch(new Navigate(['/dashboard/grid/crud-table']));\n        }\n    }\n    // filterPredicate(entity: Account, _filter: string): boolean  {\n    //   return entity.first_name.indexOf(_filter) !== -1;\n    // }\n    /**\n     *  openPopUp() is used in entity.component.html\n     *  if you want different implantation (e.g., add-new-line instead of popup, inline edit)\n     *  make a copy of entity.component.html as <entity>.component.html and implement your own add/edit logic.\n     */\n    openPopUp(entity) {\n        let isNew = false;\n        let id;\n        if (!entity) {\n            isNew = true;\n            entity = this.getNewEntity();\n        }\n        else {\n            id = entity.id;\n        }\n        const title = isNew ? 'Add Member' : 'Update Member';\n        const dialogRef = this.dialog.open(this.formRef, {\n            width: '720px',\n            disableClose: true,\n            data: { title, payload: entity },\n        });\n        dialogRef\n            .afterClosed()\n            .pipe(filter(res => res !== false), \n        // tap(res => console.log(res)),\n        concatMap((res) => super.updateOrCreate(res, id)))\n            .subscribe(_ => {\n            this.snack.open(isNew ? 'Member Created!' : 'Member Updated!', 'OK', { duration: 5000 });\n            this.store.dispatch(new Navigate([`/dashboard/grid/crud-table`]));\n        }, error => this.snack.open(error, 'OK', { duration: 10000 }));\n    }\n}\nAccountsTableComponent.ngComponentDef = i0.ɵɵdefineComponent({ type: AccountsTableComponent, selectors: [[\"ngx-accounts-table\"]], factory: function AccountsTableComponent_Factory(t) { return new (t || AccountsTableComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Store), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i5.AppConfirmService)); }, features: [i0.ɵɵInheritDefinitionFeature], consts: 18, vars: 14, template: function AccountsTableComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", _c0);\n        i0.ɵɵelementStart(1, \"mat-card\", _c1);\n        i0.ɵɵtemplate(2, AccountsTableComponent_mat_toolbar_2_Template, 14, 4, \"mat-toolbar\", _c2);\n        i0.ɵɵtemplate(3, AccountsTableComponent_mat_progress_bar_3_Template, 1, 0, \"mat-progress-bar\", _c3);\n        i0.ɵɵpipe(4, \"async\");\n        i0.ɵɵelementStart(5, \"mat-table\", _c4, _c5);\n        i0.ɵɵtemplate(7, AccountsTableComponent_ng_container_7_Template, 3, 0, \"ng-container\", _c6);\n        i0.ɵɵtemplate(8, AccountsTableComponent_ng_container_8_Template, 3, 3, \"ng-container\", _c7);\n        i0.ɵɵtemplate(9, AccountsTableComponent_ng_container_9_Template, 3, 1, \"ng-container\", _c8);\n        i0.ɵɵtemplate(10, AccountsTableComponent_mat_header_row_10_Template, 1, 0, \"mat-header-row\", _c9);\n        i0.ɵɵtemplate(11, AccountsTableComponent_mat_row_11_Template, 1, 1, \"mat-row\", _c10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"mat-paginator\", _c11, _c12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵelement(15, \"br\");\n        i0.ɵɵelement(16, \"router-outlet\", null, _c13);\n    } if (rf & 2) {\n        i0.ɵɵselect(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showToolbar);\n        i0.ɵɵselect(3);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(4, 12, ctx.loading$));\n        i0.ɵɵselect(5);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵselect(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.maxSelectable > 0);\n        i0.ɵɵselect(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.columns);\n        i0.ɵɵselect(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.showActionColumn);\n        i0.ɵɵselect(10);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns)(\"matHeaderRowDefSticky\", true);\n        i0.ɵɵselect(11);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵselect(12);\n        i0.ɵɵproperty(\"pageSize\", 5)(\"pageSizeOptions\", _c46)(\"showFirstLastButtons\", true);\n    } }, directives: [i6.DefaultLayoutDirective, i7.MatCard, i8.NgIf, i9.MatTable, i10.MatSort, i8.NgForOf, i9.MatHeaderRowDef, i9.MatRowDef, i11.MatPaginator, i12.RouterOutlet, i13.MatToolbar, i14.MatFormField, i6.DefaultFlexDirective, i15.MatInput, i14.MatLabel, i16.MatIcon, i17._MatMenu, i18.MatButton, i14.MatSuffix, i17.MatMenuTrigger, i19.MatCheckbox, i20.MatProgressBar, i9.MatColumnDef, i9.MatHeaderCellDef, i9.MatCellDef, i9.MatHeaderCell, i9.MatCell, i10.MatSortHeader, i8.NgTemplateOutlet, i9.MatHeaderRow, i9.MatRow], pipes: [i8.AsyncPipe], styles: [\"mat-toolbar[_ngcontent-%COMP%]{padding:8px 24px 0}mat-form-field[_ngcontent-%COMP%]{font-size:16px}mat-table[_ngcontent-%COMP%]{position:relative;top:0;max-height:400px;margin:auto;padding:0;overflow:auto}.row[_ngcontent-%COMP%]:hover{background:#f5f5f5}.row[_ngcontent-%COMP%]:active{background:#eaeaea}.mat-column-select[_ngcontent-%COMP%]{overflow:visible}\"] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AccountsTableComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-accounts-table',\n                templateUrl: '../../../../../shared/src/lib/containers/entity/entity.component.html',\n                styleUrls: ['../../../../../shared/src/lib/containers/entity/entity.component.scss'],\n            }]\n    }], function () { return [{ type: i1.AccountService }, { type: i2.Store }, { type: i3.MatDialog }, { type: i4.MatSnackBar }, { type: i5.AppConfirmService }]; }, null);\n","<div fxLayout=\"column\">\n  <mat-card class=\"mat-elevation-z8\">\n    <mat-toolbar *ngIf=\"showToolbar\">\n      <mat-form-field fxFlex>\n        <input matInput #filter (keyup)=\"applyFilter($event.target.value)\" />\n        <mat-label> <mat-icon>search</mat-icon>Filter </mat-label>\n        <button\n          mat-button\n          *ngIf=\"filter.value !== ''\"\n          matSuffix\n          mat-icon-button\n          aria-label=\"Clear\"\n          (click)=\"filter.value = ''\"\n        >\n          <mat-icon>close</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <button\n        *ngIf=\"showColumnFilter\"\n        mat-icon-button\n        style=\"margin-left: 16px\"\n        type=\"button\"\n        [matMenuTriggerFor]=\"columnFilter\"\n      >\n        <mat-icon>filter_list</mat-icon>\n      </button>\n\n      <mat-menu #columnFilter=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n        <button\n          class=\"checkbox-item mat-menu-item\"\n          *ngFor=\"let column of columns\"\n          (click)=\"toggleColumnVisibility(column, $event)\"\n        >\n          <!--\n            <mat-checkbox [(ngModel)]=\"column.visible\" class=\"checkbox\" #checkbox (click)=\"$event.stopPropagation()\">\n          -->\n          <mat-checkbox\n            [checked]=\"column.visible\"\n            (change)=\"column.visible = !column.visible\"\n            class=\"checkbox\"\n            #checkbox\n            (click)=\"$event.stopPropagation()\"\n          >\n            {{ column.header }}\n          </mat-checkbox>\n        </button>\n      </mat-menu>\n\n      <button\n        *ngIf=\"showActionColumn\"\n        mat-mini-fab\n        color=\"primary\"\n        style=\"margin-left: 16px\"\n        (click)=\"openPopUp()\"\n        matTooltip=\"add\"\n      >\n        <mat-icon>add</mat-icon>\n      </button>\n    </mat-toolbar>\n\n    <mat-progress-bar *ngIf=\"(loading$ | async)\" mode=\"indeterminate\"></mat-progress-bar>\n\n    <mat-table #table [dataSource]=\"dataSource\" matSort>\n      <!-- Checkbox Column -->\n      <ng-container *ngIf=\"maxSelectable > 0\" matColumnDef=\"select\">\n        <mat-header-cell *matHeaderCellDef>\n          <mat-checkbox\n            (change)=\"$event ? masterToggle() : null\"\n            [disabled]=\"!dataSource.filteredData.length\"\n            [checked]=\"isMasterToggleChecked()\"\n            [indeterminate]=\"isMasterToggleIndeterminate()\"\n          >\n          </mat-checkbox>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n          <mat-checkbox\n            (click)=\"$event.stopPropagation()\"\n            (change)=\"$event ? selectRow(row) : null\"\n            [checked]=\"selection.isSelected(row)\"\n          >\n          </mat-checkbox>\n        </mat-cell>\n      </ng-container>\n\n      <ng-container\n        *ngFor=\"let column of columns\"\n        [matColumnDef]=\"column.property\"\n        [sticky]=\"column.sticky === 'start'\"\n        [stickyEnd]=\"column.sticky === 'end'\"\n      >\n        <mat-header-cell *matHeaderCellDef mat-sort-header> {{ column.header }} </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n          <ng-container *ngIf=\"column.template; else noTemplate\">\n            <ng-container\n              *ngTemplateOutlet=\"column.template; context: { $implicit: row, column: row[column.property] }\"\n            ></ng-container>\n          </ng-container>\n          <ng-template #noTemplate> {{ column.displayFn(row) }} </ng-template>\n        </mat-cell>\n      </ng-container>\n\n      <ng-container *ngIf=\"showActionColumn\" [matColumnDef]=\"actionColumn\" sticky>\n        <mat-header-cell *matHeaderCellDef>{{ actionColumn }}</mat-header-cell>\n        <mat-cell *matCellDef=\"let entity\">\n          <button type=\"button\" (click)=\"openPopUp(entity)\" color=\"primary\" mat-icon-button>\n            <mat-icon>edit_mode</mat-icon>\n          </button>\n\n          <button type=\"button\" (click)=\"delete(entity).subscribe()\" color=\"warn\" mat-icon-button>\n            <mat-icon>delete</mat-icon>\n          </button>\n        </mat-cell>\n      </ng-container>\n\n      <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\n      <mat-row\n        *matRowDef=\"let row; columns: displayedColumns\"\n        class=\"row\"\n        [class.selected]=\"selection.isSelected(row)\"\n      ></mat-row>\n      <!-- <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"row\" -->\n      <!-- [class.selected]=\"selection.isSelected(row)\" (click)=\"selectRow(row)\"></mat-row> -->\n    </mat-table>\n\n    <mat-paginator\n      #paginator\n      [pageSize]=\"5\"\n      [pageSizeOptions]=\"[5, 10, 20]\"\n      [showFirstLastButtons]=\"true\"\n    ></mat-paginator>\n  </mat-card>\n</div>\n\n<br /><br />\n<!-- <div [@routerTransition]=\"getRouteAnimation(o)\"> -->\n<router-outlet #o=\"outlet\"></router-outlet>\n<!-- </div> -->\n","import { Component } from '@angular/core';\n\nimport { Account, Address, Gender } from '../../models/account.model';\nimport { AccountService } from '../../services/account.service';\nimport { EntitiesComponent, EntityColumnDef } from '@ngx-starter-kit/shared';\nimport { AppConfirmService } from '@ngx-starter-kit/app-confirm';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { catchError, tap, concatMap, filter, map, mergeMap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { format } from 'date-fns/esm';\nimport { AccountEditComponent } from '../../components/account-edit/account-edit.component';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Store } from '@ngxs/store';\nimport { Crumb } from '@ngx-starter-kit/breadcrumbs';\n\n// TODO: search with facets https://github.com/sfeir-open-source/angular-search-experience\n// https://ngx.tools/#/search?q=Go\n@Component({\n  selector: 'ngx-accounts-table',\n  templateUrl: '../../../../../shared/src/lib/containers/entity/entity.component.html',\n  styleUrls: ['../../../../../shared/src/lib/containers/entity/entity.component.scss'],\n})\nexport class AccountsTableComponent extends EntitiesComponent<Account, AccountService> {\n  crumbs: ReadonlyArray<Crumb> = [\n    { name: 'Dashboard', link: '/dashboard' },\n    { name: 'Grid', link: '/dashboard/grid' },\n    { name: 'CRUD Table' },\n  ];\n\n  // readonly columns = [ { property: 'id'},{ property: 'name'},{ property: 'gender'},{ property: 'age'} ] as EntityColumnDef<Account>[]\n  readonly columns = [\n    // prettier-ignore\n    new EntityColumnDef<Account>({ property: 'userId',  header: 'No.',    displayFn: (entity) => `${entity.id}` }),\n    // prettier-ignore\n    // tslint:disable:max-line-length\n    new EntityColumnDef<Account>({ property: 'Name',    header: 'Name',   displayFn: (entity) => `${entity.first_name} ${entity.last_name}` }),\n    new EntityColumnDef<Account>({ property: 'gender', header: 'Gender' }),\n    // prettier-ignore\n    new EntityColumnDef<Account>({ property: 'dob',     header: 'DoB',    displayFn: (entity) => `${format(this.stringToDate(entity.dob), 'MMMM dd, yyyy')}` }),\n    new EntityColumnDef<Account>({ property: 'city', header: 'City', displayFn: entity => `${entity.address.city}` }),\n    new EntityColumnDef<Account>({\n      property: 'state',\n      header: 'State',\n      displayFn: entity => `${entity.address.state}`,\n    }),\n  ] as EntityColumnDef<Account>[];\n\n  // optional\n  readonly showActionColumn = true;\n  readonly showColumnFilter = true;\n  readonly showToolbar = true;\n\n  readonly formRef = AccountEditComponent;\n\n  constructor(\n    accountService: AccountService,\n    private store: Store,\n    private dialog: MatDialog,\n    private snack: MatSnackBar,\n    private confirmService: AppConfirmService,\n  ) {\n    super(accountService);\n  }\n\n  // optional\n  delete(item: Account) {\n    return this.confirmService.confirm('Confirm', `Delete ${item.first_name} ${item.last_name}?`).pipe(\n      filter(confirmed => confirmed === true),\n      mergeMap(_ => super.delete(item)),\n      tap(_ => {\n        this.snack.open('Member Deleted!', 'OK', { duration: 5000 });\n        this.store.dispatch(new Navigate([`/dashboard/grid/crud-table`]));\n      }),\n      catchError(error => {\n        this.snack.open(error, 'OK', { duration: 10000 });\n        return throwError('Ignore Me!');\n      }),\n    );\n  }\n\n  // required to override\n  getNewEntity(): Account {\n    const entity = new Account();\n    entity.address = new Address();\n    return entity;\n  }\n\n  // optional\n  showDetails(entity: Account) {\n    if (entity) {\n      this.store.dispatch(new Navigate([`/dashboard/grid/crud-table/${entity.id}`]));\n    } else {\n      this.store.dispatch(new Navigate(['/dashboard/grid/crud-table']));\n    }\n  }\n\n  // filterPredicate(entity: Account, _filter: string): boolean  {\n  //   return entity.first_name.indexOf(_filter) !== -1;\n  // }\n\n  /**\n   *  openPopUp() is used in entity.component.html\n   *  if you want different implantation (e.g., add-new-line instead of popup, inline edit)\n   *  make a copy of entity.component.html as <entity>.component.html and implement your own add/edit logic.\n   */\n  openPopUp(entity: Account) {\n    let isNew = false;\n    let id;\n    if (!entity) {\n      isNew = true;\n      entity = this.getNewEntity();\n    } else {\n      id = entity.id;\n    }\n    const title = isNew ? 'Add Member' : 'Update Member';\n\n    const dialogRef = this.dialog.open(this.formRef, {\n      width: '720px',\n      disableClose: true,\n      data: { title, payload: entity },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(\n        filter(res => res !== false),\n        // tap(res => console.log(res)),\n        concatMap((res: Account) => super.updateOrCreate(res, id)),\n      )\n      .subscribe(\n        _ => {\n          this.snack.open(isNew ? 'Member Created!' : 'Member Updated!', 'OK', { duration: 5000 });\n          this.store.dispatch(new Navigate([`/dashboard/grid/crud-table`]));\n        },\n        error => this.snack.open(error, 'OK', { duration: 10000 }),\n      );\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { AccountService } from '../../services/account.service';\nimport { fadeAnimation } from '@ngx-starter-kit/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/material/divider\";\nimport * as i5 from \"@angular/material/list\";\nimport * as i6 from \"@angular/common\";\nconst _c0 = [\"role\", \"list\"];\nconst _c1 = [\"role\", \"listitem\", 4, \"ngFor\", \"ngForOf\"];\nconst _c2 = [\"role\", \"listitem\"];\nfunction AccountDetailComponent_mat_list_item_9_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\", _c2);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"json\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const entry_r234 = ctx.$implicit;\n    i0.ɵɵselect(3);\n    i0.ɵɵtextInterpolate1(\"\", entry_r234.key, \"\\uFF1A\");\n    i0.ɵɵselect(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 2, entry_r234.value));\n} }\nexport class AccountDetailComponent {\n    constructor(accountService, route) {\n        this.accountService = accountService;\n        this.route = route;\n        this.animationTrigger$ = new BehaviorSubject('');\n    }\n    ngOnInit() {\n        this.sub = this.route.params.subscribe(params => {\n            this.accountService.getById(params.id).subscribe(data => {\n                this.animationTrigger$.next(params.id);\n                this.account = data;\n            });\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n}\nAccountDetailComponent.ngComponentDef = i0.ɵɵdefineComponent({ type: AccountDetailComponent, selectors: [[\"ngx-account-detail\"]], factory: function AccountDetailComponent_Factory(t) { return new (t || AccountDetailComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.ActivatedRoute)); }, consts: 11, vars: 6, template: function AccountDetailComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\");\n        i0.ɵɵpipe(1, \"async\");\n        i0.ɵɵelementStart(2, \"mat-card-header\");\n        i0.ɵɵelementStart(3, \"mat-card-title\");\n        i0.ɵɵelementStart(4, \"h3\");\n        i0.ɵɵtext(5, \"Selected Account\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"mat-divider\");\n        i0.ɵɵelementStart(7, \"mat-card-content\");\n        i0.ɵɵelementStart(8, \"mat-list\", _c0);\n        i0.ɵɵtemplate(9, AccountDetailComponent_mat_list_item_9_Template, 7, 4, \"mat-list-item\", _c1);\n        i0.ɵɵpipe(10, \"keyvalue\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"@fadeAnimation\", i0.ɵɵpipeBind1(1, 2, ctx.animationTrigger$));\n        i0.ɵɵselect(9);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 4, ctx.account));\n    } }, directives: [i3.MatCard, i3.MatCardHeader, i3.MatCardTitle, i4.MatDivider, i3.MatCardContent, i5.MatList, i6.NgForOf, i5.MatListItem], pipes: [i6.AsyncPipe, i6.KeyValuePipe, i6.JsonPipe], styles: [\"\"], data: { animation: [fadeAnimation] } });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AccountDetailComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-account-detail',\n                templateUrl: './account-detail.component.html',\n                styleUrls: ['./account-detail.component.scss'],\n                animations: [fadeAnimation],\n            }]\n    }], function () { return [{ type: i1.AccountService }, { type: i2.ActivatedRoute }]; }, null);\n","<mat-card [@fadeAnimation]=\"animationTrigger$ | async\">\n  <mat-card-header>\n    <mat-card-title><h3>Selected Account</h3></mat-card-title>\n  </mat-card-header>\n  <mat-divider></mat-divider>\n  <mat-card-content>\n    <mat-list role=\"list\">\n      <mat-list-item *ngFor=\"let entry of (account | keyvalue)\" role=\"listitem\">\n        <div>\n          <span>{{ entry.key }}：</span><span>{{ entry.value | json }}</span>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </mat-card-content>\n</mat-card>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { AccountService } from '../../services/account.service';\nimport { Account } from '../../models/account.model';\nimport { fadeAnimation } from '@ngx-starter-kit/animations';\n\n@Component({\n  selector: 'ngx-account-detail',\n  templateUrl: './account-detail.component.html',\n  styleUrls: ['./account-detail.component.scss'],\n  animations: [fadeAnimation],\n})\nexport class AccountDetailComponent implements OnInit, OnDestroy {\n  account: Account;\n  sub: Subscription;\n  animationTrigger$ = new BehaviorSubject<string>('');\n\n  constructor(private accountService: AccountService, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.sub = this.route.params.subscribe(params => {\n      this.accountService.getById(params.id).subscribe(data => {\n        this.animationTrigger$.next(params.id);\n        this.account = data;\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AppConfirmModule } from '@ngx-starter-kit/app-confirm';\nimport { BreadcrumbsModule } from '@ngx-starter-kit/breadcrumbs';\nimport { TruncateModule, HelperModule, NgLetModule } from '@ngx-starter-kit/ngx-utils';\nimport { SharedMaterialDateModule, SharedFlexLayoutModule } from '@ngx-starter-kit/shared';\n\nimport { AccountsGridListComponent } from './containers/accounts-grid-list/accounts-grid-list.component';\nimport { AccountsTableComponent } from './containers/accounts-table/accounts-table.component';\nimport { AccountService } from './services/account.service';\nimport { RandomAccountService } from './services/random-account.service';\nimport { AccountDetailComponent } from './components/account-detail/account-detail.component';\nimport { AccountEditComponent } from './components/account-edit/account-edit.component';\n\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nconst matModules = [\n  DragDropModule,\n  MatButtonModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatMenuModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatProgressBarModule,\n  MatTableModule,\n  MatPaginatorModule,\n  MatSortModule,\n  MatCardModule,\n  MatButtonToggleModule,\n  MatGridListModule,\n  MatDividerModule,\n  MatListModule,\n  MatDialogModule,\n  MatSelectModule,\n  MatAutocompleteModule,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgLetModule,\n    BreadcrumbsModule,\n    ReactiveFormsModule,\n    BreadcrumbsModule,\n    [...matModules],\n    SharedFlexLayoutModule,\n    SharedMaterialDateModule,\n    AppConfirmModule,\n    TruncateModule,\n    HelperModule,\n    RouterModule.forChild([\n      /* {path: '', pathMatch: 'full', component: InsertYourComponentHere} */\n      { path: '', redirectTo: 'crud-table', pathMatch: 'full' },\n      {\n        path: 'crud-table',\n        component: AccountsTableComponent,\n        data: { title: 'Accounts', depth: 2 },\n        children: [\n          {\n            path: ':id',\n            component: AccountDetailComponent,\n            data: { title: 'Account Detail' },\n          },\n        ],\n      },\n      {\n        path: 'grid-list',\n        component: AccountsGridListComponent,\n        data: { title: 'Accounts Grid-List', depth: 3 },\n      },\n    ]),\n  ],\n  declarations: [AccountsTableComponent, AccountsGridListComponent, AccountDetailComponent, AccountEditComponent],\n  entryComponents: [AccountEditComponent],\n  providers: [AccountService, RandomAccountService],\n})\nexport class GridModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppConfirmModule } from '@ngx-starter-kit/app-confirm';\nimport { BreadcrumbsModule } from '@ngx-starter-kit/breadcrumbs';\nimport { TruncateModule, HelperModule, NgLetModule } from '@ngx-starter-kit/ngx-utils';\nimport { SharedMaterialDateModule, SharedFlexLayoutModule } from '@ngx-starter-kit/shared';\nimport { AccountsGridListComponent } from './containers/accounts-grid-list/accounts-grid-list.component';\nimport { AccountsTableComponent } from './containers/accounts-table/accounts-table.component';\nimport { AccountService } from './services/account.service';\nimport { RandomAccountService } from './services/random-account.service';\nimport { AccountDetailComponent } from './components/account-detail/account-detail.component';\nimport { AccountEditComponent } from './components/account-edit/account-edit.component';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst matModules = [\n    DragDropModule,\n    MatButtonModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatProgressBarModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatCardModule,\n    MatButtonToggleModule,\n    MatGridListModule,\n    MatDividerModule,\n    MatListModule,\n    MatDialogModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n];\nexport class GridModule {\n}\nGridModule.ngModuleDef = i0.ɵɵdefineNgModule({ type: GridModule });\nGridModule.ngInjectorDef = i0.ɵɵdefineInjector({ factory: function GridModule_Factory(t) { return new (t || GridModule)(); }, providers: [AccountService, RandomAccountService], imports: [[\n            CommonModule,\n            NgLetModule,\n            BreadcrumbsModule,\n            ReactiveFormsModule,\n            BreadcrumbsModule,\n            [...matModules],\n            SharedFlexLayoutModule,\n            SharedMaterialDateModule,\n            AppConfirmModule,\n            TruncateModule,\n            HelperModule,\n            RouterModule.forChild([\n                /* {path: '', pathMatch: 'full', component: InsertYourComponentHere} */\n                { path: '', redirectTo: 'crud-table', pathMatch: 'full' },\n                {\n                    path: 'crud-table',\n                    component: AccountsTableComponent,\n                    data: { title: 'Accounts', depth: 2 },\n                    children: [\n                        {\n                            path: ':id',\n                            component: AccountDetailComponent,\n                            data: { title: 'Account Detail' },\n                        },\n                    ],\n                },\n                {\n                    path: 'grid-list',\n                    component: AccountsGridListComponent,\n                    data: { title: 'Accounts Grid-List', depth: 3 },\n                },\n            ]),\n        ]] });\n/*@__PURE__*/ i0.ɵɵsetNgModuleScope(GridModule, { declarations: [AccountsTableComponent, AccountsGridListComponent, AccountDetailComponent, AccountEditComponent], imports: [CommonModule,\n        NgLetModule,\n        BreadcrumbsModule,\n        ReactiveFormsModule,\n        BreadcrumbsModule,\n        DragDropModule,\n        MatButtonModule,\n        MatIconModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatMenuModule,\n        MatCheckboxModule,\n        MatToolbarModule,\n        MatProgressBarModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatSortModule,\n        MatCardModule,\n        MatButtonToggleModule,\n        MatGridListModule,\n        MatDividerModule,\n        MatListModule,\n        MatDialogModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        SharedFlexLayoutModule,\n        SharedMaterialDateModule,\n        AppConfirmModule,\n        TruncateModule,\n        HelperModule, i1.RouterModule] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(GridModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    NgLetModule,\n                    BreadcrumbsModule,\n                    ReactiveFormsModule,\n                    BreadcrumbsModule,\n                    [...matModules],\n                    SharedFlexLayoutModule,\n                    SharedMaterialDateModule,\n                    AppConfirmModule,\n                    TruncateModule,\n                    HelperModule,\n                    RouterModule.forChild([\n                        /* {path: '', pathMatch: 'full', component: InsertYourComponentHere} */\n                        { path: '', redirectTo: 'crud-table', pathMatch: 'full' },\n                        {\n                            path: 'crud-table',\n                            component: AccountsTableComponent,\n                            data: { title: 'Accounts', depth: 2 },\n                            children: [\n                                {\n                                    path: ':id',\n                                    component: AccountDetailComponent,\n                                    data: { title: 'Account Detail' },\n                                },\n                            ],\n                        },\n                        {\n                            path: 'grid-list',\n                            component: AccountsGridListComponent,\n                            data: { title: 'Accounts Grid-List', depth: 3 },\n                        },\n                    ]),\n                ],\n                declarations: [AccountsTableComponent, AccountsGridListComponent, AccountDetailComponent, AccountEditComponent],\n                entryComponents: [AccountEditComponent],\n                providers: [AccountService, RandomAccountService],\n            }]\n    }], null, null);\n","export * from './lib/grid.module';\n"]}