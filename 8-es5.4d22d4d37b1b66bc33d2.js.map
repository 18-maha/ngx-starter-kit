{"version":3,"sources":["webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.module.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/cdk/esm5/drag-drop.es5.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.scss.shim.ngstyle.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.ngfactory.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.html"],"names":["__webpack_require__","d","__webpack_exports__","BreadcrumbsModule","BreadcrumbsComponent","prototype","ngOnInit","DragDrop","CdkDropList","CDK_DROP_LIST","moveItemInArray","DragDropModule","DragDropRegistry","CdkDropListGroup","CDK_DRAG_CONFIG","CdkDrag","CdkDragHandle","CDK_DRAG_PARENT","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","_angular_common__WEBPACK_IMPORTED_MODULE_7__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","rxjs_operators__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_12__","rxjs_operators__WEBPACK_IMPORTED_MODULE_13__","rxjs_operators__WEBPACK_IMPORTED_MODULE_14__","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","passiveEventListenerOptions","Object","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_this","this","_passiveTransform","x","y","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","find","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","observers","run","pointerPosition","distance","_getDragDistance","delta","_pointerDirectionDelta","_getPointerPositionOnPage","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_startDragSequence","_pointerUp","isDragging","_removeSubscriptions","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","withRootElement","registerDragItem","defineProperty","get","set","newValue","_toggleNativeDragInteractions","enumerable","configurable","getPlaceholderElement","_placeholder","getRootElement","withHandles","handles","forEach","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","withBoundaryElement","boundaryElement","dispose","removeElement","_destroyPreview","_destroyPlaceholder","removeDragItem","complete","clear","_nextSibling","reset","transform","disableHandle","add","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","unsubscribe","_previewRef","destroy","_placeholderRef","isTouchEvent","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","_initialContainer","pointerMove","subscribe","pointerUp","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","insertBefore","currentIndex","getItemIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","_sortItem","getTransform","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","deepCloneNode","left","top","pointerEvents","position","zIndex","classList","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","getTransformTransitionDurationInMs","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","clamp","right","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","parentNode","removeChild","startsWith","array","fromIndex","toIndex","from","clamp$1","to","_uniqueIdCounter","DropListRef","id","sortingDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","_siblings","_orientation","_activeSiblings","registerDropContainer","nativeElement","removeDropContainer","_cacheItems","sibling","_startReceiving","pointerX","pointerY","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","push","_cacheItemPositions","_reset","withItems","items","connectedTo","slice","withOrientation","orientation","findIndex","reverse","currentItem","isReceiving","size","pointerDelta","_isPointerNearDropContainer","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","adjustClientRect","_cacheOwnPosition","_clientRect","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","isInsideClientRect","_canReceive","elementFromPoint","activeSiblings","predicate","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","upEvent","e","options","config","_clearGlobalListeners","Array","instance","ngOnDestroy","ngInjectableDef","factory","token","providedIn","DEFAULT_CONFIG","createDrag","createDropList","parentDrag","_stateChanges","_parentDrag","dropContainer","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","pipe","movedEvent","data","_syncInputs","_handleEvents","selector","ngAfterViewInit","onStable","_updateRootElement","changes","childHandleElements","filter","apply","handleInstance","dragRef","freeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","rootElementSelector","getClosestMatchingAncestor","nodeType","ELEMENT_NODE","nodeName","_getBoundaryElement","boundary","ref","dir","templateRef","emit","markForCheck","currentElement","matches","msMatchesSelector","parentElement","_items","_uniqueIdCounter$1","_group","_sortingDisabled","_dropListRef","_dropLists","ngAfterContentInit","result","change","list","RenderType_BreadcrumbsComponent","View_BreadcrumbsComponent_0","core","encapsulation","styles","View_BreadcrumbsComponent_2","_l","_v","en","$event","ad","onClick","ctrlKey","metaKey","shiftKey","router","common","routerLink","_ck","currVal_2","parent","$implicit","link","href","View_BreadcrumbsComponent_3","View_BreadcrumbsComponent_4","index_ngfactory","icon_es5","inline","color","View_BreadcrumbsComponent_1","flex_es5","core_es5","fxLayout","fxLayoutAlign","ngSwitch","ngSwitchCase","ngIf","last","ngForOf","_co","component","crumbs","title"],"mappings":"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","file":"8-es5.4d22d4d37b1b66bc33d2.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n  imports: [MatIconModule, FlexLayoutModule, RouterModule, CommonModule],\n  exports: [BreadcrumbsComponent],\n  declarations: [BreadcrumbsComponent],\n})\nexport class BreadcrumbsModule {}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\n\nexport interface Crumb {\n  name: string;\n  link?: string;\n}\n@Component({\n  selector: 'ngx-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbsComponent implements OnInit {\n  @Input()\n  readonly title: string;\n  @Input()\n  crumbs: ReadonlyArray<Crumb>;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subscription, Subject, Observable, merge } from 'rxjs';\nimport { ElementRef, Injectable, NgZone, Inject, InjectionToken, NgModule, ContentChildren, EventEmitter, forwardRef, Input, Output, Optional, Directive, ChangeDetectorRef, SkipSelf, ContentChild, ViewContainerRef, isDevMode, TemplateRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith, take, map, takeUntil, switchMap, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[(/** @type {?} */ (key))] = source[(/** @type {?} */ (key))];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    var userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    var computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    var property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) { return prop === 'transform' || prop === 'all'; }));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    var propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    var value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    function (part) { return part.trim(); }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nvar activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nvar MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nvar  /**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nDragRef = /** @class */ (function () {\n    function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        var _this = this;\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (_this._handles.length) {\n                /** @type {?} */\n                var targetHandle = _this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                function (handle) {\n                    /** @type {?} */\n                    var target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                    _this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!_this.disabled) {\n                _this._initializeDragSequence(_this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (!_this._hasStartedDragging) {\n                /** @type {?} */\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                /** @type {?} */\n                var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                /** @type {?} */\n                var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold && (Date.now() >= _this._dragStartTime + (_this.dragStartDelay || 0))) {\n                    _this._hasStartedDragging = true;\n                    _this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    function () { return _this._startDragSequence(event); }));\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (_this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                    _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);\n            _this._hasMoved = true;\n            event.preventDefault();\n            _this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (_this._dropContainer) {\n                _this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                var activeTransform = _this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                _this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                    _this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (_this._moveEvents.observers.length) {\n                _this._ngZone.run((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this._moveEvents.next({\n                        source: _this,\n                        pointerPosition: constrainedPointerPosition,\n                        event: event,\n                        distance: _this._getDragDistance(constrainedPointerPosition),\n                        delta: _this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            // Note that here we use `isDragging` from the service, rather than from `this`.\n            // The difference is that the one from the service reflects whether a dragging sequence\n            // has been initiated, whereas the one on `this` includes whether the user has passed\n            // the minimum dragging threshold.\n            if (!_this._dragDropRegistry.isDragging(_this)) {\n                return;\n            }\n            _this._removeSubscriptions();\n            _this._dragDropRegistry.stopDragging(_this);\n            if (_this._handles) {\n                _this._rootElement.style.webkitTapHighlightColor = _this._rootElementTapHighlight;\n            }\n            if (!_this._hasStartedDragging) {\n                return;\n            }\n            _this.released.next({ source: _this });\n            if (!_this._dropContainer) {\n                // Convert the active transform into a passive one. This means that next time\n                // the user starts dragging the item, its position will be calculated relatively\n                // to the new passive transform.\n                _this._passiveTransform.x = _this._activeTransform.x;\n                _this._passiveTransform.y = _this._activeTransform.y;\n                _this._ngZone.run((/**\n                 * @return {?}\n                 */\n                function () {\n                    _this.ended.next({\n                        source: _this,\n                        distance: _this._getDragDistance(_this._getPointerPositionOnPage(event))\n                    });\n                }));\n                _this._dragDropRegistry.stopDragging(_this);\n                return;\n            }\n            _this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            function () {\n                _this._cleanupDragArtifacts(event);\n                _this._dragDropRegistry.stopDragging(_this);\n            }));\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    Object.defineProperty(DragRef.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: /**\n         * Whether starting to drag this element is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._toggleNativeDragInteractions();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    DragRef.prototype.getPlaceholderElement = /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._placeholder;\n    };\n    /** Returns the root draggable element. */\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    DragRef.prototype.getRootElement = /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    function () {\n        return this._rootElement;\n    };\n    /** Registers the handles that can be used to drag the element. */\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    DragRef.prototype.withHandles = /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    function (handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        function (handle) { return coerceElement(handle); }));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        function (handle) { return toggleNativeDragInteractions(handle, false); }));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    DragRef.prototype.withPreviewTemplate = /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    function (template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    DragRef.prototype.withPlaceholderTemplate = /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    function (template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    DragRef.prototype.withRootElement = /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    function (rootElement) {\n        /** @type {?} */\n        var element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    DragRef.prototype.withBoundaryElement = /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    function (boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        return (/** @type {?} */ (this));\n    };\n    /** Removes the dragging functionality from the DOM element. */\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    DragRef.prototype.dispose = /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    function () {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeElement(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._nextSibling = (/** @type {?} */ (null));\n    };\n    /** Checks whether the element is currently being dragged. */\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    DragRef.prototype.isDragging = /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    };\n    /** Resets a standalone drag item to its initial position. */\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    DragRef.prototype.reset = /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    function () {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    };\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    DragRef.prototype.disableHandle = /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    function (handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    };\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    DragRef.prototype.enableHandle = /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    function (handle) {\n        this._disabledHandles.delete(handle);\n    };\n    /** Sets the layout direction of the draggable item. */\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    DragRef.prototype.withDirection = /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    function (direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    };\n    /** Sets the container that the item is part of. */\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    DragRef.prototype._withDropContainer = /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    function (container) {\n        this._dropContainer = container;\n    };\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    DragRef.prototype.getFreeDragPosition = /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    function () {\n        return { x: this._passiveTransform.x, y: this._passiveTransform.y };\n    };\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    DragRef.prototype.setFreeDragPosition = /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    function (value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    };\n    /** Unsubscribes from the global subscriptions. */\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._removeSubscriptions = /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n    };\n    /** Destroys the preview element and its ViewRef. */\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._destroyPreview = /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._preview) {\n            removeElement(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    };\n    /** Destroys the placeholder element and its ViewRef. */\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._destroyPlaceholder = /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._placeholder) {\n            removeElement(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    };\n    /** Starts the dragging sequence. */\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._startDragSequence = /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        if (this._dropContainer) {\n            /** @type {?} */\n            var element = this._rootElement;\n            // Grab the `nextSibling` before the preview and placeholder\n            // have been created so we don't get the preview by accident.\n            this._nextSibling = element.nextSibling;\n            /** @type {?} */\n            var preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            var placeholder = this._placeholder = this._createPlaceholderElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild((/** @type {?} */ (element.parentNode)).replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    };\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    DragRef.prototype._initializeDragSequence = /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    function (referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        var isDragging = this.isDragging();\n        /** @type {?} */\n        var isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        var isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        var rootElement = this._rootElement;\n        /** @type {?} */\n        var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._toggleNativeDragInteractions();\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    };\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._cleanupDragArtifacts = /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var _this = this;\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        if (this._nextSibling) {\n            (/** @type {?} */ (this._nextSibling.parentNode)).insertBefore(this._rootElement, this._nextSibling);\n        }\n        else {\n            coerceElement(this._initialContainer.element).appendChild(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var container = (/** @type {?} */ (_this._dropContainer));\n            /** @type {?} */\n            var currentIndex = container.getItemIndex(_this);\n            /** @type {?} */\n            var pointerPosition = _this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            var distance = _this._getDragDistance(_this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            _this.ended.next({ source: _this, distance: distance });\n            _this.dropped.next({\n                item: _this,\n                currentIndex: currentIndex,\n                previousIndex: _this._initialContainer.getItemIndex(_this),\n                container: container,\n                previousContainer: _this._initialContainer,\n                isPointerOverContainer: isPointerOverContainer,\n                distance: distance\n            });\n            container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer, distance);\n            _this._dropContainer = _this._initialContainer;\n        }));\n    };\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    DragRef.prototype._updateActiveDropContainer = /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var _this = this;\n        var x = _a.x, y = _a.y;\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left it's\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            function () {\n                // Notify the old container that the item has left.\n                _this.exited.next({ item: _this, container: (/** @type {?} */ (_this._dropContainer)) });\n                (/** @type {?} */ (_this._dropContainer)).exit(_this);\n                // Notify the new container that the item has entered.\n                _this._dropContainer = (/** @type {?} */ (newContainer));\n                _this._dropContainer.enter(_this, x, y);\n                _this.entered.next({\n                    item: _this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(_this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    };\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._createPreviewElement = /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var previewConfig = this._previewTemplate;\n        /** @type {?} */\n        var previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        var preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            var viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = viewRef.rootNodes[0];\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            var element = this._rootElement;\n            /** @type {?} */\n            var elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = elementRect.width + \"px\";\n            preview.style.height = elementRect.height + \"px\";\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        return preview;\n    };\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    DragRef.prototype._animatePreviewToPlaceholder = /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    function () {\n        var _this = this;\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        var placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        var duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            function (resolve) {\n                /** @type {?} */\n                var handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                function (event) {\n                    if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                        _this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                var timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                _this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    };\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._createPlaceholderElement = /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        var placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = this._placeholderRef.rootNodes[0];\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    };\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    DragRef.prototype._getPointerPositionInElement = /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    function (referenceElement, event) {\n        /** @type {?} */\n        var elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    };\n    /** Determines the point of the page that was touched by the user. */\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._getPointerPositionOnPage = /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    };\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    DragRef.prototype._getConstrainedPointerPosition = /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        var constrainedPoint = this.constrainPosition ? this.constrainPosition(point) : point;\n        /** @type {?} */\n        var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n            /** @type {?} */\n            var boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            var previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            var minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            var minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            var maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    };\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    DragRef.prototype._updatePointerDirectionDelta = /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    function (pointerPositionOnPage) {\n        var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n        /** @type {?} */\n        var delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        var changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        var changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    };\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    DragRef.prototype._toggleNativeDragInteractions = /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        var shouldEnable = this.disabled || this._handles.length > 0;\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    };\n    /** Removes the manually-added event listeners from the root element. */\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    DragRef.prototype._removeRootElementListeners = /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    };\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    DragRef.prototype._applyRootElementTransform = /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        /** @type {?} */\n        var transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    };\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    DragRef.prototype._getDragDistance = /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    function (currentPosition) {\n        /** @type {?} */\n        var pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    };\n    return DragRef;\n}());\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    var clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    var descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    var descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (var i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        var cloneCanvases = clone.querySelectorAll('canvas');\n        for (var i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            var correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param {?} element Element to be removed.\n * @return {?}\n */\nfunction removeElement(element) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    return event.type.startsWith('touch');\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    var from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    var to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    var target = array[from];\n    /** @type {?} */\n    var delta = to < from ? -1 : 1;\n    for (var i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    var from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop refs.\n * @type {?}\n */\nvar _uniqueIdCounter = 0;\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nvar DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nvar  /**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nDropListRef = /** @class */ (function () {\n    function DropListRef(element, _dragDropRegistry, _document) {\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * Unique ID for the drop list.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 8.0.0\n         */\n        this.id = \"cdk-drop-list-ref-\" + _uniqueIdCounter++;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = true;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        function () { return true; });\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        _dragDropRegistry.registerDropContainer(this);\n        this._document = _document;\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    DropListRef.prototype.dispose = /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    function () {\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    };\n    /** Whether an item from this list is currently being dragged. */\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    DropListRef.prototype.isDragging = /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._isDragging;\n    };\n    /** Starts dragging an item. */\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    DropListRef.prototype.start = /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        function (sibling) { return sibling._startReceiving(_this); }));\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     */\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype.enter = /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        var newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        var activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        var currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        var placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        var newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            var element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item: item, container: this, currentIndex: this.getItemIndex(item) });\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    DropListRef.prototype.exit = /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    function (item) {\n        this._reset();\n        this.exited.next({ item: item, container: this });\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @breaking-change 9.0.0 `distance` parameter to become required.\n     */\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 9.0.0 `distance` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?=} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    DropListRef.prototype.drop = /**\n     * Drops an item into this container.\n     * \\@breaking-change 9.0.0 `distance` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?=} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    function (item, currentIndex, previousContainer, isPointerOverContainer, distance) {\n        if (distance === void 0) { distance = { x: 0, y: 0 }; }\n        this._reset();\n        this.dropped.next({\n            item: item,\n            currentIndex: currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer: previousContainer,\n            isPointerOverContainer: isPointerOverContainer,\n            distance: distance\n        });\n    };\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    DropListRef.prototype.withItems = /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    function (items) {\n        var _this = this;\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) { return item._withDropContainer((/** @type {?} */ (_this))); }));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    };\n    /** Sets the layout direction of the drop list. */\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    DropListRef.prototype.withDirection = /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    function (direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    DropListRef.prototype.connectedTo = /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    function (connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    DropListRef.prototype.withOrientation = /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    function (orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    DropListRef.prototype.getItemIndex = /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    function (item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        function (currentItem) { return currentItem.drag === item; }));\n    };\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    DropListRef.prototype.isReceiving = /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    function () {\n        return this._activeSiblings.size > 0;\n    };\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    DropListRef.prototype._sortItem = /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        var siblings = this._itemPositions;\n        /** @type {?} */\n        var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        function (currentItem) { return currentItem.drag === item; }));\n        /** @type {?} */\n        var siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        var currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        var newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        var delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        var oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item: item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        function (sibling, index) {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            var isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            var offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    };\n    /** Caches the position of the drop list. */\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._cacheOwnPosition = /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._clientRect = coerceElement(this.element).getBoundingClientRect();\n    };\n    /** Refreshes the position cache of the items and sibling containers. */\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._cacheItemPositions = /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        function (drag) {\n            /** @type {?} */\n            var elementToMeasure = _this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            /** @type {?} */\n            var clientRect = elementToMeasure.getBoundingClientRect();\n            return {\n                drag: drag,\n                offset: 0,\n                // We need to clone the `clientRect` here, because all the values on it are readonly\n                // and we need to be able to update them. Also we can't use a spread here, because\n                // the values on a `ClientRect` aren't own properties. See:\n                // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n                clientRect: {\n                    top: clientRect.top,\n                    right: clientRect.right,\n                    bottom: clientRect.bottom,\n                    left: clientRect.left,\n                    width: clientRect.width,\n                    height: clientRect.height\n                }\n            };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        function (a, b) {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    };\n    /** Resets the container to its initial state. */\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._reset = /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) { return item.getRootElement().style.transform = ''; }));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        function (sibling) { return sibling._stopReceiving(_this); }));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n    };\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    DropListRef.prototype._getSiblingOffsetPx = /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    function (currentIndex, siblings, delta) {\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        var immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            var start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            var end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    };\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @param pointerX Coordinates along the X axis.\n     * @param pointerY Coordinates along the Y axis.\n     */\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._isPointerNearDropContainer = /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    function (pointerX, pointerY) {\n        var _a = this._clientRect, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;\n        /** @type {?} */\n        var xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        var yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    };\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    DropListRef.prototype._getItemOffsetPx = /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    function (currentPosition, newPosition, delta) {\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    };\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    DropListRef.prototype._getItemIndexFromPointerPosition = /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, delta) {\n        var _this = this;\n        /** @type {?} */\n        var isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        function (_a, _, array) {\n            var drag = _a.drag, clientRect = _a.clientRect;\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                var direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    };\n    /** Caches the current items in the list and their positions. */\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    DropListRef.prototype._cacheItems = /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheOwnPosition();\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._isOverContainer = /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    };\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._getSiblingContainerFromPosition = /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        function (sibling) { return sibling._canReceive(item, x, y); }));\n    };\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    DropListRef.prototype._canReceive = /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n            return false;\n        }\n        /** @type {?} */\n        var elementFromPoint = (/** @type {?} */ (this._document.elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        var nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    };\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    DropListRef.prototype._startReceiving = /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    function (sibling) {\n        /** @type {?} */\n        var activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n        }\n    };\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    DropListRef.prototype._stopReceiving = /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    function (sibling) {\n        this._activeSiblings.delete(sibling);\n    };\n    return DropListRef;\n}());\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (var i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nvar activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nvar DragDropRegistry = /** @class */ (function () {\n    function DragDropRegistry(_ngZone, _document) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            if (_this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    DragDropRegistry.prototype.registerDropContainer = /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    function (drop) {\n        if (!this._dropInstances.has(drop)) {\n            if (this.getDropContainer(drop.id)) {\n                throw Error(\"Drop instance with id \\\"\" + drop.id + \"\\\" has already been registered.\");\n            }\n            this._dropInstances.add(drop);\n        }\n    };\n    /** Adds a drag item instance to the registry. */\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.registerDragItem = /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        var _this = this;\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            function () {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    };\n    /** Removes a drop container from the registry. */\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    DragDropRegistry.prototype.removeDropContainer = /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    function (drop) {\n        this._dropInstances.delete(drop);\n    };\n    /** Removes a drag item instance from the registry. */\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.removeDragItem = /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    };\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    DragDropRegistry.prototype.startDragging = /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    function (drag, event) {\n        var _this = this;\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            var isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                function (e) { return _this.pointerMove.next((/** @type {?} */ (e))); }),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                function (e) { return _this.pointerUp.next((/** @type {?} */ (e))); }),\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // TODO(crisbeto): prevent mouse wheel scrolling while\n            // dragging until we've set up proper scroll handling.\n            if (!isTouchEvent) {\n                this._globalListeners.set('wheel', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            function () {\n                _this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                function (config, name) {\n                    _this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    };\n    /** Stops dragging a drag item instance. */\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.stopDragging = /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    };\n    /** Gets whether a drag item instance is currently being dragged. */\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    DragDropRegistry.prototype.isDragging = /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    function (drag) {\n        return this._activeDragInstances.has(drag);\n    };\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    DragDropRegistry.prototype.getDropContainer = /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        return Array.from(this._dropInstances).find((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        function (instance) { return instance.id === id; }));\n    };\n    /**\n     * @return {?}\n     */\n    DragDropRegistry.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        function (instance) { return _this.removeDragItem(instance); }));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        function (instance) { return _this.removeDropContainer(instance); }));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    };\n    /** Clears out the global event listeners from the `document`. */\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    DragDropRegistry.prototype._clearGlobalListeners = /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        function (config, name) {\n            _this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    };\n    DragDropRegistry.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    DragDropRegistry.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ DragDropRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n    return DragDropRegistry;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nvar DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nvar DragDrop = /** @class */ (function () {\n    function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    DragDrop.prototype.createDrag = /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    function (element, config) {\n        if (config === void 0) { config = DEFAULT_CONFIG; }\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    };\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    DragDrop.prototype.createDropList = /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    function (element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document);\n    };\n    DragDrop.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    DragDrop.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewportRuler },\n        { type: DragDropRegistry }\n    ]; };\n    /** @nocollapse */ DragDrop.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n    return DragDrop;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nvar CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * \\@breaking-change 8.0.0\n * @type {?}\n */\nvar CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nvar CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nvar CdkDragHandle = /** @class */ (function () {\n    function CdkDragHandle(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n        /** Whether starting to drag through this handle is disabled. */\n        get: /**\n         * Whether starting to drag through this handle is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._stateChanges.next(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDragHandle.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.complete();\n    };\n    CdkDragHandle.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle'\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragHandle.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n    ]; };\n    CdkDragHandle.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n    };\n    return CdkDragHandle;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nvar CdkDragPlaceholder = /** @class */ (function () {\n    function CdkDragPlaceholder(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CdkDragPlaceholder.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragPlaceholder.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPlaceholder.propDecorators = {\n        data: [{ type: Input }]\n    };\n    return CdkDragPlaceholder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nvar CdkDragPreview = /** @class */ (function () {\n    function CdkDragPreview(templateRef) {\n        this.templateRef = templateRef;\n    }\n    CdkDragPreview.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[cdkDragPreview]'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDragPreview.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPreview.propDecorators = {\n        data: [{ type: Input }]\n    };\n    return CdkDragPreview;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nvar CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nvar CdkDrag = /** @class */ (function () {\n    function CdkDrag(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        var _this = this;\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        function (observer) {\n            /** @type {?} */\n            var subscription = _this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            function (movedEvent) { return ({\n                source: _this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }); }))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            function () {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    Object.defineProperty(CdkDrag.prototype, \"boundaryElementSelector\", {\n        /**\n         * Selector that will be used to determine the element to which the draggable's position will\n         * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n         * element has been found\n         * @deprecated Use `boundaryElement` instead.\n         * @breaking-change 9.0.0\n         */\n        get: /**\n         * Selector that will be used to determine the element to which the draggable's position will\n         * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n         * element has been found\n         * @deprecated Use `boundaryElement` instead.\n         * \\@breaking-change 9.0.0\n         * @return {?}\n         */\n        function () {\n            return typeof this.boundaryElement === 'string' ? this.boundaryElement : (/** @type {?} */ (undefined));\n        },\n        set: /**\n         * @param {?} selector\n         * @return {?}\n         */\n        function (selector) {\n            this.boundaryElement = selector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: /**\n         * Whether starting to drag this element is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._dragRef.disabled = this._disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    CdkDrag.prototype.getPlaceholderElement = /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getPlaceholderElement();\n    };\n    /** Returns the root draggable element. */\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    CdkDrag.prototype.getRootElement = /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getRootElement();\n    };\n    /** Resets a standalone drag item to its initial position. */\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    CdkDrag.prototype.reset = /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    function () {\n        this._dragRef.reset();\n    };\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    CdkDrag.prototype.getFreeDragPosition = /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    function () {\n        return this._dragRef.getFreeDragPosition();\n    };\n    /**\n     * @return {?}\n     */\n    CdkDrag.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this._updateRootElement();\n            // Listen for any newly-added handles.\n            _this._handles.changes.pipe(startWith(_this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            function (handles) {\n                /** @type {?} */\n                var childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                function (handle) { return handle._parentDrag === _this; }))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                function (handle) { return handle.element; }));\n                _this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            function (handles) {\n                return merge.apply(void 0, handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                function (item) { return item._stateChanges; })));\n            })), takeUntil(_this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            function (handleInstance) {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                var dragRef = _this._dragRef;\n                /** @type {?} */\n                var handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (_this.freeDragPosition) {\n                _this._dragRef.setFreeDragPosition(_this.freeDragPosition);\n            }\n        }));\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkDrag.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        var positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkDrag.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    };\n    /** Syncs the root element with the `DragRef`. */\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    CdkDrag.prototype._updateRootElement = /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var element = this.element.nativeElement;\n        /** @type {?} */\n        var rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(\"cdkDrag must be attached to an element node. \" +\n                (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    };\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    CdkDrag.prototype._getBoundaryElement = /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        var element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    };\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDrag.prototype._syncInputs = /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                var dir = _this._dir;\n                /** @type {?} */\n                var placeholder = _this._placeholderTemplate ? {\n                    template: _this._placeholderTemplate.templateRef,\n                    context: _this._placeholderTemplate.data,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                var preview = _this._previewTemplate ? {\n                    template: _this._previewTemplate.templateRef,\n                    context: _this._previewTemplate.data,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref.dragStartDelay = coerceNumberProperty(_this.dragStartDelay);\n                ref.constrainPosition = _this.constrainPosition;\n                ref\n                    .withBoundaryElement(_this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    };\n    /** Handles the events from the underlying `DragRef`. */\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDrag.prototype._handleEvents = /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.started.emit({ source: _this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.released.emit({ source: _this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.ended.emit({ source: _this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.entered.emit({\n                container: event.container.data,\n                item: _this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.exited.emit({\n                container: event.container.data,\n                item: _this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: _this,\n                distance: event.distance\n            });\n        }));\n    };\n    CdkDrag.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDrag.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: DragDrop },\n        { type: ChangeDetectorRef }\n    ]; };\n    CdkDrag.propDecorators = {\n        _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n        _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview, { static: false },] }],\n        _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder, { static: false },] }],\n        data: [{ type: Input, args: ['cdkDragData',] }],\n        lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n        rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n        boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n        dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n        freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n        disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n        constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n        started: [{ type: Output, args: ['cdkDragStarted',] }],\n        released: [{ type: Output, args: ['cdkDragReleased',] }],\n        ended: [{ type: Output, args: ['cdkDragEnded',] }],\n        entered: [{ type: Output, args: ['cdkDragEntered',] }],\n        exited: [{ type: Output, args: ['cdkDragExited',] }],\n        dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n        moved: [{ type: Output, args: ['cdkDragMoved',] }]\n    };\n    return CdkDrag;\n}());\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    var currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nvar CdkDropListGroup = /** @class */ (function () {\n    function CdkDropListGroup() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        get: /**\n         * Whether starting a dragging sequence from inside this group is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDropListGroup.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._items.clear();\n    };\n    CdkDropListGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                },] },\n    ];\n    CdkDropListGroup.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n    };\n    return CdkDropListGroup;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nvar _uniqueIdCounter$1 = 0;\nvar ɵ0 = undefined;\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nvar CdkDropList = /** @class */ (function () {\n    function CdkDropList(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        var _this = this;\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = \"cdk-drop-list-\" + _uniqueIdCounter$1++;\n        this._disabled = false;\n        this._sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        function () { return true; });\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        function (drag, drop) {\n            return _this.enterPredicate(drag.data, drop.data);\n        });\n        this._syncInputs(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from this container is disabled. */\n        get: /**\n         * Whether starting a dragging sequence from this container is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (!!this._group && this._group.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkDropList.prototype, \"sortingDisabled\", {\n        /** Whether sorting within this drop list is disabled. */\n        get: /**\n         * Whether sorting within this drop list is disabled.\n         * @return {?}\n         */\n        function () { return this._sortingDisabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._sortingDisabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkDropList.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) {\n            _this._dropListRef.withItems(items.map((/**\n             * @param {?} drag\n             * @return {?}\n             */\n            function (drag) { return drag._dragRef; })));\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    CdkDropList.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /** Starts dragging an item. */\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    CdkDropList.prototype.start = /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    function () {\n        this._dropListRef.start();\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     */\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    CdkDropList.prototype.drop = /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    function (item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, ((/** @type {?} */ (previousContainer)))._dropListRef, isPointerOverContainer);\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     */\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype.enter = /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    CdkDropList.prototype.exit = /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    function (item) {\n        this._dropListRef.exit(item._dragRef);\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    CdkDropList.prototype.getItemIndex = /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    function (item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    };\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._sortItem = /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    function (item, pointerX, pointerY, pointerDelta) {\n        return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n    };\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._getSiblingContainerFromPosition = /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    function (item, x, y) {\n        /** @type {?} */\n        var result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n        return result ? result.data : null;\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    CdkDropList.prototype._isOverContainer = /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    function (x, y) {\n        return this._dropListRef._isOverContainer(x, y);\n    };\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDropList.prototype._syncInputs = /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return ref.withDirection(value); }));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var siblings = coerceArray(_this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            function (drop) {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    function (list) { return list.id === drop; })))) : drop;\n            }));\n            if (_this._group) {\n                _this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                function (drop) {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = _this.disabled;\n            ref.lockAxis = _this.lockAxis;\n            ref.sortingDisabled = _this.sortingDisabled;\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            function (drop) { return drop && drop !== _this; })).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            function (list) { return list._dropListRef; })))\n                .withOrientation(_this.orientation);\n        }));\n    };\n    /** Handles events from the underlying DropListRef. */\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    CdkDropList.prototype._handleEvents = /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.entered.emit({\n                container: _this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.exited.emit({\n                container: _this,\n                item: event.item.data\n            });\n            _this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: _this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            _this._changeDetectorRef.markForCheck();\n        }));\n    };\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     */\n    CdkDropList._dropLists = [];\n    CdkDropList.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CdkDropListGroup, useValue: ɵ0 },\n                        { provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    CdkDropList.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DragDrop },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n    ]; };\n    CdkDropList.propDecorators = {\n        _draggables: [{ type: ContentChildren, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    function () { return CdkDrag; })), {\n                        // Explicitly set to false since some of the logic below makes assumptions about it.\n                        // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n                        descendants: false\n                    },] }],\n        connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n        data: [{ type: Input, args: ['cdkDropListData',] }],\n        orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n        id: [{ type: Input }],\n        lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n        disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n        sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n        enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n        dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n        entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n        exited: [{ type: Output, args: ['cdkDropListExited',] }],\n        sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n    };\n    return CdkDropList;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DragDropModule = /** @class */ (function () {\n    function DragDropModule() {\n    }\n    DragDropModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    exports: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    providers: [\n                        DragDrop,\n                    ]\n                },] },\n    ];\n    return DragDropModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, CDK_DRAG_PARENT as ɵb };\n//# sourceMappingURL=drag-drop.es5.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nvar styles = [\"[_nghost-%COMP%]{margin-bottom:24px;display:block}\"];\nexport { styles as styles };\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"./breadcrumbs.component.scss.shim.ngstyle\";\nimport * as i1 from \"@angular/core\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../../node_modules/@angular/material/icon/typings/index.ngfactory\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/flex-layout/core\";\nimport * as i8 from \"./breadcrumbs.component\";\nvar styles_BreadcrumbsComponent = [i0.styles];\nvar RenderType_BreadcrumbsComponent = i1.ɵcrt({ encapsulation: 0, styles: styles_BreadcrumbsComponent, data: {} });\nexport { RenderType_BreadcrumbsComponent as RenderType_BreadcrumbsComponent };\nfunction View_BreadcrumbsComponent_2(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 3, \"a\", [[\"class\", \"crumb link\"]], [[1, \"target\", 0], [8, \"href\", 4]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i1.ɵnov(_v, 1).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i1.ɵdid(1, 671744, null, 0, i2.RouterLinkWithHref, [i2.Router, i2.ActivatedRoute, i3.LocationStrategy], { routerLink: [0, \"routerLink\"] }, null), i1.ɵpad(2, 1), (_l()(), i1.ɵted(3, null, [\"\", \"\"]))], function (_ck, _v) { var currVal_2 = _ck(_v, 2, 0, _v.parent.context.$implicit.link); _ck(_v, 1, 0, currVal_2); }, function (_ck, _v) { var currVal_0 = i1.ɵnov(_v, 1).target; var currVal_1 = i1.ɵnov(_v, 1).href; _ck(_v, 0, 0, currVal_0, currVal_1); var currVal_3 = _v.parent.context.$implicit.name; _ck(_v, 3, 0, currVal_3); }); }\nfunction View_BreadcrumbsComponent_3(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"div\", [[\"class\", \"link\"]], null, null, null, null, null)), (_l()(), i1.ɵted(1, null, [\"\", \"\"]))], null, function (_ck, _v) { var currVal_0 = _v.parent.context.$implicit.name; _ck(_v, 1, 0, currVal_0); }); }\nfunction View_BreadcrumbsComponent_4(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 2, \"mat-icon\", [[\"class\", \"chevron mat-icon notranslate\"], [\"role\", \"img\"]], [[2, \"mat-icon-inline\", null], [2, \"mat-icon-no-color\", null]], null, null, i4.View_MatIcon_0, i4.RenderType_MatIcon)), i1.ɵdid(1, 9158656, null, 0, i5.MatIcon, [i1.ElementRef, i5.MatIconRegistry, [8, null], [2, i5.MAT_ICON_LOCATION]], null, null), (_l()(), i1.ɵted(-1, 0, [\"chevron_right\"]))], function (_ck, _v) { _ck(_v, 1, 0); }, function (_ck, _v) { var currVal_0 = i1.ɵnov(_v, 1).inline; var currVal_1 = (((i1.ɵnov(_v, 1).color !== \"primary\") && (i1.ɵnov(_v, 1).color !== \"accent\")) && (i1.ɵnov(_v, 1).color !== \"warn\")); _ck(_v, 0, 0, currVal_0, currVal_1); }); }\nfunction View_BreadcrumbsComponent_1(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 9, \"div\", [[\"class\", \"crumb\"], [\"fxLayout\", \"row\"], [\"fxLayoutAlign\", \"start center\"]], null, null, null, null, null)), i1.ɵdid(1, 671744, null, 0, i6.DefaultLayoutDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutStyleBuilder], i7.MediaMarshaller], { fxLayout: [0, \"fxLayout\"] }, null), i1.ɵdid(2, 671744, null, 0, i6.DefaultLayoutAlignDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutAlignStyleBuilder], i7.MediaMarshaller], { fxLayoutAlign: [0, \"fxLayoutAlign\"] }, null), i1.ɵdid(3, 16384, null, 0, i3.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_2)), i1.ɵdid(5, 278528, null, 0, i3.NgSwitchCase, [i1.ViewContainerRef, i1.TemplateRef, i3.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_3)), i1.ɵdid(7, 16384, null, 0, i3.NgSwitchDefault, [i1.ViewContainerRef, i1.TemplateRef, i3.NgSwitch], null, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_4)), i1.ɵdid(9, 16384, null, 0, i3.NgIf, [i1.ViewContainerRef, i1.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var currVal_0 = \"row\"; _ck(_v, 1, 0, currVal_0); var currVal_1 = \"start center\"; _ck(_v, 2, 0, currVal_1); var currVal_2 = !!_v.context.$implicit.link; _ck(_v, 3, 0, currVal_2); var currVal_3 = true; _ck(_v, 5, 0, currVal_3); var currVal_4 = !_v.context.last; _ck(_v, 9, 0, currVal_4); }, null); }\nexport function View_BreadcrumbsComponent_0(_l) { return i1.ɵvid(2, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"div\", [[\"class\", \"title\"]], null, null, null, null, null)), (_l()(), i1.ɵted(1, null, [\"\", \"\"])), (_l()(), i1.ɵeld(2, 0, null, null, 4, \"div\", [[\"class\", \"crumbs\"], [\"fxLayout\", \"row\"], [\"fxLayoutAlign\", \"start center\"]], null, null, null, null, null)), i1.ɵdid(3, 671744, null, 0, i6.DefaultLayoutDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutStyleBuilder], i7.MediaMarshaller], { fxLayout: [0, \"fxLayout\"] }, null), i1.ɵdid(4, 671744, null, 0, i6.DefaultLayoutAlignDirective, [i1.ElementRef, i7.StyleUtils, [2, i6.LayoutAlignStyleBuilder], i7.MediaMarshaller], { fxLayoutAlign: [0, \"fxLayoutAlign\"] }, null), (_l()(), i1.ɵand(16777216, null, null, 1, null, View_BreadcrumbsComponent_1)), i1.ɵdid(6, 278528, null, 0, i3.NgForOf, [i1.ViewContainerRef, i1.TemplateRef, i1.IterableDiffers], { ngForOf: [0, \"ngForOf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_1 = \"row\"; _ck(_v, 3, 0, currVal_1); var currVal_2 = \"start center\"; _ck(_v, 4, 0, currVal_2); var currVal_3 = _co.crumbs; _ck(_v, 6, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.title; _ck(_v, 1, 0, currVal_0); }); }\nexport function View_BreadcrumbsComponent_Host_0(_l) { return i1.ɵvid(0, [(_l()(), i1.ɵeld(0, 0, null, null, 1, \"ngx-breadcrumbs\", [], null, null, null, View_BreadcrumbsComponent_0, RenderType_BreadcrumbsComponent)), i1.ɵdid(1, 114688, null, 0, i8.BreadcrumbsComponent, [], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar BreadcrumbsComponentNgFactory = i1.ɵccf(\"ngx-breadcrumbs\", i8.BreadcrumbsComponent, View_BreadcrumbsComponent_Host_0, { title: \"title\", crumbs: \"crumbs\" }, {}, []);\nexport { BreadcrumbsComponentNgFactory as BreadcrumbsComponentNgFactory };\n","<div class=\"title\">{{ title }}</div>\n<div class=\"crumbs\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  <div\n    class=\"crumb\"\n    *ngFor=\"let crumb of crumbs; let last = last\"\n    [ngSwitch]=\"!!crumb.link\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n  >\n    <a *ngSwitchCase=\"true\" class=\"crumb link\" [routerLink]=\"[crumb.link]\">{{ crumb.name }}</a>\n    <div *ngSwitchDefault class=\"link\">{{ crumb.name }}</div>\n    <mat-icon *ngIf=\"!last\" class=\"chevron\">chevron_right</mat-icon>\n  </div>\n</div>\n"],"sourceRoot":""}