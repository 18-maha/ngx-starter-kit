{"version":3,"sources":["webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity-form.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.component.ts.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.service.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.model.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/index.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/shared-material-date.module.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/shared-material-date.module.ts.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/rxjs/_esm5/internal/operators/retry.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm5/datepicker.es5.js.pre-build-optimizer.js"],"names":["EntityFormComponent","data","dialogRef","this","title","entity","payload","prototype","ngOnInit","buildForm","submit","close","entityForm","value","entity_component_EntitiesComponent","EntitiesComponent","entityService","dataSource","table_es5","selection","collections_es5","showToolbar","showColumnFilter","showActionColumn","maxSelectable","actionColumn","selectColumn","loading$","_this","update","subscribe","filterPredicate","changed","pipe","Object","operators_filter","sc","added","length","_","selected","src","deselect","shift","ngOnDestroy","ngAfterViewInit","sort","paginator","getById","id","delete","item","concatMap","updateOrCreate","put","post","getData","getAll","map","result","isAllFilteredRowsSelected","filteredData","every","isSelected","isMasterToggleChecked","hasValue","isMasterToggleIndeterminate","masterToggle","clear","forEach","select","applyFilter","filterValue","trim","toLowerCase","filter","defineProperty","get","_displayedColumns","columns","column","visible","x","property","unshift","concat","enumerable","configurable","selectRow","toggle","showDetails","undefined","getRouteAnimation","outlet","activatedRouteData","toggleColumnVisibility","event","stopPropagation","stopImmediatePropagation","stringToDate","date","s","String","parseISO","entity_service_EntityService","EntityService","httpClient","baseUrl","environment","API_BASE_URL","loadingSubject","BehaviorSubject","asObservable","entityPath","catchError","handleError","findAll","order","skip","take","next","params","http","set","toString","retry","finalize","console","log","error","errorMessage","ErrorEvent","message","status","throwError","convertToJson","body","temporalFunctionToJson","Date","toJSON","format","jsonBody","JSON","stringify","Entity","init","assign","EntityColumnDef","header","displayFn","__webpack_require__","d","__webpack_exports__","SharedMaterialDateModule","Éµ0","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","tslib__WEBPACK_IMPORTED_MODULE_0__","_Subscriber__WEBPACK_IMPORTED_MODULE_1__","count","source","lift","RetryOperator","call","subscriber","RetrySubscriber","_super","destination","err","isStopped","_unsubscribeAndRecycle","MatDatepickerModule","MatCalendarHeader","MatCalendar","MatCalendarBody","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContent","MatDatepicker","MatDatepickerInput","MatDatepickerIntl","MatDatepickerToggle","MatMonthView","MatYearView","MatMultiYearView","_angular_core__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__","_angular_material_core__WEBPACK_IMPORTED_MODULE_8__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__","tslib__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__","_angular_forms__WEBPACK_IMPORTED_MODULE_14__","createMissingDateImplError","provider","Error","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","ngInjectableDef","factory","token","providedIn","MatCalendarCell","displayValue","ariaLabel","enabled","cssClasses","_elementRef","_ngZone","numCols","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","cell","emit","ngOnChanges","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","_isActiveCell","rowIndex","colIndex","cellNumber","_focusActiveCell","runOutsideAngular","onStable","nativeElement","querySelector","focus","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","long","i","narrow","_weekdays","slice","_activeDate","today","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","isRtl","_isRtl","keyCode","addCalendarDays","getDate","getNumDaysInMonth","altKey","addCalendarYears","addCalendarMonths","dateFilter","preventDefault","compareDate","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","markForCheck","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","cellClasses","dateClass","d1","d2","obj","isDateInstance","isValid","yearSelected","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","_yearSelected","month","min","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","monthSelected","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_intl","calendar","changeDetectorRef","stateChanges","currentView","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","startView","_intlChanges","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","focusActiveCell","unsubscribe","complete","change","firstChange","view","_getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","sameDate","_yearSelectedInMultiYearView","normalizedYear","_monthSelectedInYearView","normalizedMonth","_userSelected","_goToDateInView","datepickerUid","overlay","scrollStrategies","reposition","MatDatepickerContentBase","elementRef","_calendar","_dialog","_overlay","_viewContainerRef","scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","_validSelected","_focusedElementBeforeOpen","_inputSubscription","EMPTY","_disabledChange","_selectedChanged","_scrollStrategy","_datepickerInput","_color","_getThemePalette","_disabled","disabled","newValue","open","max","_dateFilter","_popupRef","dispose","_popupComponentRef","oldValue","_selectYear","_selectMonth","_registerInput","input","_valueChange","activeElement","touchUi","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","setTimeout","direction","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","create","overlayElement","setAttribute","backdropClick","detachments","keydownEvents","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","color","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_validator","compose","localeChanges","_datepicker","_value","oldDate","_formatValue","_min","_max","element","blur","registerOnValidatorChange","fn","validate","c","getPopupConnectionElementRef","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_onKeydown","readOnly","_onInput","_onChange","_onBlur","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","_watchStateChanges","_open","datepickerDisabled","inputDisabled","datepickerToggled"],"mappings":"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","file":"11-es5.d75757d7339f7bb99f8f.js","sourcesContent":["import { Inject, OnInit } from '@angular/core';\nimport { Entity } from './entity.model';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\n\nexport abstract class EntityFormComponent<TEntity extends Entity> implements OnInit {\n  title: string;\n  entity: TEntity;\n  entityForm: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) protected data: { title: string; payload: TEntity },\n    protected dialogRef: MatDialogRef<EntityFormComponent<TEntity>>,\n  ) {\n    this.title = data.title;\n    this.entity = data.payload;\n  }\n\n  abstract buildForm(entity: TEntity);\n\n  ngOnInit() {\n    this.buildForm(this.entity);\n  }\n\n  submit() {\n    this.dialogRef.close(this.entityForm.value as Partial<TEntity>);\n  }\n}\n","import { AfterViewInit, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { EntityService } from './entity.service';\nimport { Entity, EntityColumnDef } from './entity.model';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { EntityFormComponent } from './entity-form.component';\nimport { ComponentType } from '@angular/cdk/portal/typings/portal';\nimport { SelectionChange, SelectionModel } from '@angular/cdk/collections';\nimport { untilDestroy } from '@ngx-starter-kit/ngx-utils';\nimport { parseISO } from 'date-fns/esm';\n\nexport abstract class EntitiesComponent<TEntity extends Entity, TService extends EntityService<TEntity>>\n  implements OnInit, OnDestroy, AfterViewInit {\n  dataSource = new MatTableDataSource<TEntity>([]);\n  selection = new SelectionModel<TEntity>(false, []);\n\n  @ViewChild(MatPaginator)\n  paginator: MatPaginator;\n  @ViewChild(MatSort)\n  sort: MatSort;\n  @ViewChild('filter')\n  filterRef: ElementRef;\n\n  readonly loading$;\n  readonly columns: Array<EntityColumnDef<TEntity>>;\n  readonly title?: string = null;\n  readonly showToolbar?: boolean = false;\n  readonly showColumnFilter?: boolean = false;\n  readonly showActionColumn?: boolean = false;\n  readonly maxSelectable?: number = 1;\n  readonly actionColumn?: string = 'Actions';\n  readonly selectColumn?: string = 'select';\n  // TODO: make them optional abstract\n  readonly formRef?: ComponentType<EntityFormComponent<TEntity>>;\n  getNewEntity?(): TEntity;\n  filterPredicate?(entity: TEntity, filter: string): boolean;\n  // TODO: make them optional abstract end\n\n  constructor(protected entityService: TService) {\n    this.loading$ = entityService.loading$;\n  }\n\n  ngOnInit() {\n    this.selection = new SelectionModel<TEntity>(this.maxSelectable > 1, []);\n\n    this.update().subscribe();\n    if (this.filterPredicate) {\n      this.dataSource.filterPredicate = this.filterPredicate;\n    }\n\n    // remove first selected entity if more then max selected.\n    if (this.maxSelectable > 1) {\n      // is multi select mode?\n      this.selection.changed\n        .pipe(\n          // tap(console.log),\n          filter((sc: SelectionChange<TEntity>) => sc.added.length > 0),\n          filter(_ => this.selection.selected.length > this.maxSelectable),\n          untilDestroy(this),\n        )\n        .subscribe(_ => this.selection.deselect(this.selection.selected.shift()));\n    }\n\n    // fromEvent(this.filterRef.nativeElement, 'keyup')\n    //   .pipe(\n    //     debounceTime(150),\n    //     distinctUntilChanged()\n    //   ).subscribe(() => {\n    //   this.paginator.pageIndex = 0;\n    //   this.applyFilter(this.filterRef.nativeElement.value)\n    // });\n  }\n\n  ngOnDestroy() {}\n\n  ngAfterViewInit() {\n    // Needs to be set up after the view is initialized since the data source will look at the sort\n    // and paginator's initial values to know what data should be rendered.\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  getById(id: number) {\n    return this.entityService.getById(id);\n  }\n\n  delete(item: TEntity) {\n    return this.entityService.delete(item.id).pipe(concatMap(_ => this.update()));\n  }\n\n  updateOrCreate(entity: TEntity, id: number) {\n    if (id) {\n      return this.entityService.put(id, entity).pipe(concatMap(_ => this.update()));\n    } else {\n      return this.entityService.post(entity).pipe(concatMap(_ => this.update()));\n    }\n  }\n\n  /**\n   * Overwrite this method, to get the data your way.\n   */\n  getData(): Observable<TEntity[]> {\n    return this.entityService.getAll();\n  }\n\n  protected update() {\n    return this.getData().pipe(\n      map(result => {\n        this.dataSource = new MatTableDataSource<TEntity>(result);\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n        // return nothing as we don't need.\n        // return result\n      }),\n    );\n  }\n\n  /** Whether all filtered rows are selected. */\n  isAllFilteredRowsSelected() {\n    return this.dataSource.filteredData.every(data => this.selection.isSelected(data));\n  }\n\n  /** Whether the selection it totally matches the filtered rows. */\n  isMasterToggleChecked() {\n    return (\n      this.selection.hasValue() &&\n      this.isAllFilteredRowsSelected() &&\n      this.selection.selected.length >= this.dataSource.filteredData.length\n    );\n  }\n\n  /**\n   * Whether there is a selection that doesn't capture all the\n   * filtered rows there are no filtered rows displayed.\n   */\n  isMasterToggleIndeterminate() {\n    return this.selection.hasValue() && (!this.isAllFilteredRowsSelected() || !this.dataSource.filteredData.length);\n  }\n\n  /** Selects all filtered rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isMasterToggleChecked()) {\n      this.selection.clear();\n    } else {\n      this.dataSource.filteredData.forEach(data => this.selection.select(data));\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n\n  get displayedColumns(): string[] {\n    // prettier-ignore\n    let _displayedColumns = this.columns\n      .filter(column => column.visible)\n      .map(x => x.property);\n\n    if (this.maxSelectable > 0) {\n      _displayedColumns.unshift(this.selectColumn);\n    }\n    if (this.showActionColumn) {\n      _displayedColumns = _displayedColumns.concat(this.actionColumn);\n    }\n    return _displayedColumns;\n  }\n\n  selectRow(entity: TEntity) {\n    if (this.maxSelectable > 0) {\n      this.selection.toggle(entity);\n      if (this.selection.isSelected(entity)) {\n        this.showDetails(entity);\n      } else {\n        this.showDetails(undefined);\n      }\n    }\n  }\n\n  getRouteAnimation(outlet) {\n    return outlet.activatedRouteData['depth'] || 5;\n    // return outlet.isActivated ? outlet.activatedRoute : ''\n  }\n\n  /**\n   * will be called with entity or undefined\n   */\n  showDetails(entity: TEntity) {}\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  protected stringToDate(date: string | number | Date): number | Date {\n    const isString = s => typeof s === 'string' || s instanceof String;\n    return isString(date) ? parseISO(date) : date;\n  }\n}\n","import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { untilDestroy } from '@ngx-starter-kit/ngx-utils';\nimport { parseISO } from 'date-fns/esm';\nvar EntitiesComponent = /** @class */ (function () {\n    // TODO: make them optional abstract end\n    function EntitiesComponent(entityService) {\n        this.entityService = entityService;\n        this.dataSource = new MatTableDataSource([]);\n        this.selection = new SelectionModel(false, []);\n        this.title = null;\n        this.showToolbar = false;\n        this.showColumnFilter = false;\n        this.showActionColumn = false;\n        this.maxSelectable = 1;\n        this.actionColumn = 'Actions';\n        this.selectColumn = 'select';\n        this.loading$ = entityService.loading$;\n    }\n    EntitiesComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.selection = new SelectionModel(this.maxSelectable > 1, []);\n        this.update().subscribe();\n        if (this.filterPredicate) {\n            this.dataSource.filterPredicate = this.filterPredicate;\n        }\n        // remove first selected entity if more then max selected.\n        if (this.maxSelectable > 1) {\n            // is multi select mode?\n            this.selection.changed\n                .pipe(\n            // tap(console.log),\n            filter(function (sc) { return sc.added.length > 0; }), filter(function (_) { return _this.selection.selected.length > _this.maxSelectable; }), untilDestroy(this))\n                .subscribe(function (_) { return _this.selection.deselect(_this.selection.selected.shift()); });\n        }\n        // fromEvent(this.filterRef.nativeElement, 'keyup')\n        //   .pipe(\n        //     debounceTime(150),\n        //     distinctUntilChanged()\n        //   ).subscribe(() => {\n        //   this.paginator.pageIndex = 0;\n        //   this.applyFilter(this.filterRef.nativeElement.value)\n        // });\n    };\n    EntitiesComponent.prototype.ngOnDestroy = function () { };\n    EntitiesComponent.prototype.ngAfterViewInit = function () {\n        // Needs to be set up after the view is initialized since the data source will look at the sort\n        // and paginator's initial values to know what data should be rendered.\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n    };\n    EntitiesComponent.prototype.getById = function (id) {\n        return this.entityService.getById(id);\n    };\n    EntitiesComponent.prototype.delete = function (item) {\n        var _this = this;\n        return this.entityService.delete(item.id).pipe(concatMap(function (_) { return _this.update(); }));\n    };\n    EntitiesComponent.prototype.updateOrCreate = function (entity, id) {\n        var _this = this;\n        if (id) {\n            return this.entityService.put(id, entity).pipe(concatMap(function (_) { return _this.update(); }));\n        }\n        else {\n            return this.entityService.post(entity).pipe(concatMap(function (_) { return _this.update(); }));\n        }\n    };\n    /**\n     * Overwrite this method, to get the data your way.\n     */\n    EntitiesComponent.prototype.getData = function () {\n        return this.entityService.getAll();\n    };\n    EntitiesComponent.prototype.update = function () {\n        var _this = this;\n        return this.getData().pipe(map(function (result) {\n            _this.dataSource = new MatTableDataSource(result);\n            _this.dataSource.sort = _this.sort;\n            _this.dataSource.paginator = _this.paginator;\n            // return nothing as we don't need.\n            // return result\n        }));\n    };\n    /** Whether all filtered rows are selected. */\n    EntitiesComponent.prototype.isAllFilteredRowsSelected = function () {\n        var _this = this;\n        return this.dataSource.filteredData.every(function (data) { return _this.selection.isSelected(data); });\n    };\n    /** Whether the selection it totally matches the filtered rows. */\n    EntitiesComponent.prototype.isMasterToggleChecked = function () {\n        return (this.selection.hasValue() &&\n            this.isAllFilteredRowsSelected() &&\n            this.selection.selected.length >= this.dataSource.filteredData.length);\n    };\n    /**\n     * Whether there is a selection that doesn't capture all the\n     * filtered rows there are no filtered rows displayed.\n     */\n    EntitiesComponent.prototype.isMasterToggleIndeterminate = function () {\n        return this.selection.hasValue() && (!this.isAllFilteredRowsSelected() || !this.dataSource.filteredData.length);\n    };\n    /** Selects all filtered rows if they are not all selected; otherwise clear selection. */\n    EntitiesComponent.prototype.masterToggle = function () {\n        var _this = this;\n        if (this.isMasterToggleChecked()) {\n            this.selection.clear();\n        }\n        else {\n            this.dataSource.filteredData.forEach(function (data) { return _this.selection.select(data); });\n        }\n    };\n    EntitiesComponent.prototype.applyFilter = function (filterValue) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n        this.dataSource.filter = filterValue;\n    };\n    Object.defineProperty(EntitiesComponent.prototype, \"displayedColumns\", {\n        get: function () {\n            // prettier-ignore\n            var _displayedColumns = this.columns\n                .filter(function (column) { return column.visible; })\n                .map(function (x) { return x.property; });\n            if (this.maxSelectable > 0) {\n                _displayedColumns.unshift(this.selectColumn);\n            }\n            if (this.showActionColumn) {\n                _displayedColumns = _displayedColumns.concat(this.actionColumn);\n            }\n            return _displayedColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EntitiesComponent.prototype.selectRow = function (entity) {\n        if (this.maxSelectable > 0) {\n            this.selection.toggle(entity);\n            if (this.selection.isSelected(entity)) {\n                this.showDetails(entity);\n            }\n            else {\n                this.showDetails(undefined);\n            }\n        }\n    };\n    EntitiesComponent.prototype.getRouteAnimation = function (outlet) {\n        return outlet.activatedRouteData['depth'] || 5;\n        // return outlet.isActivated ? outlet.activatedRoute : ''\n    };\n    /**\n     * will be called with entity or undefined\n     */\n    EntitiesComponent.prototype.showDetails = function (entity) { };\n    EntitiesComponent.prototype.toggleColumnVisibility = function (column, event) {\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        column.visible = !column.visible;\n    };\n    EntitiesComponent.prototype.stringToDate = function (date) {\n        var isString = function (s) { return typeof s === 'string' || s instanceof String; };\n        return isString(date) ? parseISO(date) : date;\n    };\n    return EntitiesComponent;\n}());\nexport { EntitiesComponent };\n","import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Entity } from './entity.model';\nimport { catchError, finalize, retry } from 'rxjs/operators';\nimport { format } from 'date-fns/esm';\nimport { IPagination } from './pagination';\n\nexport interface Filter {\n  [name: string]: string | string[];\n}\n\nexport abstract class EntityService<T extends Entity> {\n  protected readonly baseUrl = environment.API_BASE_URL;\n  protected loadingSubject = new BehaviorSubject<boolean>(false);\n  public loading$ = this.loadingSubject.asObservable();\n\n  protected abstract entityPath: string;\n\n  constructor(protected httpClient: HttpClient) {}\n\n  getById(id: number | string) {\n    // this.loadingSubject.next(true);\n    return this.httpClient.get<T>(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      // finalize(() => this.loadingSubject.next(false))\n    );\n  }\n\n    // findAll(filter: Filter, order = 'DESC', skip = 0, take = 100): Observable<IPagination<T>> | Observable<never> {\n    findAll(filter: Filter, order = 'DESC', skip = 0, take = 100): Observable<T[]> | Observable<never> {\n    this.loadingSubject.next(true);\n    return this.httpClient\n      .get<T[]>(`${this.baseUrl}/${this.entityPath}`, {\n        params: new HttpParams()\n          .set('filter', 'filter TODO')\n          .set('order', order)\n          .set('skip', skip.toString())\n          .set('take', take.toString()),\n      })\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError),\n        finalize(() => this.loadingSubject.next(false)),\n      );\n  }\n\n  // getAll(): Observable<IPagination<T>> {\n  getAll(): Observable<T[]> {\n    this.loadingSubject.next(true);\n    return this.httpClient.get<T[]>(`${this.baseUrl}/${this.entityPath}`).pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  delete(id: number | string) {\n    this.loadingSubject.next(true);\n    return this.httpClient.delete(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  post(entity: T) {\n    this.loadingSubject.next(true);\n    return this.httpClient.post(`${this.baseUrl}/${this.entityPath}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  put(id: number | string, entity: T) {\n    console.log(entity);\n    this.loadingSubject.next(true);\n    return this.httpClient.put(`${this.baseUrl}/${this.entityPath}/${id}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  protected handleError(error: HttpErrorResponse) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (typeof error === 'string') {\n      errorMessage = error;\n    } else {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${error.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${error.status}, with body ${error.message}`;\n      }\n    }\n    console.error(error);\n    // return an ErrorObservable with a user-facing error message\n    return throwError(errorMessage);\n  }\n\n  protected convertToJson(body: any) {\n    const temporalFunctionToJson = Date.prototype.toJSON;\n    Date.prototype.toJSON = function() {\n      return format(this, 'YYYY-MM-DD');\n    };\n\n    const jsonBody = JSON.stringify(body);\n\n    Date.prototype.toJSON = temporalFunctionToJson;\n    return jsonBody;\n  }\n}\n","import { TemplateRef } from '@angular/core';\n\nexport abstract class Entity {\n  abstract get id(): number | string;\n  [key: string]: any;\n  constructor(init?: Partial<Entity>) {\n    Object.assign(this, init);\n  }\n}\n\nexport class EntityColumnDef<T> {\n  readonly property: string;\n  readonly header = this.property;\n  public visible = true;\n  readonly sticky?: 'start' | 'end';\n  readonly template?: TemplateRef<any>;\n  readonly displayFn = (entity: T) => entity[this.property];\n\n  public constructor(init?: Partial<EntityColumnDef<T>>) {\n    Object.assign(this, init);\n  }\n}\n","export { SharedModule } from './lib/shared.module';\nexport { SharedFlexLayoutModule } from './lib/shared-flex-layout.module';\nexport { SharedPerfectScrollbarModule } from './lib/shared-perfect-scrollbar.module';\nexport { SharedMaterialDateModule } from './lib/shared-material-date.module';\n\nexport * from './lib/containers/entity/entity-form.component';\nexport * from './lib/containers/entity/entity.component';\nexport * from './lib/containers/entity/entity.service';\nexport * from './lib/containers/entity/entity.model';\nexport * from './lib/containers/entity/pagination';\n","import { NgModule } from '@angular/core';\n\nimport { MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatDateFormats, MatNativeDateModule } from '@angular/material/core';\nimport {MatDatepickerModule  } from '@angular/material/datepicker';\n\n\nconst MODULE_EXPORTS = [MatDatepickerModule, MatNativeDateModule];\n\nconst DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: 'LL',\n  },\n  display: {\n    dateInput: 'LL',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@NgModule({\n  exports: MODULE_EXPORTS,\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: DATE_FORMATS }, { provide: MAT_DATE_LOCALE, useValue: 'en-GB' }],\n})\nexport class SharedMaterialDateModule {}\n","import { MatDateFormats, MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nvar MODULE_EXPORTS = [MatDatepickerModule, MatNativeDateModule];\nvar DATE_FORMATS = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'LL',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\nvar Éµ0 = DATE_FORMATS;\nvar SharedMaterialDateModule = /** @class */ (function () {\n    function SharedMaterialDateModule() {\n    }\n    return SharedMaterialDateModule;\n}());\nexport { SharedMaterialDateModule };\nexport { Éµ0 };\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, ElementRef, NgZone, InjectionToken, ViewContainerRef, Directive, Attribute, ContentChild, ÉµÉµdefineInjectable } from '@angular/core';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, SPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n    return Error(\"MatDatepicker: No provider found for \" + provider + \". You must import one of the following \" +\n        \"modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a \" +\n        \"custom implementation.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Datepicker data that requires internationalization.\n */\nvar MatDatepickerIntl = /** @class */ (function () {\n    function MatDatepickerIntl() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the calendar popup (used by screen readers).\n         */\n        this.calendarLabel = 'Calendar';\n        /**\n         * A label for the button used to open the calendar popup (used by screen readers).\n         */\n        this.openCalendarLabel = 'Open calendar';\n        /**\n         * A label for the previous month button (used by screen readers).\n         */\n        this.prevMonthLabel = 'Previous month';\n        /**\n         * A label for the next month button (used by screen readers).\n         */\n        this.nextMonthLabel = 'Next month';\n        /**\n         * A label for the previous year button (used by screen readers).\n         */\n        this.prevYearLabel = 'Previous year';\n        /**\n         * A label for the next year button (used by screen readers).\n         */\n        this.nextYearLabel = 'Next year';\n        /**\n         * A label for the previous multi-year button (used by screen readers).\n         */\n        this.prevMultiYearLabel = 'Previous 20 years';\n        /**\n         * A label for the next multi-year button (used by screen readers).\n         */\n        this.nextMultiYearLabel = 'Next 20 years';\n        /**\n         * A label for the 'switch to month view' button (used by screen readers).\n         */\n        this.switchToMonthViewLabel = 'Choose date';\n        /**\n         * A label for the 'switch to year view' button (used by screen readers).\n         */\n        this.switchToMultiYearViewLabel = 'Choose month and year';\n    }\n    MatDatepickerIntl.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ MatDatepickerIntl.ngInjectableDef = ÉµÉµdefineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: \"root\" });\n    return MatDatepickerIntl;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nvar  /**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nMatCalendarCell = /** @class */ (function () {\n    function MatCalendarCell(value, displayValue, ariaLabel, enabled, cssClasses) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n    }\n    return MatCalendarCell;\n}());\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nvar MatCalendarBody = /** @class */ (function () {\n    function MatCalendarBody(_elementRef, _ngZone) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * The number of columns in the table.\n         */\n        this.numCols = 7;\n        /**\n         * The cell number of the active cell in the table.\n         */\n        this.activeCell = 0;\n        /**\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n         * maintained even as the table resizes.\n         */\n        this.cellAspectRatio = 1;\n        /**\n         * Emits when a new value is selected.\n         */\n        this.selectedValueChange = new EventEmitter();\n    }\n    /**\n     * @param {?} cell\n     * @return {?}\n     */\n    MatCalendarBody.prototype._cellClicked = /**\n     * @param {?} cell\n     * @return {?}\n     */\n    function (cell) {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatCalendarBody.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var columnChanges = changes['numCols'];\n        var _a = this, rows = _a.rows, numCols = _a.numCols;\n        if (changes['rows'] || columnChanges) {\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n            this._cellPadding = 50 * this.cellAspectRatio / numCols + \"%\";\n        }\n        if (columnChanges || !this._cellWidth) {\n            this._cellWidth = 100 / numCols + \"%\";\n        }\n    };\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    MatCalendarBody.prototype._isActiveCell = /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    function (rowIndex, colIndex) {\n        /** @type {?} */\n        var cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatCalendarBody.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            _this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            function () {\n                /** @type {?} */\n                var activeCell = _this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            }));\n        }));\n    };\n    MatCalendarBody.decorators = [\n        { type: Component, args: [{selector: '[mat-calendar-body]',\n                    template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [ngClass]=\\\"item.cssClasses\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" [attr.aria-selected]=\\\"selectedValue === item.value\\\" (click)=\\\"_cellClicked(item)\\\" [style.width]=\\\"_cellWidth\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n                    styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n                    host: {\n                        'class': 'mat-calendar-body',\n                        'role': 'grid',\n                        'aria-readonly': 'true'\n                    },\n                    exportAs: 'matCalendarBody',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatCalendarBody.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone }\n    ]; };\n    MatCalendarBody.propDecorators = {\n        label: [{ type: Input }],\n        rows: [{ type: Input }],\n        todayValue: [{ type: Input }],\n        selectedValue: [{ type: Input }],\n        labelMinRequiredCells: [{ type: Input }],\n        numCols: [{ type: Input }],\n        activeCell: [{ type: Input }],\n        cellAspectRatio: [{ type: Input }],\n        selectedValueChange: [{ type: Output }]\n    };\n    return MatCalendarBody;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatMonthView = /** @class */ (function () {\n    function MatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new date is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        /** @type {?} */\n        var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        /** @type {?} */\n        var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        /** @type {?} */\n        var longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        /** @type {?} */\n        var weekdays = longWeekdays.map((/**\n         * @param {?} long\n         * @param {?} i\n         * @return {?}\n         */\n        function (long, i) {\n            return { long: long, narrow: narrowWeekdays[i] };\n        }));\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatMonthView.prototype, \"activeDate\", {\n        /**\n         * The date to display in this month view (everything other than the month and year is ignored).\n         */\n        get: /**\n         * The date to display in this month view (everything other than the month and year is ignored).\n         * @return {?}\n         */\n        function () { return this._activeDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var oldActiveDate = this._activeDate;\n            /** @type {?} */\n            var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMonthView.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._selectedDate = this._getDateInCurrentMonth(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMonthView.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMonthView.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatMonthView.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._init();\n    };\n    /** Handles when a new date is selected. */\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._dateSelected = /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        if (this._selectedDate != date) {\n            /** @type {?} */\n            var selectedYear = this._dateAdapter.getYear(this.activeDate);\n            /** @type {?} */\n            var selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n            /** @type {?} */\n            var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit();\n    };\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatMonthView.prototype._handleCalendarBodyKeydown = /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        var oldActiveDate = this._activeDate;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n                    this._userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /** Initializes this month view. */\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    MatMonthView.prototype._init = /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    function () {\n        this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n        this._monthLabel =\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                .toLocaleUpperCase();\n        /** @type {?} */\n        var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatMonthView.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        this._matCalendarBody._focusActiveCell();\n    };\n    /** Creates MatCalendarCells for the dates in this month. */\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n    MatMonthView.prototype._createWeekCells = /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        /** @type {?} */\n        var dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            /** @type {?} */\n            var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            /** @type {?} */\n            var enabled = this._shouldEnableDate(date);\n            /** @type {?} */\n            var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            /** @type {?} */\n            var cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n            this._weeks[this._weeks.length - 1]\n                .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    };\n    /** Date filter for the month */\n    /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._shouldEnableDate = /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n    };\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    MatMonthView.prototype._getDateInCurrentMonth = /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n            this._dateAdapter.getDate(date) : null;\n    };\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    MatMonthView.prototype._hasSameMonthAndYear = /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    function (d1, d2) {\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatMonthView.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Determines whether the user has the RTL layout direction. */\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    MatMonthView.prototype._isRtl = /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._dir && this._dir.value === 'rtl';\n    };\n    MatMonthView.decorators = [\n        { type: Component, args: [{selector: 'mat-month-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                    exportAs: 'matMonthView',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    MatMonthView.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatMonthView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        _userSelection: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n    };\n    return MatMonthView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar yearsPerPage = 24;\n/** @type {?} */\nvar yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatMultiYearView = /** @class */ (function () {\n    function MatMultiYearView(_changeDetectorRef, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new year is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected year. This doesn't imply a change on the selected date\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatMultiYearView.prototype, \"activeDate\", {\n        /** The date to display in this multi-year view (everything other than the year is ignored). */\n        get: /**\n         * The date to display in this multi-year view (everything other than the year is ignored).\n         * @return {?}\n         */\n        function () { return this._activeDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var oldActiveDate = this._activeDate;\n            /** @type {?} */\n            var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n                Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMultiYearView.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMultiYearView.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMultiYearView.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatMultiYearView.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._init();\n    };\n    /** Initializes this multi-year view. */\n    /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n    MatMultiYearView.prototype._init = /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n        /** @type {?} */\n        var activeYear = this._dateAdapter.getYear(this._activeDate);\n        /** @type {?} */\n        var activeOffset = activeYear % yearsPerPage;\n        this._years = [];\n        for (var i = 0, row = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length == yearsPerRow) {\n                this._years.push(row.map((/**\n                 * @param {?} year\n                 * @return {?}\n                 */\n                function (year) { return _this._createCellForYear(year); })));\n                row = [];\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Handles when a new year is selected. */\n    /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n    MatMultiYearView.prototype._yearSelected = /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) {\n        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n        /** @type {?} */\n        var month = this._dateAdapter.getMonth(this.activeDate);\n        /** @type {?} */\n        var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    };\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatMultiYearView.prototype._handleCalendarBodyKeydown = /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        var oldActiveDate = this._activeDate;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /**\n     * @return {?}\n     */\n    MatMultiYearView.prototype._getActiveCell = /**\n     * @return {?}\n     */\n    function () {\n        return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatMultiYearView.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        this._matCalendarBody._focusActiveCell();\n    };\n    /** Creates an MatCalendarCell for the given year. */\n    /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    MatMultiYearView.prototype._createCellForYear = /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) {\n        /** @type {?} */\n        var yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n        return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n    };\n    /** Whether the given year is enabled. */\n    /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    MatMultiYearView.prototype._shouldEnableYear = /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    function (year) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        var firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n        // If any date in the year is enabled count the year as enabled.\n        for (var date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatMultiYearView.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Determines whether the user has the RTL layout direction. */\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    MatMultiYearView.prototype._isRtl = /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._dir && this._dir.value === 'rtl';\n    };\n    MatMultiYearView.decorators = [\n        { type: Component, args: [{selector: 'mat-multi-year-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [rows]=\\\"_years\\\" [todayValue]=\\\"_todayYear\\\" [selectedValue]=\\\"_selectedYear\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_getActiveCell()\\\" (selectedValueChange)=\\\"_yearSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                    exportAs: 'matMultiYearView',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    MatMultiYearView.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatMultiYearView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        yearSelected: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n    };\n    return MatMultiYearView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatYearView = /** @class */ (function () {\n    function MatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new month is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected month. This doesn't imply a change on the selected date\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    Object.defineProperty(MatYearView.prototype, \"activeDate\", {\n        /** The date to display in this year view (everything other than the year is ignored). */\n        get: /**\n         * The date to display in this year view (everything other than the year is ignored).\n         * @return {?}\n         */\n        function () { return this._activeDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var oldActiveDate = this._activeDate;\n            /** @type {?} */\n            var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n                this._init();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatYearView.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatYearView.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatYearView.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatYearView.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._init();\n    };\n    /** Handles when a new month is selected. */\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._monthSelected = /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    function (month) {\n        /** @type {?} */\n        var normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        this.monthSelected.emit(normalizedDate);\n        /** @type {?} */\n        var daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    };\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    MatYearView.prototype._handleCalendarBodyKeydown = /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        var oldActiveDate = this._activeDate;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    };\n    /** Initializes this year view. */\n    /**\n     * Initializes this year view.\n     * @return {?}\n     */\n    MatYearView.prototype._init = /**\n     * Initializes this year view.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        /** @type {?} */\n        var monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((/**\n         * @param {?} row\n         * @return {?}\n         */\n        function (row) { return row.map((/**\n         * @param {?} month\n         * @return {?}\n         */\n        function (month) { return _this._createCellForMonth(month, monthNames[month]); })); }));\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Focuses the active cell after the microtask queue is empty. */\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    MatYearView.prototype._focusActiveCell = /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    function () {\n        this._matCalendarBody._focusActiveCell();\n    };\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    MatYearView.prototype._getMonthInCurrentYear = /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n            this._dateAdapter.getMonth(date) : null;\n    };\n    /** Creates an MatCalendarCell for the given month. */\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    MatYearView.prototype._createCellForMonth = /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    function (month, monthName) {\n        /** @type {?} */\n        var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n    };\n    /** Whether the given month is enabled. */\n    /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._shouldEnableMonth = /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n    function (month) {\n        /** @type {?} */\n        var activeYear = this._dateAdapter.getYear(this.activeDate);\n        if (month === undefined || month === null ||\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (var date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._isYearAndMonthAfterMaxDate = /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    function (year, month) {\n        if (this.maxDate) {\n            /** @type {?} */\n            var maxYear = this._dateAdapter.getYear(this.maxDate);\n            /** @type {?} */\n            var maxMonth = this._dateAdapter.getMonth(this.maxDate);\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n        return false;\n    };\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    MatYearView.prototype._isYearAndMonthBeforeMinDate = /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    function (year, month) {\n        if (this.minDate) {\n            /** @type {?} */\n            var minYear = this._dateAdapter.getYear(this.minDate);\n            /** @type {?} */\n            var minMonth = this._dateAdapter.getMonth(this.minDate);\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n        return false;\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatYearView.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Determines whether the user has the RTL layout direction. */\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    MatYearView.prototype._isRtl = /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._dir && this._dir.value === 'rtl';\n    };\n    MatYearView.decorators = [\n        { type: Component, args: [{selector: 'mat-year-view',\n                    template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                    exportAs: 'matYearView',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    /** @nocollapse */\n    MatYearView.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatYearView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n    };\n    return MatYearView;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default header for MatCalendar\n * @template D\n */\nvar MatCalendarHeader = /** @class */ (function () {\n    function MatCalendarHeader(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n        this._intl = _intl;\n        this.calendar = calendar;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this.calendar.stateChanges.subscribe((/**\n         * @return {?}\n         */\n        function () { return changeDetectorRef.markForCheck(); }));\n    }\n    Object.defineProperty(MatCalendarHeader.prototype, \"periodButtonText\", {\n        /** The label for the current calendar view. */\n        get: /**\n         * The label for the current calendar view.\n         * @return {?}\n         */\n        function () {\n            if (this.calendar.currentView == 'month') {\n                return this._dateAdapter\n                    .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                    .toLocaleUpperCase();\n            }\n            if (this.calendar.currentView == 'year') {\n                return this._dateAdapter.getYearName(this.calendar.activeDate);\n            }\n            /** @type {?} */\n            var activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n            /** @type {?} */\n            var firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n            /** @type {?} */\n            var lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n            return firstYearInView + \" \\u2013 \" + lastYearInView;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendarHeader.prototype, \"periodButtonLabel\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.calendar.currentView == 'month' ?\n                this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendarHeader.prototype, \"prevButtonLabel\", {\n        /** The label for the previous button. */\n        get: /**\n         * The label for the previous button.\n         * @return {?}\n         */\n        function () {\n            return {\n                'month': this._intl.prevMonthLabel,\n                'year': this._intl.prevYearLabel,\n                'multi-year': this._intl.prevMultiYearLabel\n            }[this.calendar.currentView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendarHeader.prototype, \"nextButtonLabel\", {\n        /** The label for the next button. */\n        get: /**\n         * The label for the next button.\n         * @return {?}\n         */\n        function () {\n            return {\n                'month': this._intl.nextMonthLabel,\n                'year': this._intl.nextYearLabel,\n                'multi-year': this._intl.nextMultiYearLabel\n            }[this.calendar.currentView];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Handles user clicks on the period label. */\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.currentPeriodClicked = /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    function () {\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    };\n    /** Handles user clicks on the previous button. */\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.previousClicked = /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    function () {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    };\n    /** Handles user clicks on the next button. */\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.nextClicked = /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    function () {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    };\n    /** Whether the previous period button is enabled. */\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.previousEnabled = /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    function () {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n        return !this.calendar.minDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    };\n    /** Whether the next period button is enabled. */\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    MatCalendarHeader.prototype.nextEnabled = /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    function () {\n        return !this.calendar.maxDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    };\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    MatCalendarHeader.prototype._isSameView = /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    function (date1, date2) {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n        }\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n            Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n    };\n    MatCalendarHeader.decorators = [\n        { type: Component, args: [{selector: 'mat-calendar-header',\n                    template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\" (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\" cdkAriaLive=\\\"polite\\\">{{periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><ng-content></ng-content><button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\" [attr.aria-label]=\\\"prevButtonLabel\\\"></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\" [attr.aria-label]=\\\"nextButtonLabel\\\"></button></div></div>\",\n                    exportAs: 'matCalendarHeader',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatCalendarHeader.ctorParameters = function () { return [\n        { type: MatDatepickerIntl },\n        { type: MatCalendar, decorators: [{ type: Inject, args: [forwardRef((/**\n                         * @return {?}\n                         */\n                        function () { return MatCalendar; })),] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: ChangeDetectorRef }\n    ]; };\n    return MatCalendarHeader;\n}());\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\nvar MatCalendar = /** @class */ (function () {\n    function MatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n        var _this = this;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Used for scheduling that focus should be moved to the active cell on the next tick.\n         * We need to schedule it, rather than do it immediately, because we have to wait\n         * for Angular to re-evaluate the view children.\n         */\n        this._moveFocusOnNextTick = false;\n        /**\n         * Whether the calendar should be started in month or year view.\n         */\n        this.startView = 'month';\n        /**\n         * Emits when the currently selected date changes.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the year chosen in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits the month chosen in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits whenever there is a state change that the header may need to respond to.\n         */\n        this.stateChanges = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._intlChanges = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _changeDetectorRef.markForCheck();\n            _this.stateChanges.next();\n        }));\n    }\n    Object.defineProperty(MatCalendar.prototype, \"startAt\", {\n        /** A date representing the period (month or year) to start the calendar in. */\n        get: /**\n         * A date representing the period (month or year) to start the calendar in.\n         * @return {?}\n         */\n        function () { return this._startAt; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._selected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () { return this._minDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () { return this._maxDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"activeDate\", {\n        /**\n         * The current active date. This determines which time period is shown and which date is\n         * highlighted when using keyboard navigation.\n         */\n        get: /**\n         * The current active date. This determines which time period is shown and which date is\n         * highlighted when using keyboard navigation.\n         * @return {?}\n         */\n        function () { return this._clampedActiveDate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n            this.stateChanges.next();\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCalendar.prototype, \"currentView\", {\n        /** Whether the calendar is in month view. */\n        get: /**\n         * Whether the calendar is in month view.\n         * @return {?}\n         */\n        function () { return this._currentView; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._currentView = value;\n            this._moveFocusOnNextTick = true;\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n        this.activeDate = this.startAt || this._dateAdapter.today();\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngAfterViewChecked = /**\n     * @return {?}\n     */\n    function () {\n        if (this._moveFocusOnNextTick) {\n            this._moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatCalendar.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        /** @type {?} */\n        var change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n        if (change && !change.firstChange) {\n            /** @type {?} */\n            var view = this._getCurrentViewComponent();\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                this._changeDetectorRef.detectChanges();\n                view._init();\n            }\n        }\n        this.stateChanges.next();\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype.focusActiveCell = /**\n     * @return {?}\n     */\n    function () {\n        this._getCurrentViewComponent()._focusActiveCell();\n    };\n    /** Updates today's date after an update of the active date */\n    /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n    MatCalendar.prototype.updateTodaysDate = /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n        view.ngAfterContentInit();\n    };\n    /** Handles date selection in the month view. */\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    MatCalendar.prototype._dateSelected = /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        if (!this._dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    };\n    /** Handles year selection in the multiyear view. */\n    /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    MatCalendar.prototype._yearSelectedInMultiYearView = /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    function (normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    };\n    /** Handles month selection in the year view. */\n    /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    MatCalendar.prototype._monthSelectedInYearView = /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    function (normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    };\n    /**\n     * @return {?}\n     */\n    MatCalendar.prototype._userSelected = /**\n     * @return {?}\n     */\n    function () {\n        this._userSelection.emit();\n    };\n    /** Handles year/month selection in the multi-year/year views. */\n    /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n    MatCalendar.prototype._goToDateInView = /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n    function (date, view) {\n        this.activeDate = date;\n        this.currentView = view;\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatCalendar.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Returns the component instance that corresponds to the current calendar view. */\n    /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n    MatCalendar.prototype._getCurrentViewComponent = /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this.monthView || this.yearView || this.multiYearView;\n    };\n    MatCalendar.decorators = [\n        { type: Component, args: [{selector: 'mat-calendar',\n                    template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template><div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\"><mat-month-view *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" [dateClass]=\\\"dateClass\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchCase=\\\"'year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\\\"'multi-year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view></div>\",\n                    styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n                    host: {\n                        'class': 'mat-calendar',\n                    },\n                    exportAs: 'matCalendar',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatCalendar.ctorParameters = function () { return [\n        { type: MatDatepickerIntl },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: ChangeDetectorRef }\n    ]; };\n    MatCalendar.propDecorators = {\n        headerComponent: [{ type: Input }],\n        startAt: [{ type: Input }],\n        startView: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        yearSelected: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        _userSelection: [{ type: Output }],\n        monthView: [{ type: ViewChild, args: [MatMonthView, { static: false },] }],\n        yearView: [{ type: ViewChild, args: [MatYearView, { static: false },] }],\n        multiYearView: [{ type: ViewChild, args: [MatMultiYearView, { static: false },] }]\n    };\n    return MatCalendar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\nvar matDatepickerAnimations = {\n    /**\n     * Transforms the height of the datepicker's calendar.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * Fades in the content of the calendar.\n     */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n        // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\nvar datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\nvar MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    function () { return overlay.scrollStrategies.reposition(); });\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nMatDatepickerContentBase = /** @class */ (function () {\n    function MatDatepickerContentBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatDatepickerContentBase;\n}());\n/** @type {?} */\nvar _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\nvar MatDatepickerContent = /** @class */ (function (_super) {\n    __extends(MatDatepickerContent, _super);\n    function MatDatepickerContent(elementRef) {\n        return _super.call(this, elementRef) || this;\n    }\n    /**\n     * @return {?}\n     */\n    MatDatepickerContent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        this._calendar.focusActiveCell();\n    };\n    MatDatepickerContent.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker-content',\n                    template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\" [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\" (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\" (monthSelected)=\\\"datepicker._selectMonth($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n                    styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n                    host: {\n                        'class': 'mat-datepicker-content',\n                        '[@transformPanel]': '\"enter\"',\n                        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                    },\n                    animations: [\n                        matDatepickerAnimations.transformPanel,\n                        matDatepickerAnimations.fadeInCalendar,\n                    ],\n                    exportAs: 'matDatepickerContent',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    inputs: ['color'],\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepickerContent.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    MatDatepickerContent.propDecorators = {\n        _calendar: [{ type: ViewChild, args: [MatCalendar, { static: false },] }]\n    };\n    return MatDatepickerContent;\n}(_MatDatepickerContentMixinBase));\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\nvar MatDatepicker = /** @class */ (function () {\n    function MatDatepicker(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._document = _document;\n        /**\n         * The view that the calendar should start in.\n         */\n        this.startView = 'month';\n        this._touchUi = false;\n        /**\n         * Emits selected year in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits selected month in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when the datepicker has been opened.\n         */\n        this.openedStream = new EventEmitter();\n        /**\n         * Emits when the datepicker has been closed.\n         */\n        this.closedStream = new EventEmitter();\n        this._opened = false;\n        /**\n         * The id for the datepicker calendar.\n         */\n        this.id = \"mat-datepicker-\" + datepickerUid++;\n        this._validSelected = null;\n        /**\n         * The element that was focused before the datepicker was opened.\n         */\n        this._focusedElementBeforeOpen = null;\n        /**\n         * Subscription to value changes in the associated input element.\n         */\n        this._inputSubscription = Subscription.EMPTY;\n        /**\n         * Emits when the datepicker is disabled.\n         */\n        this._disabledChange = new Subject();\n        /**\n         * Emits new selected date when selected date changes.\n         */\n        this._selectedChanged = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    Object.defineProperty(MatDatepicker.prototype, \"startAt\", {\n        /** The date to open the calendar to initially. */\n        get: /**\n         * The date to open the calendar to initially.\n         * @return {?}\n         */\n        function () {\n            // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n            // selected value is.\n            return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"color\", {\n        /** Color palette to use on the datepicker's calendar. */\n        get: /**\n         * Color palette to use on the datepicker's calendar.\n         * @return {?}\n         */\n        function () {\n            return this._color ||\n                (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._color = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"touchUi\", {\n        /**\n         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n         * than a popup and elements have more padding to allow for bigger touch targets.\n         */\n        get: /**\n         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n         * than a popup and elements have more padding to allow for bigger touch targets.\n         * @return {?}\n         */\n        function () { return this._touchUi; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._touchUi = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"disabled\", {\n        /** Whether the datepicker pop-up should be disabled. */\n        get: /**\n         * Whether the datepicker pop-up should be disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled === undefined && this._datepickerInput ?\n                this._datepickerInput.disabled : !!this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._disabledChange.next(newValue);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"opened\", {\n        /** Whether the calendar is open. */\n        get: /**\n         * Whether the calendar is open.\n         * @return {?}\n         */\n        function () { return this._opened; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { value ? this.open() : this.close(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_selected\", {\n        /** The currently selected date. */\n        get: /**\n         * The currently selected date.\n         * @return {?}\n         */\n        function () { return this._validSelected; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._validSelected = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_minDate\", {\n        /** The minimum selectable date. */\n        get: /**\n         * The minimum selectable date.\n         * @return {?}\n         */\n        function () {\n            return this._datepickerInput && this._datepickerInput.min;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_maxDate\", {\n        /** The maximum selectable date. */\n        get: /**\n         * The maximum selectable date.\n         * @return {?}\n         */\n        function () {\n            return this._datepickerInput && this._datepickerInput.max;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepicker.prototype, \"_dateFilter\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._datepickerInput && this._datepickerInput._dateFilter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDatepicker.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.close();\n        this._inputSubscription.unsubscribe();\n        this._disabledChange.complete();\n        if (this._popupRef) {\n            this._popupRef.dispose();\n            this._popupComponentRef = null;\n        }\n    };\n    /** Selects the given date */\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    MatDatepicker.prototype.select = /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    function (date) {\n        /** @type {?} */\n        var oldValue = this._selected;\n        this._selected = date;\n        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n            this._selectedChanged.next(date);\n        }\n    };\n    /** Emits the selected year in multiyear view */\n    /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    MatDatepicker.prototype._selectYear = /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    function (normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    };\n    /** Emits selected month in year view */\n    /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    MatDatepicker.prototype._selectMonth = /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    function (normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    };\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    MatDatepicker.prototype._registerInput = /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    function (input) {\n        var _this = this;\n        if (this._datepickerInput) {\n            throw Error('A MatDatepicker can only be associated with a single input.');\n        }\n        this._datepickerInput = input;\n        this._inputSubscription =\n            this._datepickerInput._valueChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return _this._selected = value; }));\n    };\n    /** Open the calendar. */\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n    MatDatepicker.prototype.open = /**\n     * Open the calendar.\n     * @return {?}\n     */\n    function () {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this._datepickerInput) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        if (this._document) {\n            this._focusedElementBeforeOpen = this._document.activeElement;\n        }\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\n        this._opened = true;\n        this.openedStream.emit();\n    };\n    /** Close the calendar. */\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n    MatDatepicker.prototype.close = /**\n     * Close the calendar.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._opened) {\n            return;\n        }\n        if (this._popupRef && this._popupRef.hasAttached()) {\n            this._popupRef.detach();\n        }\n        if (this._dialogRef) {\n            this._dialogRef.close();\n            this._dialogRef = null;\n        }\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\n            this._calendarPortal.detach();\n        }\n        /** @type {?} */\n        var completeClose = (/**\n         * @return {?}\n         */\n        function () {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (_this._opened) {\n                _this._opened = false;\n                _this.closedStream.emit();\n                _this._focusedElementBeforeOpen = null;\n            }\n        });\n        if (this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this._focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    };\n    /** Open the calendar as a dialog. */\n    /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._openAsDialog = /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Usually this would be handled by `open` which ensures that we can only have one overlay\n        // open at a time, however since we reset the variables in async handlers some overlays\n        // may slip through if the user opens and closes multiple times in quick succession (e.g.\n        // by holding down the enter key).\n        if (this._dialogRef) {\n            this._dialogRef.close();\n        }\n        this._dialogRef = this._dialog.open(MatDatepickerContent, {\n            direction: this._dir ? this._dir.value : 'ltr',\n            viewContainerRef: this._viewContainerRef,\n            panelClass: 'mat-datepicker-dialog',\n        });\n        this._dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.close(); }));\n        this._dialogRef.componentInstance.datepicker = this;\n        this._setColor();\n    };\n    /** Open the calendar as a popup. */\n    /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._openAsPopup = /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._calendarPortal) {\n            this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        }\n        if (!this._popupRef) {\n            this._createPopup();\n        }\n        if (!this._popupRef.hasAttached()) {\n            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n            this._popupComponentRef.instance.datepicker = this;\n            this._setColor();\n            // Update the position once the calendar has rendered.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            function () {\n                _this._popupRef.updatePosition();\n            }));\n        }\n    };\n    /** Create the popup. */\n    /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._createPopup = /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig({\n            positionStrategy: this._createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mat-overlay-transparent-backdrop',\n            direction: this._dir,\n            scrollStrategy: this._scrollStrategy(),\n            panelClass: 'mat-datepicker-popup',\n        });\n        this._popupRef = this._overlay.create(overlayConfig);\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\n            return event.keyCode === ESCAPE ||\n                (_this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n        })))).subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.close(); }));\n    };\n    /** Create the popup PositionStrategy. */\n    /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._createPopupPositionStrategy = /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._overlay.position()\n            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n            .withTransformOriginOn('.mat-datepicker-content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatDatepicker.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    /** Passes the current theme color along to the calendar overlay. */\n    /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n    MatDatepicker.prototype._setColor = /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var color = this.color;\n        if (this._popupComponentRef) {\n            this._popupComponentRef.instance.color = color;\n        }\n        if (this._dialogRef) {\n            this._dialogRef.componentInstance.color = color;\n        }\n    };\n    MatDatepicker.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker',\n                    template: '',\n                    exportAs: 'matDatepicker',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepicker.ctorParameters = function () { return [\n        { type: MatDialog },\n        { type: Overlay },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    MatDatepicker.propDecorators = {\n        calendarHeaderComponent: [{ type: Input }],\n        startAt: [{ type: Input }],\n        startView: [{ type: Input }],\n        color: [{ type: Input }],\n        touchUi: [{ type: Input }],\n        disabled: [{ type: Input }],\n        yearSelected: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        panelClass: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        openedStream: [{ type: Output, args: ['opened',] }],\n        closedStream: [{ type: Output, args: ['closed',] }],\n        opened: [{ type: Input }]\n    };\n    return MatDatepicker;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return MatDatepickerInput; })),\n    multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return MatDatepickerInput; })),\n    multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nvar  /**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nMatDatepickerInputEvent = /** @class */ (function () {\n    function MatDatepickerInputEvent(target, targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n    return MatDatepickerInputEvent;\n}());\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\nvar MatDatepickerInput = /** @class */ (function () {\n    function MatDatepickerInput(_elementRef, _dateAdapter, _dateFormats, _formField) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._formField = _formField;\n        /**\n         * Emits when a `change` event is fired on this `<input>`.\n         */\n        this.dateChange = new EventEmitter();\n        /**\n         * Emits when an `input` event is fired on this `<input>`.\n         */\n        this.dateInput = new EventEmitter();\n        /**\n         * Emits when the value changes (either due to user input or programmatic change).\n         */\n        this._valueChange = new EventEmitter();\n        /**\n         * Emits when the disabled state has changed\n         */\n        this._disabledChange = new EventEmitter();\n        this._onTouched = (/**\n         * @return {?}\n         */\n        function () { });\n        this._cvaOnChange = (/**\n         * @return {?}\n         */\n        function () { });\n        this._validatorOnChange = (/**\n         * @return {?}\n         */\n        function () { });\n        this._datepickerSubscription = Subscription.EMPTY;\n        this._localeSubscription = Subscription.EMPTY;\n        /**\n         * The form control validator for whether the input parses.\n         */\n        this._parseValidator = (/**\n         * @return {?}\n         */\n        function () {\n            return _this._lastValueValid ?\n                null : { 'matDatepickerParse': { 'text': _this._elementRef.nativeElement.value } };\n        });\n        /**\n         * The form control validator for the min date.\n         */\n        this._minValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            /** @type {?} */\n            var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));\n            return (!_this.min || !controlValue ||\n                _this._dateAdapter.compareDate(_this.min, controlValue) <= 0) ?\n                null : { 'matDatepickerMin': { 'min': _this.min, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the max date.\n         */\n        this._maxValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            /** @type {?} */\n            var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));\n            return (!_this.max || !controlValue ||\n                _this._dateAdapter.compareDate(_this.max, controlValue) >= 0) ?\n                null : { 'matDatepickerMax': { 'max': _this.max, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the date filter.\n         */\n        this._filterValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            /** @type {?} */\n            var controlValue = _this._getValidDateOrNull(_this._dateAdapter.deserialize(control.value));\n            return !_this._dateFilter || !controlValue || _this._dateFilter(controlValue) ?\n                null : { 'matDatepickerFilter': true };\n        });\n        /**\n         * The combined form control validator for this input.\n         */\n        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n        /**\n         * Whether the last value set on the input was valid.\n         */\n        this._lastValueValid = false;\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this.value = _this.value;\n        }));\n    }\n    Object.defineProperty(MatDatepickerInput.prototype, \"matDatepicker\", {\n        /** The datepicker that this input is associated with. */\n        set: /**\n         * The datepicker that this input is associated with.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            if (!value) {\n                return;\n            }\n            this._datepicker = value;\n            this._datepicker._registerInput(this);\n            this._datepickerSubscription.unsubscribe();\n            this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((/**\n             * @param {?} selected\n             * @return {?}\n             */\n            function (selected) {\n                _this.value = selected;\n                _this._cvaOnChange(selected);\n                _this._onTouched();\n                _this.dateInput.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));\n                _this.dateChange.emit(new MatDatepickerInputEvent(_this, _this._elementRef.nativeElement));\n            }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"matDatepickerFilter\", {\n        /** Function that can be used to filter out dates within the datepicker. */\n        set: /**\n         * Function that can be used to filter out dates within the datepicker.\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._dateFilter = value;\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"value\", {\n        /** The value of the input. */\n        get: /**\n         * The value of the input.\n         * @return {?}\n         */\n        function () { return this._value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            value = this._dateAdapter.deserialize(value);\n            this._lastValueValid = !value || this._dateAdapter.isValid(value);\n            value = this._getValidDateOrNull(value);\n            /** @type {?} */\n            var oldDate = this.value;\n            this._value = value;\n            this._formatValue(value);\n            if (!this._dateAdapter.sameDate(oldDate, value)) {\n                this._valueChange.emit(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"min\", {\n        /** The minimum valid date. */\n        get: /**\n         * The minimum valid date.\n         * @return {?}\n         */\n        function () { return this._min; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"max\", {\n        /** The maximum valid date. */\n        get: /**\n         * The maximum valid date.\n         * @return {?}\n         */\n        function () { return this._max; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._validatorOnChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDatepickerInput.prototype, \"disabled\", {\n        /** Whether the datepicker-input is disabled. */\n        get: /**\n         * Whether the datepicker-input is disabled.\n         * @return {?}\n         */\n        function () { return !!this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            /** @type {?} */\n            var element = this._elementRef.nativeElement;\n            if (this._disabled !== newValue) {\n                this._disabled = newValue;\n                this._disabledChange.emit(newValue);\n            }\n            // We need to null check the `blur` method, because it's undefined during SSR.\n            if (newValue && element.blur) {\n                // Normally, native input elements automatically blur if they turn disabled. This behavior\n                // is problematic, because it would mean that it triggers another change detection cycle,\n                // which then causes a changed after checked error if the input element was focused before.\n                element.blur();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._datepickerSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this._valueChange.complete();\n        this._disabledChange.complete();\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnValidatorChange = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._validatorOnChange = fn;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.validate = /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this._validator ? this._validator(c) : null;\n    };\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     */\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.getPopupConnectionElementRef = /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n    function () {\n        return this.getConnectedOverlayOrigin();\n    };\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    MatDatepickerInput.prototype.getConnectedOverlayOrigin = /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    function () {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.writeValue = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnChange = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._cvaOnChange = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.registerOnTouched = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onTouched = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MatDatepickerInput.prototype.setDisabledState = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onKeydown = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n            this._datepicker.open();\n            event.preventDefault();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onInput = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\n        date = this._getValidDateOrNull(date);\n        if (!this._dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this._cvaOnChange(date);\n            this._valueChange.emit(date);\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n        else {\n            this._validatorOnChange();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onChange = /**\n     * @return {?}\n     */\n    function () {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    };\n    /** Returns the palette used by the input's form field, if any. */\n    /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._getThemePalette = /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n    function () {\n        return this._formField ? this._formField.color : undefined;\n    };\n    /** Handles blur events on the input. */\n    /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._onBlur = /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n    function () {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this._formatValue(this.value);\n        }\n        this._onTouched();\n    };\n    /** Formats a value and sets it on the input element. */\n    /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    MatDatepickerInput.prototype._formatValue = /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._elementRef.nativeElement.value =\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    };\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    MatDatepickerInput.prototype._getValidDateOrNull = /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    function (obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    };\n    MatDatepickerInput.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[matDatepicker]',\n                    providers: [\n                        MAT_DATEPICKER_VALUE_ACCESSOR,\n                        MAT_DATEPICKER_VALIDATORS,\n                        { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                    ],\n                    host: {\n                        '[attr.aria-haspopup]': 'true',\n                        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                        '[disabled]': 'disabled',\n                        '(input)': '_onInput($event.target.value)',\n                        '(change)': '_onChange()',\n                        '(blur)': '_onBlur()',\n                        '(keydown)': '_onKeydown($event)',\n                    },\n                    exportAs: 'matDatepickerInput',\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepickerInput.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: MatFormField, decorators: [{ type: Optional }] }\n    ]; };\n    MatDatepickerInput.propDecorators = {\n        matDatepicker: [{ type: Input }],\n        matDatepickerFilter: [{ type: Input }],\n        value: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        disabled: [{ type: Input }],\n        dateChange: [{ type: Output }],\n        dateInput: [{ type: Output }]\n    };\n    return MatDatepickerInput;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\nvar MatDatepickerToggleIcon = /** @class */ (function () {\n    function MatDatepickerToggleIcon() {\n    }\n    MatDatepickerToggleIcon.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matDatepickerToggleIcon]'\n                },] },\n    ];\n    return MatDatepickerToggleIcon;\n}());\n/**\n * @template D\n */\nvar MatDatepickerToggle = /** @class */ (function () {\n    function MatDatepickerToggle(_intl, _changeDetectorRef, defaultTabIndex) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._stateChanges = Subscription.EMPTY;\n        /** @type {?} */\n        var parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n    Object.defineProperty(MatDatepickerToggle.prototype, \"disabled\", {\n        /** Whether the toggle button is disabled. */\n        get: /**\n         * Whether the toggle button is disabled.\n         * @return {?}\n         */\n        function () {\n            if (this._disabled === undefined && this.datepicker) {\n                return this.datepicker.disabled;\n            }\n            return !!this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (changes['datepicker']) {\n            this._watchStateChanges();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.unsubscribe();\n    };\n    /**\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._watchStateChanges();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype._open = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    MatDatepickerToggle.prototype._watchStateChanges = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n        /** @type {?} */\n        var inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n            this.datepicker._datepickerInput._disabledChange : of();\n        /** @type {?} */\n        var datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            of();\n        this._stateChanges.unsubscribe();\n        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe((/**\n         * @return {?}\n         */\n        function () { return _this._changeDetectorRef.markForCheck(); }));\n    };\n    MatDatepickerToggle.decorators = [\n        { type: Component, args: [{selector: 'mat-datepicker-toggle',\n                    template: \"<button #button mat-icon-button type=\\\"button\\\" aria-haspopup=\\\"true\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" [disableRipple]=\\\"disableRipple\\\" (click)=\\\"_open($event)\\\"><svg *ngIf=\\\"!_customIcon\\\" class=\\\"mat-datepicker-toggle-default-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" fill=\\\"currentColor\\\" focusable=\\\"false\\\"><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg><ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content></button>\",\n                    styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n                    host: {\n                        'class': 'mat-datepicker-toggle',\n                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n                        // consumer may have provided, while still being able to receive focus.\n                        '[attr.tabindex]': '-1',\n                        '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                        '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                        '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                        '(focus)': '_button.focus()',\n                    },\n                    exportAs: 'matDatepickerToggle',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatDatepickerToggle.ctorParameters = function () { return [\n        { type: MatDatepickerIntl },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n    ]; };\n    MatDatepickerToggle.propDecorators = {\n        datepicker: [{ type: Input, args: ['for',] }],\n        tabIndex: [{ type: Input }],\n        disabled: [{ type: Input }],\n        disableRipple: [{ type: Input }],\n        _customIcon: [{ type: ContentChild, args: [MatDatepickerToggleIcon, { static: false },] }],\n        _button: [{ type: ViewChild, args: ['button', { static: false },] }]\n    };\n    return MatDatepickerToggle;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatDatepickerModule = /** @class */ (function () {\n    function MatDatepickerModule() {\n    }\n    MatDatepickerModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        MatButtonModule,\n                        MatDialogModule,\n                        OverlayModule,\n                        A11yModule,\n                        PortalModule,\n                    ],\n                    exports: [\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                    ],\n                    declarations: [\n                        MatCalendar,\n                        MatCalendarBody,\n                        MatDatepicker,\n                        MatDatepickerContent,\n                        MatDatepickerInput,\n                        MatDatepickerToggle,\n                        MatDatepickerToggleIcon,\n                        MatMonthView,\n                        MatYearView,\n                        MatMultiYearView,\n                        MatCalendarHeader,\n                    ],\n                    providers: [\n                        MatDatepickerIntl,\n                        MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                    ],\n                    entryComponents: [\n                        MatDatepickerContent,\n                        MatCalendarHeader,\n                    ]\n                },] },\n    ];\n    return MatDatepickerModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView, MatMultiYearView as Éµa34 };\n//# sourceMappingURL=datepicker.es5.js.map\n"],"sourceRoot":""}