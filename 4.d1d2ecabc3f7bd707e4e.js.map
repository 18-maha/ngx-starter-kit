{"version":3,"sources":["webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/select.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/cdk/esm2015/table.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/select/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/select/typings/index.d.ts.MatSelect.html","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/table.js.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","MatSelectModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_SCROLL_STRATEGY","MatSelect","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","_angular_material_core__WEBPACK_IMPORTED_MODULE_7__","rxjs__WEBPACK_IMPORTED_MODULE_8__","rxjs__WEBPACK_IMPORTED_MODULE_9__","rxjs__WEBPACK_IMPORTED_MODULE_10__","rxjs_operators__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_12__","rxjs_operators__WEBPACK_IMPORTED_MODULE_13__","rxjs_operators__WEBPACK_IMPORTED_MODULE_14__","rxjs_operators__WEBPACK_IMPORTED_MODULE_15__","rxjs_operators__WEBPACK_IMPORTED_MODULE_16__","rxjs_operators__WEBPACK_IMPORTED_MODULE_17__","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","overlay","scrollStrategies","reposition","MatSelectChange","[object Object]","source","value","this","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","Object","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","super","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","options","map","option","onSelectionChange","onStable","asObservable","pipe","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","placeholder","_placeholder","stateChanges","next","required","multiple","_selectionModel","Error","disableOptionCentering","compareWith","fn","_initializeSelection","_value","newValue","writeValue","_id","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","change","_triggerRect","trigger","nativeElement","getBoundingClientRect","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","_resetOptions","updateErrorState","complete","close","open","disabled","length","getComputedStyle","fontSize","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","style","_isRtl","_setSelectionByValue","isDisabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","manager","altKey","preventDefault","previouslySelectedOption","setFirstItemActive","setLastItemActive","onKeydown","selectedOption","announce","activeItem","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","positionChange","_setPseudoCheckboxPaddingSize","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","pseudoCheckbox","querySelector","offsetWidth","isEmpty","Promise","resolve","then","Array","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","reduce","result","current","index","undefined","itemHeight","items","_getItemCount","panelHeight","Math","min","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","max","ariaLabelledby","_hasFloatingLabel","_getAriaLabel","_labelId","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","ids","_ariaDescribedby","shouldLabelFloat","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","CdkTable","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkCellOutlet","CdkHeaderRow","CdkFooterRow","CdkRow","CdkTableModule","TEXT_COLUMN_OPTIONS","CdkTextColumn","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs_operators__WEBPACK_IMPORTED_MODULE_7__","mixinHasStickyInput","base","args","_sticky","_hasStickyChanged","sticky","v","prevValue","hasStickyChanged","template","CdkColumnDefBase","_CdkColumnDefBase","arguments","_stickyEnd","name","_name","cssClassFriendlyName","replace","stickyEnd","BaseCdkCell","columnDef","classList","add","BaseRowDef","_differs","_columnsDiffer","columns","create","diff","column","headerCell","footerCell","cell","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","ngOnChanges","CdkFooterRowDefBase","_CdkFooterRowDefBase","_viewContainer","mostRecentCellOutlet","STICKY_DIRECTIONS","StickyStyler","isNativeHtmlTable","stickCellCss","direction","_isBrowser","rows","stickyDirections","row","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","stickyStartStates","stickyEndStates","hasStickyColumns","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","_addStickyStyle","rowsToStick","stickyStates","position","stickyHeight","rowIndex","j","tableElement","tfoot","element","dir","zIndex","_getCalculatedZIndex","remove","dirValue","cssText","zIndexIncrements","firstRowCells","push","widths","positions","nextPosition","getTableUnknownColumnError","viewContainer","role","_document","_platform","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","start","end","Number","MAX_VALUE","setAttribute","_isNativeHtmlTable","nodeName","trackBy","_trackByFn","JSON","stringify","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","data","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","disconnect","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","get","move","_updateRowIndexContext","forEachIdentityChange","context","$implicit","updateStickyColumnStyles","headerRowDef","footerRowDef","delete","rowDef","headerRows","_getRenderedRows","thead","display","def","_stickyStyler","clearStickyPositioning","stickRows","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","from","values","renderRows","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeQueryListAndSet","_contentColumnDefs","getTableDuplicateColumnNameError","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","_defaultRowDef","columnsDiffReducer","acc","getColumnsDiff","unsubscribe","dataStream","connect","_renderRow","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","columnDefs","columnName","updateStickyColumns","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","getTableMissingMatchingRowDefError","renderIndex","outlet","createEmbeddedView","cellTemplate","_getCellTemplates","count","last","even","odd","columnId","extractCellTemplate","documentFragment","createDocumentFragment","sections","tag","section","createElement","appendChild","stickyCheckReducer","isBrowser","queryList","concat","table","justify","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","addColumnDef","removeColumnDef","defaultHeaderTextTransform","toUpperCase","slice","RenderType_MatSelect","View_MatSelect_0","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__","encapsulation","styles","animation","type","definitions","expr","selector","optional","transform","minWidth","opacity","offset","timings","View_MatSelect_1","_l","_ck","_v","component","View_MatSelect_3","View_MatSelect_4","View_MatSelect_2","ngSwitch","ngSwitchCase","customTrigger","View_MatSelect_5","en","$event","ad","_co","toState","_handleKeydown","klass","ngClass","_getPanelTheme","panelClass","toggle","_onAttached","origin","offsetY","backdropClass","scrollStrategy","hasBackdrop","lockPosition","backdropClick","attach","detach","MatTableModule","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatTable","MatHeaderRowDef","MatRowDef","MatHeaderRow","MatFooterRow","MatRow","MatTableDataSource","MatTextColumn","_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","MAX_SAFE_INTEGER","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","EMPTY","sortingDataAccessor","sortHeaderId","numberValue","sortData","active","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","currentTerm","key","toLowerCase","transformedFilter","trim","_updateChangeSubscription","_sort","paginator","_paginator","sortChange","initialized","pageChange","page","filteredData","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","newPageIndex"],"mappings":"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","file":"4.d1d2ecabc3f7bd707e4e.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nlet SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-select-trigger'\n            },] },\n];\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     * @param {?=} _liveAnnouncer\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            if (this.options) {\n                return merge(...this.options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange)));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelectionChanges)));\n        }))));\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.added.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.select()));\n            event.removed.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.deselect()));\n        }));\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._resetOptions();\n            this._initializeSelection();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        }));\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.viewValue));\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            const previouslySelectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            /** @type {?} */\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n                this._liveAnnouncer.announce(((/** @type {?} */ (selectedOption))).viewValue);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some((/**\n             * @param {?} opt\n             * @return {?}\n             */\n            opt => !opt.disabled && !opt.selected));\n            this.options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            }));\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._setPseudoCheckboxPaddingSize();\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        }));\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    _setPseudoCheckboxPaddingSize() {\n        if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n            /** @type {?} */\n            const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n            if (pseudoCheckbox) {\n                SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n            }\n        }\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        }));\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        }));\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        }));\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        }));\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option._stateChanges)))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.value));\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option.id)).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((/**\n         * @param {?} result\n         * @param {?} current\n         * @param {?} index\n         * @return {?}\n         */\n        (result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }), undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.decorators = [\n    { type: Component, args: [{selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n            },] },\n];\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger', { static: false },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger, { static: false },] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n//# sourceMappingURL=select.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellDef]' },] },\n];\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] },\n];\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] },\n];\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] },\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef, { static: false },] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef, { static: false },] }]\n};\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] },\n];\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] },\n];\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(isNativeHtmlTable, stickCellCss, direction, _isBrowser = true) {\n        this.isNativeHtmlTable = isNativeHtmlTable;\n        this.stickCellCss = stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this.isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this.isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this.stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this.stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[rowOutlet]' },] },\n];\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[headerRowOutlet]' },] },\n];\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[footerRowOutlet]' },] },\n];\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *it's* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *it's* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *it's* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *it's* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        if (this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n}\nCdkTable.decorators = [\n    { type: Component, args: [{selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n};\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} table\n     * @param {?} options\n     */\n    constructor(table, options) {\n        this.table = table;\n        this.options = options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this.options = options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        this.columnDef.name = name;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this.options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this.table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this.table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.table) {\n            this.table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        if (this.options && this.options.defaultHeaderTextTransform) {\n            return this.options.defaultHeaderTextTransform(this.name);\n        }\n        return this.name[0].toUpperCase() + this.name.slice(1);\n    }\n}\nCdkTextColumn.decorators = [\n    { type: Component, args: [{selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };\n//# sourceMappingURL=table.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/select\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/cdk/overlay\";\nimport * as i4 from \"@angular/cdk/bidi\";\nimport * as i5 from \"@angular/cdk/observers\";\nimport * as i6 from \"@angular/cdk/portal\";\nimport * as i7 from \"@angular/cdk/platform\";\nimport * as i8 from \"@angular/cdk/scrolling\";\nimport * as i9 from \"@angular/material/core\";\nimport * as i10 from \"@angular/platform-browser\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/forms\";\nimport * as i13 from \"@angular/cdk/a11y\";\nvar MatSelectModuleNgFactory = i0.ɵcmf(i1.MatSelectModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i3.Overlay, i3.Overlay, [i3.ScrollStrategyOptions, i3.OverlayContainer, i0.ComponentFactoryResolver, i3.OverlayPositionBuilder, i3.OverlayKeyboardDispatcher, i0.Injector, i0.NgZone, i2.DOCUMENT, i4.Directionality, [2, i2.Location]]), i0.ɵmpd(5120, i3.ɵc, i3.ɵd, [i3.Overlay]), i0.ɵmpd(4608, i5.MutationObserverFactory, i5.MutationObserverFactory, []), i0.ɵmpd(5120, i1.MAT_SELECT_SCROLL_STRATEGY, i1.MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, [i3.Overlay]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i4.BidiModule, i4.BidiModule, []), i0.ɵmpd(1073742336, i6.PortalModule, i6.PortalModule, []), i0.ɵmpd(1073742336, i7.PlatformModule, i7.PlatformModule, []), i0.ɵmpd(1073742336, i8.ScrollingModule, i8.ScrollingModule, []), i0.ɵmpd(1073742336, i3.OverlayModule, i3.OverlayModule, []), i0.ɵmpd(1073742336, i9.MatCommonModule, i9.MatCommonModule, [[2, i9.MATERIAL_SANITY_CHECKS], [2, i10.HAMMER_LOADER]]), i0.ɵmpd(1073742336, i9.MatRippleModule, i9.MatRippleModule, []), i0.ɵmpd(1073742336, i9.MatPseudoCheckboxModule, i9.MatPseudoCheckboxModule, []), i0.ɵmpd(1073742336, i9.MatOptionModule, i9.MatOptionModule, []), i0.ɵmpd(1073742336, i5.ObserversModule, i5.ObserversModule, []), i0.ɵmpd(1073742336, i11.MatFormFieldModule, i11.MatFormFieldModule, []), i0.ɵmpd(1073742336, i1.MatSelectModule, i1.MatSelectModule, [])]); });\nexport { MatSelectModuleNgFactory as MatSelectModuleNgFactory };\nvar styles_MatSelect = [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"];\nvar RenderType_MatSelect = i0.ɵcrt({ encapsulation: 2, styles: styles_MatSelect, data: { \"animation\": [{ type: 7, name: \"transformPanelWrap\", definitions: [{ type: 1, expr: \"* => void\", animation: { type: 11, selector: \"@transformPanel\", animation: [{ type: 9, options: null }], options: { optional: true } }, options: null }], options: {} }, { type: 7, name: \"transformPanel\", definitions: [{ type: 0, name: \"void\", styles: { type: 6, styles: { transform: \"scaleY(0.8)\", minWidth: \"100%\", opacity: 0 }, offset: null }, options: undefined }, { type: 0, name: \"showing\", styles: { type: 6, styles: { opacity: 1, minWidth: \"calc(100% + 32px)\", transform: \"scaleY(1)\" }, offset: null }, options: undefined }, { type: 0, name: \"showing-multiple\", styles: { type: 6, styles: { opacity: 1, minWidth: \"calc(100% + 64px)\", transform: \"scaleY(1)\" }, offset: null }, options: undefined }, { type: 1, expr: \"void => *\", animation: { type: 4, styles: null, timings: \"120ms cubic-bezier(0, 0, 0.2, 1)\" }, options: null }, { type: 1, expr: \"* => void\", animation: { type: 4, styles: { type: 6, styles: { opacity: 0 }, offset: null }, timings: \"100ms 25ms linear\" }, options: null }], options: {} }] } });\nexport { RenderType_MatSelect as RenderType_MatSelect };\nfunction View_MatSelect_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [[\"class\", \"mat-select-placeholder\"]], null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.placeholder || \"\\u00A0\"); _ck(_v, 1, 0, currVal_0); }); }\nfunction View_MatSelect_3(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [], null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.triggerValue || \"\\u00A0\"); _ck(_v, 1, 0, currVal_0); }); }\nfunction View_MatSelect_4(_l) { return i0.ɵvid(0, [i0.ɵncd(null, 0), (_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nfunction View_MatSelect_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 5, \"span\", [[\"class\", \"mat-select-value-text\"]], null, null, null, null, null)), i0.ɵdid(1, 16384, null, 0, i2.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_3)), i0.ɵdid(3, 16384, null, 0, i2.NgSwitchDefault, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], null, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_4)), i0.ɵdid(5, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = !!_co.customTrigger; _ck(_v, 1, 0, currVal_0); var currVal_1 = true; _ck(_v, 5, 0, currVal_1); }, null); }\nfunction View_MatSelect_5(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 4, \"div\", [[\"class\", \"mat-select-panel-wrap\"]], [[24, \"@transformPanelWrap\", 0]], null, null, null, null)), (_l()(), i0.ɵeld(1, 0, [[2, 0], [\"panel\", 1]], null, 3, \"div\", [], [[24, \"@transformPanel\", 0], [4, \"transformOrigin\", null], [4, \"font-size\", \"px\"]], [[null, \"@transformPanel.done\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"@transformPanel.done\" === en)) {\n        var pd_0 = (_co._panelDoneAnimatingStream.next($event.toState) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (_co._handleKeydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, null, null)), i0.ɵprd(512, null, i2.ɵNgClassImpl, i2.ɵNgClassR2Impl, [i0.IterableDiffers, i0.KeyValueDiffers, i0.ElementRef, i0.Renderer2]), i0.ɵdid(3, 278528, null, 0, i2.NgClass, [i2.ɵNgClassImpl], { klass: [0, \"klass\"], ngClass: [1, \"ngClass\"] }, null), i0.ɵncd(null, 1)], function (_ck, _v) { var _co = _v.component; var currVal_4 = i0.ɵinlineInterpolate(1, \"mat-select-panel \", _co._getPanelTheme(), \"\"); var currVal_5 = _co.panelClass; _ck(_v, 3, 0, currVal_4, currVal_5); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = undefined; _ck(_v, 0, 0, currVal_0); var currVal_1 = (_co.multiple ? \"showing-multiple\" : \"showing\"); var currVal_2 = _co._transformOrigin; var currVal_3 = _co._triggerFontSize; _ck(_v, 1, 0, currVal_1, currVal_2, currVal_3); }); }\nexport function View_MatSelect_0(_l) { return i0.ɵvid(2, [i0.ɵqud(671088640, 1, { trigger: 0 }), i0.ɵqud(671088640, 2, { panel: 0 }), i0.ɵqud(671088640, 3, { overlayDir: 0 }), (_l()(), i0.ɵeld(3, 0, [[1, 0], [\"trigger\", 1]], null, 9, \"div\", [[\"aria-hidden\", \"true\"], [\"cdk-overlay-origin\", \"\"], [\"class\", \"mat-select-trigger\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.toggle() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.ɵdid(4, 16384, [[\"origin\", 4]], 0, i3.CdkOverlayOrigin, [i0.ElementRef], null, null), (_l()(), i0.ɵeld(5, 0, null, null, 5, \"div\", [[\"class\", \"mat-select-value\"]], null, null, null, null, null)), i0.ɵdid(6, 16384, null, 0, i2.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_1)), i0.ɵdid(8, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSelect_2)), i0.ɵdid(10, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵeld(11, 0, null, null, 1, \"div\", [[\"class\", \"mat-select-arrow-wrapper\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(12, 0, null, null, 0, \"div\", [[\"class\", \"mat-select-arrow\"]], null, null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"backdropClick\" === en)) {\n        var pd_0 = (_co.close() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"attach\" === en)) {\n        var pd_1 = (_co._onAttached() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"detach\" === en)) {\n        var pd_2 = (_co.close() !== false);\n        ad = (pd_2 && ad);\n    } return ad; }, View_MatSelect_5)), i0.ɵdid(14, 671744, [[3, 4]], 0, i3.CdkConnectedOverlay, [i3.Overlay, i0.TemplateRef, i0.ViewContainerRef, i3.ɵc, [2, i4.Directionality]], { origin: [0, \"origin\"], positions: [1, \"positions\"], offsetY: [2, \"offsetY\"], minWidth: [3, \"minWidth\"], backdropClass: [4, \"backdropClass\"], scrollStrategy: [5, \"scrollStrategy\"], open: [6, \"open\"], hasBackdrop: [7, \"hasBackdrop\"], lockPosition: [8, \"lockPosition\"] }, { backdropClick: \"backdropClick\", attach: \"attach\", detach: \"detach\" })], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.empty; _ck(_v, 6, 0, currVal_0); var currVal_1 = true; _ck(_v, 8, 0, currVal_1); var currVal_2 = false; _ck(_v, 10, 0, currVal_2); var currVal_3 = i0.ɵnov(_v, 4); var currVal_4 = _co._positions; var currVal_5 = _co._offsetY; var currVal_6 = ((_co._triggerRect == null) ? null : _co._triggerRect.width); var currVal_7 = \"cdk-overlay-transparent-backdrop\"; var currVal_8 = _co._scrollStrategy; var currVal_9 = _co.panelOpen; var currVal_10 = \"\"; var currVal_11 = \"\"; _ck(_v, 14, 0, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11); }, null); }\nexport function View_MatSelect_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 6, \"mat-select\", [[\"class\", \"mat-select\"], [\"role\", \"listbox\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-label\", 0], [1, \"aria-labelledby\", 0], [1, \"aria-required\", 0], [1, \"aria-disabled\", 0], [1, \"aria-invalid\", 0], [1, \"aria-owns\", 0], [1, \"aria-multiselectable\", 0], [1, \"aria-describedby\", 0], [1, \"aria-activedescendant\", 0], [2, \"mat-select-disabled\", null], [2, \"mat-select-invalid\", null], [2, \"mat-select-required\", null], [2, \"mat-select-empty\", null]], [[null, \"keydown\"], [null, \"focus\"], [null, \"blur\"]], function (_v, en, $event) { var ad = true; if ((\"keydown\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 3)._handleKeydown($event) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"focus\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 3)._onFocus() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_2 = (i0.ɵnov(_v, 3)._onBlur() !== false);\n        ad = (pd_2 && ad);\n    } return ad; }, View_MatSelect_0, RenderType_MatSelect)), i0.ɵprd(6144, null, i11.MatFormFieldControl, null, [i1.MatSelect]), i0.ɵprd(6144, null, i9.MAT_OPTION_PARENT_COMPONENT, null, [i1.MatSelect]), i0.ɵdid(3, 2080768, null, 3, i1.MatSelect, [i8.ViewportRuler, i0.ChangeDetectorRef, i0.NgZone, i9.ErrorStateMatcher, i0.ElementRef, [2, i4.Directionality], [2, i12.NgForm], [2, i12.FormGroupDirective], [2, i11.MatFormField], [8, null], [8, null], i1.MAT_SELECT_SCROLL_STRATEGY, i13.LiveAnnouncer], null, null), i0.ɵqud(603979776, 1, { options: 1 }), i0.ɵqud(603979776, 2, { optionGroups: 1 }), i0.ɵqud(603979776, 3, { customTrigger: 0 })], function (_ck, _v) { _ck(_v, 3, 0); }, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 3).id; var currVal_1 = i0.ɵnov(_v, 3).tabIndex; var currVal_2 = i0.ɵnov(_v, 3)._getAriaLabel(); var currVal_3 = i0.ɵnov(_v, 3)._getAriaLabelledby(); var currVal_4 = i0.ɵnov(_v, 3).required.toString(); var currVal_5 = i0.ɵnov(_v, 3).disabled.toString(); var currVal_6 = i0.ɵnov(_v, 3).errorState; var currVal_7 = (i0.ɵnov(_v, 3).panelOpen ? i0.ɵnov(_v, 3)._optionIds : null); var currVal_8 = i0.ɵnov(_v, 3).multiple; var currVal_9 = (i0.ɵnov(_v, 3)._ariaDescribedby || null); var currVal_10 = i0.ɵnov(_v, 3)._getAriaActiveDescendant(); var currVal_11 = i0.ɵnov(_v, 3).disabled; var currVal_12 = i0.ɵnov(_v, 3).errorState; var currVal_13 = i0.ɵnov(_v, 3).required; var currVal_14 = i0.ɵnov(_v, 3).empty; _ck(_v, 0, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14]); }); }\nvar MatSelectNgFactory = i0.ɵccf(\"mat-select\", i1.MatSelect, View_MatSelect_Host_0, { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: \"aria-label\", ariaLabelledby: \"aria-labelledby\", errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\", id: \"id\" }, { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, [\"mat-select-trigger\", \"*\"]);\nexport { MatSelectNgFactory as MatSelectNgFactory };\n","<div cdk-overlay-origin class=\"mat-select-trigger\" aria-hidden=\"true\" (click)=\"toggle()\" #origin=\"cdkOverlayOrigin\" #trigger><div class=\"mat-select-value\" [ngSwitch]=\"empty\"><span class=\"mat-select-placeholder\" *ngSwitchCase=\"true\">{{placeholder || '\\u00A0'}}</span> <span class=\"mat-select-value-text\" *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\"mat-select-trigger\" *ngSwitchCase=\"true\"></ng-content></span></div><div class=\"mat-select-arrow-wrapper\"><div class=\"mat-select-arrow\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\" [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\" [cdkConnectedOverlayOrigin]=\"origin\" [cdkConnectedOverlayOpen]=\"panelOpen\" [cdkConnectedOverlayPositions]=\"_positions\" [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width\" [cdkConnectedOverlayOffsetY]=\"_offsetY\" (backdropClick)=\"close()\" (attach)=\"_onAttached()\" (detach)=\"close()\"><div class=\"mat-select-panel-wrap\" [@transformPanelWrap]><div #panel class=\"mat-select-panel {{ _getPanelTheme() }}\" [ngClass]=\"panelClass\" [@transformPanel]=\"multiple ? 'showing-multiple' : 'showing'\" (@transformPanel.done)=\"_panelDoneAnimatingStream.next($event.toState)\" [style.transformOrigin]=\"_transformOrigin\" [style.font-size.px]=\"_triggerFontSize\" (keydown)=\"_handleKeydown($event)\"><ng-content></ng-content></div></div></ng-template>","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        this.stickyCssClass = 'mat-table-sticky';\n    }\n}\nMatTable.decorators = [\n    { type: Component, args: [{selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                host: {\n                    'class': 'mat-table',\n                },\n                providers: [{ provide: CdkTable, useExisting: MatTable }],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            },] },\n];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            },] },\n];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            },] },\n];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n}\nMatColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matColumnDef]',\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ],\n            },] },\n];\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }],\n    sticky: [{ type: Input }],\n    stickyEnd: [{ type: Input }]\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass MatHeaderCell extends CdkHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nMatHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass MatFooterCell extends CdkFooterCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass MatCell extends CdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n            },] },\n];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n            },] },\n];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.decorators = [\n    { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatRow extends CdkRow {\n}\nMatRow.decorators = [\n    { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.decorators = [\n    { type: Component, args: [{selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CdkTableModule,\n                    CommonModule,\n                    MatCommonModule,\n                ],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\nclass MatTableDataSource extends DataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        super();\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        (data, sortHeaderId) => {\n            /** @type {?} */\n            const value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (_isNumberValue(value)) {\n                /** @type {?} */\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        (data, sort) => {\n            /** @type {?} */\n            const active = sort.active;\n            /** @type {?} */\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                /** @type {?} */\n                let valueA = this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                let valueB = this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come first.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            }));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            const dataStr = Object.keys(data).reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            (currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }), '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        });\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        const sortChange = this._sort ?\n            (/** @type {?} */ (merge(this._sort.sortChange, this._sort.initialized))) :\n            of(null);\n        /** @type {?} */\n        const pageChange = this._paginator ?\n            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\n            of(null);\n        /** @type {?} */\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        const filteredData = combineLatest(dataStream, this._filter)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._filterData(data))));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        const orderedData = combineLatest(filteredData, sortChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._orderData(data))));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        const paginatedData = combineLatest(orderedData, pageChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._pageData(data))));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => this._renderData.next(data)));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            obj => this.filterPredicate(obj, this.filter)));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        }));\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };\n//# sourceMappingURL=table.js.map\n"],"sourceRoot":""}