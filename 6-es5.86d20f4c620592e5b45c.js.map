{"version":3,"sources":["//Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.component.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/menu/typings/index.d.ts._MatMenu.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/menu/typings/index.d.ts.MatMenuItem.html","//Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.component.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm5/button-toggle.es5.js","//Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.module.ts","//Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/index.ts","//Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.service.ts"],"names":["_l","core","dialog_es5","_v","en","$event","ad","_co","component","index_ngfactory","button_es5","a11y_es5","animations","color","flex_es5","core_es5","fxFlex","_ck","id","data","title","message","disabled","_animationMode","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_6__","klass","ngClass","_classList","_panelAnimationState","View__MatMenu_1","_angular_material_core__WEBPACK_IMPORTED_MODULE_4__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_7__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__","trigger","disableRipple","_getHostElement","unbounded","__webpack_require__","d","__webpack_exports__","AppConfirmComponent","dialogRef","this","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MatButtonToggleGroupMultiple","MatButtonToggleGroup","MatButtonToggle","MatButtonToggleModule","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_5__","_angular_material_core__WEBPACK_IMPORTED_MODULE_6__","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","Object","multi","_uniqueIdCounter","MatButtonToggleChange","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","defineProperty","prototype","get","set","_this","_buttonToggles","forEach","toggle","name","_markForCheck","enumerable","configurable","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","ngOnInit","ngAfterContentInit","_a","select","apply","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deferEvents","deselect","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","decorators","type","args","selector","providers","host","role","class","[attr.aria-disabled]","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","exportAs","ctorParameters","propDecorators","vertical","MatButtonToggleBase","_super","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","call","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","_appearance","_type","monitor","ngOnDestroy","group","stopMonitoring","focus","_buttonElement","nativeElement","_onButtonClick","newChecked","template","styles","encapsulation","None","changeDetection","OnPush","inputs","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.tabindex]","[attr.id]","[attr.name]","(focus)","String","ariaLabel","static","imports","exports","declarations","AppConfirmModule","AppConfirmService","_app_confirm_component__WEBPACK_IMPORTED_MODULE_0__","dialog","confirm","open","width","disableClose","afterClosed"],"mappings":"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","file":"6-es5.86d20f4c620592e5b45c.js","sourcesContent":["<h1 matDialogTitle>{{ data.title }}</h1>\n<div mat-dialog-content>{{ data.message }}</div>\n<div mat-dialog-actions>\n  <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"dialogRef.close(true)\">OK</button> &nbsp;\n  <span fxFlex></span>\n  <button type=\"button\" color=\"accent\" mat-raised-button (click)=\"dialogRef.close(false)\">Cancel</button>\n</div>\n","<ng-template><div class=\"mat-menu-panel\" [ngClass]=\"_classList\" (keydown)=\"_handleKeydown($event)\" (click)=\"closed.emit('click')\" [@transformMenu]=\"_panelAnimationState\" (@transformMenu.start)=\"_onAnimationStart($event)\" (@transformMenu.done)=\"_onAnimationDone($event)\" tabindex=\"-1\" role=\"menu\"><div class=\"mat-menu-content\"><ng-content></ng-content></div></div></ng-template>","<ng-content></ng-content><div class=\"mat-menu-ripple\" matRipple [matRippleDisabled]=\"disableRipple || disabled\" [matRippleTrigger]=\"_getHostElement()\"></div>","import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Component, Inject } from '@angular/core';\n\n@Component({\n  selector: 'ngx-confirm',\n  templateUrl: './app-confirm.component.html',\n  styleUrls: ['./app-confirm.component.scss'],\n})\nexport class AppConfirmComponent {\n  constructor(public dialogRef: MatDialogRef<AppConfirmComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nvar MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nvar MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    function () { return MatButtonToggleGroup; })),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nvar  /**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nMatButtonToggleGroupMultiple = /** @class */ (function () {\n    function MatButtonToggleGroupMultiple() {\n    }\n    return MatButtonToggleGroupMultiple;\n}());\n/** @type {?} */\nvar _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nvar  /**\n * Change event object emitted by MatButtonToggle.\n */\nMatButtonToggleChange = /** @class */ (function () {\n    function MatButtonToggleChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MatButtonToggleChange;\n}());\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nvar MatButtonToggleGroup = /** @class */ (function () {\n    function MatButtonToggleGroup(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        function () { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        function () { });\n        this._name = \"mat-button-toggle-group-\" + _uniqueIdCounter++;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"name\", {\n        /** `name` attribute for the underlying `input` element. */\n        get: /**\n         * `name` attribute for the underlying `input` element.\n         * @return {?}\n         */\n        function () { return this._name; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            var _this = this;\n            this._name = value;\n            if (this._buttonToggles) {\n                this._buttonToggles.forEach((/**\n                 * @param {?} toggle\n                 * @return {?}\n                 */\n                function (toggle) {\n                    toggle.name = _this._name;\n                    toggle._markForCheck();\n                }));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"vertical\", {\n        /** Whether the toggle group is vertical. */\n        get: /**\n         * Whether the toggle group is vertical.\n         * @return {?}\n         */\n        function () { return this._vertical; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._vertical = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"value\", {\n        /** Value of the toggle group. */\n        get: /**\n         * Value of the toggle group.\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var selected = this._selectionModel ? this._selectionModel.selected : [];\n            if (this.multiple) {\n                return selected.map((/**\n                 * @param {?} toggle\n                 * @return {?}\n                 */\n                function (toggle) { return toggle.value; }));\n            }\n            return selected[0] ? selected[0].value : undefined;\n        },\n        set: /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        function (newValue) {\n            this._setSelectionByValue(newValue);\n            this.valueChange.emit(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"selected\", {\n        /** Selected button toggles in the group. */\n        get: /**\n         * Selected button toggles in the group.\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var selected = this._selectionModel.selected;\n            return this.multiple ? selected : (selected[0] || null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"multiple\", {\n        /** Whether multiple button toggles can be selected. */\n        get: /**\n         * Whether multiple button toggles can be selected.\n         * @return {?}\n         */\n        function () { return this._multiple; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._multiple = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"disabled\", {\n        /** Whether multiple button toggle group is disabled. */\n        get: /**\n         * Whether multiple button toggle group is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            if (this._buttonToggles) {\n                this._buttonToggles.forEach((/**\n                 * @param {?} toggle\n                 * @return {?}\n                 */\n                function (toggle) { return toggle._markForCheck(); }));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    };\n    /**\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _a;\n        (_a = this._selectionModel).select.apply(_a, this._buttonToggles.filter((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        function (toggle) { return toggle.checked; })));\n    };\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype.writeValue = /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype.registerOnChange = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._controlValueAccessorChangeFn = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype.registerOnTouched = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onTouched = fn;\n    };\n    // Implemented as part of ControlValueAccessor.\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype.setDisabledState = \n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /** Dispatch change event with current selection and group value. */\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._emitChangeEvent = /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var selected = this.selected;\n        /** @type {?} */\n        var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        var event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    };\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._syncButtonToggle = /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    function (toggle, select, isUserInput, deferEvents) {\n        if (isUserInput === void 0) { isUserInput = false; }\n        if (deferEvents === void 0) { deferEvents = false; }\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            ((/** @type {?} */ (this.selected))).checked = false;\n        }\n        if (select) {\n            this._selectionModel.select(toggle);\n        }\n        else {\n            this._selectionModel.deselect(toggle);\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    };\n    /** Checks whether a button toggle is selected. */\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._isSelected = /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    function (toggle) {\n        return this._selectionModel.isSelected(toggle);\n    };\n    /** Determines whether a button toggle should be checked on init. */\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._isPrechecked = /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    function (toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return toggle.value != null && value === toggle.value; }));\n        }\n        return toggle.value === this._rawValue;\n    };\n    /** Updates the selection state of the toggles in the group based on a value. */\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._setSelectionByValue = /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            function (currentValue) { return _this._selectValue(currentValue); }));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    };\n    /** Clears the selected toggles. */\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._clearSelection = /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        function (toggle) { return toggle.checked = false; }));\n    };\n    /** Selects a value if there's a toggle that corresponds to it. */\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._selectValue = /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var correspondingOption = this._buttonToggles.find((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        function (toggle) {\n            return toggle.value != null && toggle.value === value;\n        }));\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    };\n    /** Syncs up the group's value with the model and emits the change event. */\n    /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    MatButtonToggleGroup.prototype._updateModelValue = /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    function (isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    };\n    MatButtonToggleGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-button-toggle-group',\n                    providers: [\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                        { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                    ],\n                    host: {\n                        'role': 'group',\n                        'class': 'mat-button-toggle-group',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[class.mat-button-toggle-vertical]': 'vertical',\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                    },\n                    exportAs: 'matButtonToggleGroup',\n                },] },\n    ];\n    /** @nocollapse */\n    MatButtonToggleGroup.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatButtonToggleGroup.propDecorators = {\n        _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    function () { return MatButtonToggle; })),] }],\n        appearance: [{ type: Input }],\n        name: [{ type: Input }],\n        vertical: [{ type: Input }],\n        value: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        multiple: [{ type: Input }],\n        disabled: [{ type: Input }],\n        change: [{ type: Output }]\n    };\n    return MatButtonToggleGroup;\n}());\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nMatButtonToggleBase = /** @class */ (function () {\n    function MatButtonToggleBase() {\n    }\n    return MatButtonToggleBase;\n}());\n/** @type {?} */\nvar _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nvar MatButtonToggle = /** @class */ (function (_super) {\n    __extends(MatButtonToggle, _super);\n    function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        var _this = _super.call(this) || this;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._elementRef = _elementRef;\n        _this._focusMonitor = _focusMonitor;\n        _this._isSingleSelector = false;\n        _this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        _this.ariaLabelledby = null;\n        _this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        _this.change = new EventEmitter();\n        /** @type {?} */\n        var parsedTabIndex = Number(defaultTabIndex);\n        _this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        _this.buttonToggleGroup = toggleGroup;\n        _this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n        return _this;\n    }\n    Object.defineProperty(MatButtonToggle.prototype, \"buttonId\", {\n        /** Unique ID for the underlying `button` element. */\n        get: /**\n         * Unique ID for the underlying `button` element.\n         * @return {?}\n         */\n        function () { return this.id + \"-button\"; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggle.prototype, \"appearance\", {\n        /** The appearance style of the button. */\n        get: /**\n         * The appearance style of the button.\n         * @return {?}\n         */\n        function () {\n            return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._appearance = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggle.prototype, \"checked\", {\n        /** Whether the button is checked. */\n        get: /**\n         * Whether the button is checked.\n         * @return {?}\n         */\n        function () {\n            return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            /** @type {?} */\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this._checked) {\n                this._checked = newValue;\n                if (this.buttonToggleGroup) {\n                    this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n                }\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatButtonToggle.prototype, \"disabled\", {\n        /** Whether the button is disabled. */\n        get: /**\n         * Whether the button is disabled.\n         * @return {?}\n         */\n        function () {\n            return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._disabled = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatButtonToggle.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || \"mat-button-toggle-\" + _uniqueIdCounter++;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    };\n    /**\n     * @return {?}\n     */\n    MatButtonToggle.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    };\n    /** Focuses the button. */\n    /**\n     * Focuses the button.\n     * @return {?}\n     */\n    MatButtonToggle.prototype.focus = /**\n     * Focuses the button.\n     * @return {?}\n     */\n    function () {\n        this._buttonElement.nativeElement.focus();\n    };\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    MatButtonToggle.prototype._onButtonClick = /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    };\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    MatButtonToggle.prototype._markForCheck = /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    function () {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    };\n    MatButtonToggle.decorators = [\n        { type: Component, args: [{selector: 'mat-button-toggle',\n                    template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n                    styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matButtonToggle',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    inputs: ['disableRipple'],\n                    host: {\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                        '[class.mat-button-toggle-checked]': 'checked',\n                        '[class.mat-button-toggle-disabled]': 'disabled',\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                        'class': 'mat-button-toggle',\n                        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                        // but can still receive focus from things like cdkFocusInitial.\n                        '[attr.tabindex]': '-1',\n                        '[attr.id]': 'id',\n                        '[attr.name]': 'null',\n                        '(focus)': 'focus()',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatButtonToggle.ctorParameters = function () { return [\n        { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatButtonToggle.propDecorators = {\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        _buttonElement: [{ type: ViewChild, args: ['button', { static: false },] }],\n        id: [{ type: Input }],\n        name: [{ type: Input }],\n        value: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        appearance: [{ type: Input }],\n        checked: [{ type: Input }],\n        disabled: [{ type: Input }],\n        change: [{ type: Output }]\n    };\n    return MatButtonToggle;\n}(_MatButtonToggleMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatButtonToggleModule = /** @class */ (function () {\n    function MatButtonToggleModule() {\n    }\n    MatButtonToggleModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [MatCommonModule, MatRippleModule],\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\n                },] },\n    ];\n    return MatButtonToggleModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggle, MatButtonToggleModule };\n//# sourceMappingURL=button-toggle.es5.js.map\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AppConfirmComponent } from './app-confirm.component';\nimport { AppConfirmService } from './app-confirm.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n  imports: [CommonModule, MatDialogModule, MatButtonModule, FlexLayoutModule],\n  declarations: [AppConfirmComponent],\n  providers: [AppConfirmService],\n  entryComponents: [AppConfirmComponent],\n})\nexport class AppConfirmModule {}\n","export * from './lib/app-confirm.module';\nexport { AppConfirmService } from './lib/app-confirm.service';\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MatDialogRef, MatDialog, MatDialogConfig } from '@angular/material/dialog';\n\nimport { AppConfirmComponent } from './app-confirm.component';\n\n@Injectable()\nexport class AppConfirmService {\n  constructor(private dialog: MatDialog) {}\n\n  public confirm(title: string, message: string): Observable<boolean> {\n    let dialogRef: MatDialogRef<AppConfirmComponent>;\n    dialogRef = this.dialog.open(AppConfirmComponent, {\n      width: '380px',\n      disableClose: true,\n      data: { title, message },\n    });\n    return dialogRef.afterClosed() as Observable<boolean>;\n  }\n}\n"],"sourceRoot":""}