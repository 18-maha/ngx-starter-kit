{"version":3,"sources":["//Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.module.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/cdk/esm2015/drag-drop.js","//Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity-form.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.service.ts","//Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.model.ts","//Developer/Work/SPA/ngx-starter-kit/libs/shared/src/index.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/select.js","//Developer/Work/SPA/ngx-starter-kit/libs/quickpanel/src/lib/quickpanel.component.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/progress-bar/typings/index.d.ts.MatProgressBar.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/ngx-perfect-scrollbar/dist/ngx-perfect-scrollbar.d.ts.PerfectScrollbarComponent.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/radio.js","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/toolbar.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/toolbar.module.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/datepicker.js","//Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/tabs/typings/index.d.ts.MatTabGroup.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/tabs/typings/index.d.ts.MatTabBody.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/tabs/typings/index.d.ts.MatTabHeader.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/tabs/typings/index.d.ts.MatTab.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/tabs/typings/index.d.ts.MatTabNav.html","//Developer/Work/SPA/ngx-starter-kit/libs/quickpanel/src/lib/quickpanel.component.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/getUTCWeek/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/format/formatters/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/format/longFormatters/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/_lib/protectedTokens/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/format/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/isValid/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/subMilliseconds/index.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/progress-bar.js","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/app-notification.model.ts","//Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/shared-material-date.module.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/tabs.js","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/notifications.service.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/date-fns/esm/addMilliseconds/index.js","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/notifications.handler.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/badge.js","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/notifications.actions.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/rxjs/_esm2015/internal/operators/retry.js","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/sidenav-toggle/sidenav-toggle.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/sidenav-toggle/sidenav-toggle.component.html","//Developer/Work/SPA/ngx-starter-kit/libs/ngx-utils/src/lib/directives/click-outside/click-outside.directive.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/search-bar/search-bar.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/search-bar/search-bar.component.html","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/fullscreen-toggle/fullscreen-toggle.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/fullscreen-toggle/fullscreen-toggle.component.html","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/search/search.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/search/search.component.html","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/notifications.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/notifications.component.html","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/user-menu/user-menu.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/user-menu/user-menu.component.html","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/quickpanel-toggle/quickpanel-toggle.component.ts","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/components/quickpanel-toggle/quickpanel-toggle.component.html","//Developer/Work/SPA/ngx-starter-kit/libs/toolbar/src/lib/toolbar.component.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/cdk/esm2015/table.js","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/notifications.state.ts","//Developer/Work/SPA/ngx-starter-kit/libs/notifications/src/lib/notifications.module.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/screenfull/dist/screenfull.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/sidenav/typings/index.d.ts.MatDrawerContent.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/sidenav/typings/index.d.ts.MatDrawer.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/sidenav/typings/index.d.ts.MatDrawerContainer.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/sidenav/typings/index.d.ts.MatSidenavContent.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/sidenav/typings/index.d.ts.MatSidenav.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/sidenav/typings/index.d.ts.MatSidenavContainer.html","//Developer/Work/SPA/ngx-starter-kit/libs/breadcrumbs/src/lib/breadcrumbs.component.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/select/typings/index.d.ts.MatSelect.html","//Developer/Work/SPA/ngx-starter-kit/libs/quickpanel/src/lib/quickpanel.module.ts","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/table.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/immer/dist/immer.module.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/@ngxs-labs/immer-adapter/fesm2015/ngxs-labs-immer-adapter.js","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/radio/typings/index.d.ts.MatRadioButton.html","//Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/sidenav.js"],"names":["__webpack_require__","d","__webpack_exports__","BreadcrumbsModule","DragDrop","CdkDropList","CDK_DROP_LIST","moveItemInArray","DragDropModule","DragDropRegistry","CdkDropListGroup","CDK_DRAG_CONFIG","CdkDrag","CdkDragHandle","CDK_DRAG_PARENT","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","rxjs_operators__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_12__","rxjs_operators__WEBPACK_IMPORTED_MODULE_13__","_angular_core__WEBPACK_IMPORTED_MODULE_14__","_angular_common__WEBPACK_IMPORTED_MODULE_15__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_16__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_17__","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","passiveEventListenerOptions","Object","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRef","[object Object]","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","this","_passiveTransform","x","y","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","find","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","Math","abs","_pickupPositionOnPage","dragStartThreshold","Date","now","_dragStartTime","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","preventDefault","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","handles","forEach","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","boundaryElement","removeElement","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","_nextSibling","transform","add","delete","direction","container","position","_pointerPositionAtLastDirectionChange","unsubscribe","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","isTouchEvent","_lastTouchEventTime","nextSibling","preview","_createPreviewElement","placeholder","_createPlaceholderElement","display","body","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","_initialContainer","pointerMove","subscribe","pointerUp","scroll","pipe","_scrollPosition","getViewportScrollPosition","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","startDragging","insertBefore","currentIndex","getItemIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewTemplate","viewRef","viewContainer","createEmbeddedView","context","rootNodes","elementRect","deepCloneNode","left","top","pointerEvents","zIndex","classList","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","getTransformTransitionDurationInMs","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","minX","maxX","right","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","parentNode","removeChild","array","fromIndex","toIndex","from","clamp$1","to","_uniqueIdCounter","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","id","sortingDisabled","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_viewportScrollPosition","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_handleScroll","_updateAfterScroll","scrollTop","scrollLeft","_startScrollInterval","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","registerDropContainer","nativeElement","_removeListeners","removeDropContainer","_cacheItems","sibling","_startReceiving","newPosition","_clientRect","pointerX","pointerY","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","getPlaceholderElement","newPositionReference","splice","getRootElement","push","_cacheItemPositions","_reset","items","_withDropContainer","connectedTo","slice","orientation","findIndex","reverse","currentItem","size","pointerDelta","_isPointerNearDropContainer","siblings","isHorizontal","siblingAtNewPosition","clientRect","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","index","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","getMutableClientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","xThreshold","yThreshold","_","floor","_cacheOwnPosition","scrollPosition","newTop","newLeft","extraClientRect","topDifference","leftDifference","_sortFromLastPointerPosition","isInsideClientRect","_canReceive","elementFromPoint","activeSiblings","predicate","amount","scrollBy","activeCapturingEventOptions","capture","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","Map","_preventDefaultWhileDragging","getDropContainer","Error","startsWith","moveEvent","upEvent","set","e","options","config","_clearGlobalListeners","Array","instance","decorators","args","providedIn","ctorParameters","ngInjectableDef","factory","token","DEFAULT_CONFIG","CDK_DROP_LIST_CONTAINER","parentDrag","_stateChanges","_parentDrag","selector","host","class","propDecorators","CdkDragPlaceholder","templateRef","data","CdkDragPreview","dropContainer","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_syncInputs","_handleEvents","boundaryElementSelector","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","filter","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","setFreeDragPosition","rootSelectorChange","positionChange","firstChange","dispose","rootElementSelector","getClosestMatchingAncestor","nodeType","ELEMENT_NODE","nodeName","boundary","ref","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","emit","markForCheck","currentElement","matches","msMatchesSelector","parentElement","exportAs","[class.cdk-drag-disabled]","[class.cdk-drag-dragging]","providers","provide","useExisting","descendants","static","_items","_uniqueIdCounter$1","_group","_sortingDisabled","_dropListRef","createDropList","_dropLists","withItems","result","change","list","withOrientation","useValue","[id]","[class.cdk-drop-list-disabled]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","declarations","exports","EntityFormComponent","dialogRef","title","entity","payload","buildForm","close","entityForm","entity_component_EntitiesComponent","entityService","dataSource","table","selection","collections","showToolbar","showColumnFilter","showActionColumn","maxSelectable","actionColumn","selectColumn","loading$","update","filterPredicate","changed","operators_filter","sc","added","selected","src","deselect","shift","paginator","getById","concatMap","put","post","getAll","getData","filteredData","every","isSelected","hasValue","isAllFilteredRowsSelected","isMasterToggleChecked","select","filterValue","displayedColumns","columns","column","visible","unshift","concat","toggle","showDetails","outlet","activatedRouteData","depth","stopImmediatePropagation","date","s","String","isString","parseISO","entity_service_EntityService","httpClient","baseUrl","environment","API_BASE_URL","loadingSubject","BehaviorSubject","get","entityPath","catchError","handleError","order","skip","take","params","http","toString","retry","finalize","console","log","error","errorMessage","ErrorEvent","message","status","throwError","temporalFunctionToJson","prototype","toJSON","format","jsonBody","JSON","stringify","Entity","init","assign","EntityColumnDef","header","displayFn","MatSelectModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_SCROLL_STRATEGY","MatSelect","_angular_animations__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_4__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_6__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_7__","_angular_core__WEBPACK_IMPORTED_MODULE_8__","_angular_forms__WEBPACK_IMPORTED_MODULE_9__","_angular_material_core__WEBPACK_IMPORTED_MODULE_10__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__","rxjs__WEBPACK_IMPORTED_MODULE_12__","rxjs__WEBPACK_IMPORTED_MODULE_13__","rxjs__WEBPACK_IMPORTED_MODULE_14__","rxjs_operators__WEBPACK_IMPORTED_MODULE_15__","rxjs_operators__WEBPACK_IMPORTED_MODULE_16__","rxjs_operators__WEBPACK_IMPORTED_MODULE_17__","rxjs_operators__WEBPACK_IMPORTED_MODULE_18__","rxjs_operators__WEBPACK_IMPORTED_MODULE_19__","rxjs_operators__WEBPACK_IMPORTED_MODULE_20__","rxjs_operators__WEBPACK_IMPORTED_MODULE_21__","_angular_common__WEBPACK_IMPORTED_MODULE_22__","matSelectAnimations","transformPanelWrap","optional","transformPanel","minWidth","opacity","fadeInContent","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","deps","useFactory","MatSelectChange","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatSelectTrigger","elementRef","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","super","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimatingStream","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","option","onSelectionChange","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","focused","stateChanges","required","multiple","_selectionModel","disableOptionCentering","compareWith","fn","_initializeSelection","_value","writeValue","_id","panelOpen","overlayDir","offsetX","_triggerRect","trigger","_initKeyManager","onChange","removed","_resetOptions","updateErrorState","open","fontSize","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","_isRtl","_setSelectionByValue","isDisabled","triggerValue","empty","selectedOptions","viewValue","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","altKey","previouslySelectedOption","setFirstItemActive","setLastItemActive","onKeydown","selectedOption","announce","activeItem","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_setPseudoCheckboxPaddingSize","detectChanges","_calculateOverlayOffsetX","panel","color","pseudoCheckbox","querySelector","offsetWidth","isEmpty","isArray","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","warn","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","_propagateChanges","toArray","sortComparator","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","reduce","current","itemHeight","_getItemCount","panelHeight","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optimalScrollPosition","ariaLabelledby","_hasFloatingLabel","_getAriaLabel","_labelId","overlayRect","viewportSize","isRtl","paddingWidth","first","group","leftOverflow","rightOverflow","updatePosition","optionHeightAdjustment","maxOptionsDisplayed","optionOffsetFromPanelTop","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","ids","_ariaDescribedby","shouldLabelFloat","styles","inputs","encapsulation","None","changeDetection","OnPush","role","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","(keydown)","(focus)","(blur)","animations","panelClass","customTrigger","errorStateMatcher","imports","QuickpanelComponent","today","events","time","state","todolists","messages","img","subject","content","_l","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_2__","ngStyle","_ck","_v","_co","component","_bufferTransform","_primaryTransform","progressbarId","_rectangleFillValue","states","indicatorY","interaction","indicatorX","ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_1__","View_PerfectScrollbarComponent_1","ngIf","scrollIndicators","usePSClass","MatRadioModule","MAT_RADIO_DEFAULT_OPTIONS","MatRadioGroup","MatRadioButton","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","_angular_material_core__WEBPACK_IMPORTED_MODULE_5__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__","_angular_common__WEBPACK_IMPORTED_MODULE_7__","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","multi","MatRadioChange","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_controlValueAccessorChangeFn","onTouched","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","_radios","radio","_markForCheck","isAlreadySelected","_MatRadioButtonMixinBase","radioGroup","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","_uniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_color","inputId","focusVia","_inputElement","monitor","focusOrigin","_touch","stopMonitoring","disableRipple","groupValueChanged","_emitChangeEvent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class._mat-animation-noopable]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","ariaDescribedby","ToolbarComponent","isFullscreen","tslib__WEBPACK_IMPORTED_MODULE_0__","_ngxs_store__WEBPACK_IMPORTED_MODULE_1__","_ngx_starter_kit_auth__WEBPACK_IMPORTED_MODULE_3__","profile","ToolbarModule","_angular_material_button__WEBPACK_IMPORTED_MODULE_0__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_1__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_2__","_angular_material_input__WEBPACK_IMPORTED_MODULE_3__","_angular_material_list__WEBPACK_IMPORTED_MODULE_4__","MatMultiYearView","MatDatepickerModule","MatCalendarHeader","MatCalendar","MatCalendarBody","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContent","MatDatepicker","MatDatepickerInput","MatDatepickerIntl","MatDatepickerToggle","MatMonthView","MatYearView","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__","_angular_material_core__WEBPACK_IMPORTED_MODULE_8__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_9__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_10__","_angular_animations__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_12__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__","_angular_common__WEBPACK_IMPORTED_MODULE_14__","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_15__","_angular_forms__WEBPACK_IMPORTED_MODULE_16__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_17__","_angular_material_input__WEBPACK_IMPORTED_MODULE_18__","_angular_material_button__WEBPACK_IMPORTED_MODULE_19__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_20__","createMissingDateImplError","provider","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","MatCalendarCell","displayValue","enabled","cssClasses","numCols","activeCell","cellAspectRatio","selectedValueChange","cell","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","rowIndex","colIndex","cellNumber","aria-readonly","label","todayValue","selectedValue","labelMinRequiredCells","DAYS_PER_WEEK","_dateFormats","_dateAdapter","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","long","narrow","_weekdays","_activeDate","activeDate","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","selectedYear","getYear","selectedMonth","getMonth","selectedDate","createDate","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_dateSelected","compareDate","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","_shouldEnableDate","dateA11yLabel","cellClasses","dateClass","d1","d2","obj","isDateInstance","isValid","yearsPerPage","yearsPerRow","yearSelected","isSameMultiYearView","_selectedYear","_todayYear","minYearOfPage","getActiveOffset","_years","row","year","_createCellForYear","month","_yearSelected","yearName","getYearName","_shouldEnableYear","dateAdapter","date1","date2","year1","year2","startingYear","getStartingYear","activeYear","monthSelected","_selectedMonth","_getMonthInCurrentYear","normalizedDate","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_intl","calendar","changeDetectorRef","periodButtonText","currentView","monthYearLabel","periodButtonLabel","prevButtonLabel","multi-year","nextButtonLabel","_isSameView","_moveFocusOnNextTick","startView","_intlChanges","startAt","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","headerComponent","focusActiveCell","view","_getCurrentViewComponent","monthView","yearView","multiYearView","ngAfterContentInit","sameDate","normalizedYear","normalizedMonth","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","_dialog","_overlay","scrollStrategy","_touchUi","openedStream","closedStream","_opened","_validSelected","_focusedElementBeforeOpen","_inputSubscription","_disabledChange","_selectedChanged","_datepickerInput","_getThemePalette","touchUi","opened","_dateFilter","_popupRef","_popupComponentRef","oldValue","input","_valueChange","activeElement","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","viewContainerRef","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","overlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","create","backdropClick","detachments","keydownEvents","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","calendarHeaderComponent","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MatDatepickerInputEvent","targetElement","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_validator","compose","localeChanges","matDatepicker","_datepicker","_registerInput","oldDate","_formatValue","_min","_max","blur","c","isAltDownArrow","readOnly","parse","aria-haspopup","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MatDatepickerToggleIcon","defaultTabIndex","parsedTabIndex","Number","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","_customIcon","_button","entryComponents","BreadcrumbsComponent","core","View_MatTabGroup_3","portal","parent","$implicit","templateLabel","textLabel","en","$event","ad","material_esm2015_core","platform","a11y","tabs","View_MatTabGroup_2","common","View_MatTabGroup_4","_getTabLabelId","_getTabIndex","_tabs","_getTabContentId","unbounded","View_MatTabBody_0","RenderType_MatTabBody","bidi","_content","origin","animationDuration","_onCentering","_onCentered","View_MatTabHeader_0","RenderType_MatTabHeader","scrolling","selectFocusedIndex","indexFocused","View_MatTabGroup_1","ngForOf","View_MatTabGroup_5","_showPaginationControls","_getLayoutDirection","View_MatTabBody_1","currVal_0","_position","_disableScrollBefore","_disableScrollAfter","View_MatTab_1","index_ngfactory","_lines","_avatar","_icon","flex","esm2015_core","fxLayout","fxLayoutAlign","View_MatTabGroup_0","RenderType_MatTabGroup","View_MatTab_0","RenderType_MatTab","_explicitContent","typings_index_ngfactory","divider","View_QuickpanelComponent_1","View_QuickpanelComponent_2","View_QuickpanelComponent_3","progress_bar_typings_index_ngfactory","progress_bar","bufferValue","mode","dynamicHeight","headerPosition","currVal_5","currVal_6","currVal_7","currVal_8","vertical","inset","_isNoopAnimation","addLeadingZeros","number","targetLength","sign","output","lightFormatters","signedYear","getUTCFullYear","M","getUTCMonth","getUTCDate","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","pow","MILLISECONDS_IN_DAY","startOfUTCISOWeek","dirtyDate","arguments","TypeError","toDate","day","getUTCDay","diff","setUTCDate","setUTCHours","getUTCISOWeekYear","fourthOfJanuaryOfNextYear","setUTCFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","MILLISECONDS_IN_WEEK","getUTCISOWeek","fourthOfJanuary","startOfUTCISOWeekYear","startOfUTCWeek","dirtyOptions","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","toInteger","RangeError","getUTCWeekYear","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","getUTCWeek_MILLISECONDS_IN_WEEK","getUTCWeek","firstWeek","startOfUTCWeekYear","dayPeriodEnum","formatTimezoneShort","dirtyDelimiter","absOffset","hours","minutes","delimiter","formatTimezoneWithOptionalMinutes","formatTimezone","format_formatters","G","localize","era","ordinalNumber","unit","Y","signedWeekYear","weekYear","R","u","Q","quarter","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","timestamp","setUTCMonth","difference","getUTCDayOfYear","E","dayOfWeek","localDayOfWeek","isoDayOfWeek","dayPeriod","B","K","k","X","_localize","timezoneOffset","_originalDate","getTimezoneOffset","O","z","t","originalDate","T","dateLongFormatter","pattern","formatLong","timeLongFormatter","format_longFormatters","p","P","dateTimeFormat","matchResult","match","datePattern","timePattern","dateTime","replace","protectedDayOfYearTokens","protectedWeekYearTokens","throwProtectedError","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","formatStr","en_US","isNaN","utcDate","dirtyAmount","addMilliseconds","subMilliseconds","getTimezoneOffsetInMilliseconds","formatterOptions","substring","firstCharacter","longFormatter","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","MatProgressBarModule","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_4__","_angular_common__WEBPACK_IMPORTED_MODULE_6__","_MatProgressBarMixinBase","_location","location","getPathname","pathname","search","_bufferValue","animationEnd","_animationEndSubscription","path","_emitAnimationEnd","_primaryValueBar","aria-valuemin","aria-valuemax","[attr.aria-valuenow]","[attr.mode]","TargetType","NotificationColor","NotificationIcon","AppNotification","_ngx_starter_kit_shared__WEBPACK_IMPORTED_MODULE_0__","SharedMaterialDateModule","ɵ0","_angular_material_core__WEBPACK_IMPORTED_MODULE_0__","MatInkBar","_MAT_INK_BAR_POSITIONER","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabLabelWrapper","MatTab","MatTabNav","MatTabsModule","MAT_TABS_CONFIG","MatTabGroup","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_2__","_angular_material_core__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_8__","rxjs__WEBPACK_IMPORTED_MODULE_9__","_angular_animations__WEBPACK_IMPORTED_MODULE_10__","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_11__","rxjs_operators__WEBPACK_IMPORTED_MODULE_14__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_15__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_17__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_18__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_19__","_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_20__","_angular_common__WEBPACK_IMPORTED_MODULE_21__","offsetLeft","_inkBarPositioner","show","requestAnimationFrame","_setStyles","visibility","positions","inkBar","MatTabContent","MatTabLabel","_MatTabMixinBase","_contentPortal","isActive","_implicitContent","read","matTabsAnimations","translateTab","minHeight","componentFactoryResolver","_host","_centeringSub","_leavingSub","ngOnInit","_beforeCentering","_isCenterPosition","isCentering","_afterLeavingCenter","ngOnDestroy","_dirChangeSubscription","_translateTabComplete","_computePositionAnimationState","fromState","toState","_positionIndex","_computePositionFromOrigin","clientHeight","_portalHost","_MatTabLabelWrapperMixinBase","[class.mat-tab-disabled]","EXAGGERATED_OVERSCROLL","HEADER_SCROLL_DELAY","HEADER_SCROLL_INTERVAL","MatPaginatedTabHeader","_platform","_scrollDistance","_selectedIndexChanged","_selectedIndex","_stopInterval","updateActiveItemIndex","_previousPaginator","_handlePaginatorPress","_nextPaginator","dirChange","resize","realign","updatePagination","_alignInkBarToSelectedTab","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","focusIndex","_itemSelected","textContent","_currentTextContent","_checkPaginationEnabled","_isValidIndex","tab","containerEl","_tabListContainer","scrollWidth","scrollDistance","translateX","_tabList","TRIDENT","EDGE","_scrollTo","scrollAmount","_scrollHeader","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","_inkBar","alignToElement","hide","maxScrollDistance","viewportRuler","ngZone","animationMode","_disableRipple","outputs","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","nextId","MatTabChangeEvent","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","_animationDuration","test","backgroundColor","_backgroundColor","remove","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","_subscribeToTabLabels","_tabHeader","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","tabHeader","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","updateActiveLink","_element","active","MatTabLink","_MatTabLinkMixinBase","_tabNavBar","globalRippleOptions","_isActive","_tabLinkRipple","setupTriggerEvents","rippleConfig","animation","enterDuration","exitDuration","rippleDisabled","_removeTriggerEvents","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","NotificationsService","_ngx_starter_kit_shared__WEBPACK_IMPORTED_MODULE_2__","featureService","apiBaseUrl","_env_environment__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","noti","detectFeature","_ngx_starter_kit_core__WEBPACK_IMPORTED_MODULE_7__","NotificationsAPI","supported","isMobileAndroid","Notification","requestPermission","onclick","_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_0__","_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__","NotificationsHandler","actions$","store","swPush","_notifications_actions__WEBPACK_IMPORTED_MODULE_2__","action","dispatch","_ngx_starter_kit_socketio_plugin__WEBPACK_IMPORTED_MODULE_3__","notification","targetType","_app_notification_model__WEBPACK_IMPORTED_MODULE_4__","notificationClicks","_a","_b","MatBadgeModule","MatBadge","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_MatBadgeMixinBase","_ariaDescriber","_renderer","_hasContent","_overlap","overlap","val","description","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","hidden","_hidden","contentChange","_updateTextContent","removeDescription","destroyNode","_createBadgeElement","createElement","_clearExistingBadges","oldDescription","describe","colorPalette","cssClass","childCount","children","currentChild","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","FetchNotifications","AddNotification","DeleteNotification","MarkAsRead","MarkAllAsRead","_Subscriber__WEBPACK_IMPORTED_MODULE_0__","count","lift","RetryOperator","subscriber","RetrySubscriber","destination","err","isStopped","_unsubscribeAndRecycle","SidenavToggleComponent","sidenav","esm2015_button","extended","fxHide.gt-md","icon_typings_index_ngfactory","icon","inline","click_outside_directive_ClickOutsideDirective","ngxClickOutside","search_bar_component_SearchBarComponent","router","sidenavService","recentlyVisited","getItemByRoute","urlAfterRedirects","pop","routerLink","route","fxFlex","View_SearchBarComponent_3","fxFlexOffset","currVal_15","currVal_16","currVal_17","currVal_18","currVal_19","currVal_20","klass","ngClass","has-input","View_SearchBarComponent_1","View_SearchBarComponent_2","currVal_1","currVal_4","fullscreen_toggle_component_FullscreenToggleComponent","screenfull","View_FullscreenToggleComponent_1","View_FullscreenToggleComponent_2","SearchComponent","isOpen","form_field_typings_index_ngfactory","form_field","_controlNonStatic","_controlStatic","_labelChildNonStatic","_labelChildStatic","_placeholderChild","_errorChildren","_hintChildren","_prefixChildren","_suffixChildren","fesm2015_forms","text_field","appearance","_control","errorState","_canLabelFloat","_shouldLabelFloat","_hideControlPlaceholder","autofilled","_shouldForward","_animationsEnabled","_isServer","readonly","_isNativeSelect","notifications_component_NotificationsComponent","notifications_actions","tslib_es6","ngxs_store","notifications_state","Observable","unReadCount","badge","unReadCount$","isAbove","isAfter","format_time_in_words_pipe","View_NotificationsComponent_8","last","createdAt","ngx_perfect_scrollbar_ngfactory","ngx_perfect_scrollbar_es5","View_NotificationsComponent_7","ngForTrackBy","ngLet","trackById","autoPropagation","View_NotificationsComponent_5","ngIfThen","ngIfElse","View_NotificationsComponent_6","View_NotificationsComponent_9","View_NotificationsComponent_1","View_NotificationsComponent_2","View_NotificationsComponent_3","View_NotificationsComponent_4","ng_let_directive","notifications$","user_menu_component_UserMenuComponent","currentUser","given_name","photoURL","auth_src","fxShow.gt-sm","fxHide","list_typings_index_ngfactory","divider_typings_index_ngfactory","currVal_27","currVal_36","href","QuickpanelToggleComponent","quickpanel","toolbar","_toolbarRows","View_SidenavToggleComponent_0","RenderType_SidenavToggleComponent","View_SearchBarComponent_0","RenderType_SearchBarComponent","fxShow.gt-md","menu_service","View_FullscreenToggleComponent_0","RenderType_FullscreenToggleComponent","View_SearchComponent_0","RenderType_SearchComponent","View_NotificationsComponent_0","RenderType_NotificationsComponent","View_UserMenuComponent_0","RenderType_UserMenuComponent","View_QuickpanelToggleComponent_0","RenderType_QuickpanelToggleComponent","currVal_9","profile$","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","CDK_TABLE_TEMPLATE","CdkTable","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CDK_ROW_TEMPLATE","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkCellOutlet","CdkHeaderRow","CdkFooterRow","CdkRow","CdkTableModule","TEXT_COLUMN_OPTIONS","CdkTextColumn","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__","_angular_common__WEBPACK_IMPORTED_MODULE_5__","mixinHasStickyInput","base","_sticky","_hasStickyChanged","sticky","prevValue","hasStickyChanged","_CdkColumnDefBase","_stickyEnd","cssClassFriendlyName","stickyEnd","headerCell","footerCell","BaseCdkCell","columnDef","columnClassName","BaseRowDef","_differs","_columnsDiffer","_CdkHeaderRowDefBase","ngOnChanges","_CdkFooterRowDefBase","_viewContainer","mostRecentCellOutlet","Default","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","_isBrowser","stickyDirections","_removeStickyStyle","stickyStartStates","stickyEndStates","hasStickyColumns","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","_addStickyStyle","rowsToStick","stickyStates","stickyHeight","j","tableElement","tfoot","_getCalculatedZIndex","dirValue","cssText","zIndexIncrements","firstRowCells","widths","nextPosition","getTableUnknownColumnError","_onDestroy","_columnDefsByName","_customColumnDefs","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","MAX_VALUE","trackBy","_trackByFn","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","disconnect","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","_insertRow","move","_updateRowIndexContext","forEachIdentityChange","updateStickyColumnStyles","headerRowDef","footerRowDef","rowDef","headerRows","_getRenderedRows","thead","def","_stickyStyler","clearStickyPositioning","stickRows","resetStickyChanged","footerRows","updateStickyFooterContainer","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","renderRows","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","WeakMap","renderRow","cache","_getRowDefs","cachedRenderRows","mergeQueryListAndSet","_contentColumnDefs","getTableDuplicateColumnNameError","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","when","_defaultRowDef","columnsDiffReducer","acc","getColumnsDiff","dataStream","connect","_renderRow","updateStickyHeaderRowStyles","updateStickyFooterRowStyles","columnDefs","columnName","updateStickyColumns","rowOutlet","renderedRows","rowDefs","getTableMissingMatchingRowDefError","renderIndex","cellTemplate","_getCellTemplates","even","odd","columnId","extractCellTemplate","documentFragment","createDocumentFragment","sections","tag","section","stickyCheckReducer","isBrowser","queryList","_table","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","addColumnDef","removeColumnDef","defaultHeaderTextTransform","EXPORTED_DECLARATIONS","NotificationsState","notificationsService","note","ctx","setState","getState","patchState","res","_ngxs_store_operators__WEBPACK_IMPORTED_MODULE_3__","_ngxs_labs_immer_adapter__WEBPACK_IMPORTED_MODULE_2__","_notifications_actions__WEBPACK_IMPORTED_MODULE_6__","cancelUncompleted","defaults","_notifications_service__WEBPACK_IMPORTED_MODULE_5__","NotificationsModule","_angular_material_badge__WEBPACK_IMPORTED_MODULE_1__","_angular_material_button__WEBPACK_IMPORTED_MODULE_2__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_3__","notificationsHandler","document","isCommonjs","module","keyboardAllowed","Element","fnMap","l","ret","eventNameMap","fullscreenchange","fullscreenerror","request","elem","reject","promise","requestFullscreen","onFullScreenEntered","off","bind","on","documentElement","navigator","userAgent","ALLOW_KEYBOARD_INPUT","catch","onFullScreenExit","exitFullscreen","onchange","callback","onerror","eventName","raw","defineProperties","Boolean","enumerable","fullscreenEnabled","default","_isShowingBackdrop","View_MatDrawerContent_0","RenderType_MatDrawerContent","_angular_material_sidenav__WEBPACK_IMPORTED_MODULE_1__","_container","_contentMargins","View_MatDrawerContainer_1","View_MatDrawerContainer_2","View_MatSidenavContent_0","RenderType_MatSidenavContent","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_3__","View_MatSidenavContainer_1","View_MatSidenavContainer_2","currVal_2","link","ngSwitch","View_BreadcrumbsComponent_2","ngSwitchCase","View_BreadcrumbsComponent_3","View_BreadcrumbsComponent_4","View_BreadcrumbsComponent_1","crumbs","View_MatSelect_3","View_MatSelect_4","_getPanelTheme","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__","View_MatSelect_1","View_MatSelect_2","View_MatSelect_5","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_4__","offsetY","lockPosition","QuickpanelModule","_angular_material_list__WEBPACK_IMPORTED_MODULE_0__","_angular_material_progress_bar__WEBPACK_IMPORTED_MODULE_1__","_angular_material_sidenav__WEBPACK_IMPORTED_MODULE_2__","_angular_material_tabs__WEBPACK_IMPORTED_MODULE_3__","MatTableModule","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatTable","MatHeaderRowDef","MatRowDef","MatHeaderRow","MatFooterRow","MatRow","MatTableDataSource","MatTextColumn","_angular_cdk_table__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__","_angular_common__WEBPACK_IMPORTED_MODULE_3__","_angular_material_core__WEBPACK_IMPORTED_MODULE_4__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_10__","rxjs__WEBPACK_IMPORTED_MODULE_11__","MatFooterCellDef","MatFooterCell","MatFooterRowDef","MAX_SAFE_INTEGER","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","numberValue","sortData","valueA","valueB","comparatorResult","dataStr","keys","currentTerm","transformedFilter","_updateChangeSubscription","_sort","_paginator","sortChange","initialized","pageChange","page","_filterData","orderedData","_orderData","paginatedData","_pageData","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","lastPageIndex","newPageIndex","NOTHING","Symbol","DRAFTABLE","for","DRAFT_STATE","isDraft","isDraftable","proto","getPrototypeOf","constructor","immer_module_assign","ownKeys","Reflect","getOwnPropertySymbols","getOwnPropertyNames","shallowCopy","invokeGetters","desc","getOwnPropertyDescriptor","call","defineProperty","writable","configurable","each","cb","isEnumerable","thing","is","ImmerScope","drafts","canAutoFreeze","patches","revoke","draft","usePatches","patchListener","inversePatches","leave","descriptors","createProxy","clonePotentialDraft","assertUnrevoked","peek","finalizing","prepareCopy","copy","assigned","modified","markChanged","proxyProperty","scope","finalized","revoke$1","revoked","markChangesSweep","hasArrayChanges","hasObjectChanges","baseValue","state$1","descriptor","legacyProxy","freeze","willFinalize","isReplaced","markChangesRecursively","object","i$1","i$2","createProxy$1","Proxy","revocable","arrayTraps","objectTraps","proxy","source$1","peek$1","isUnchanged","markChanged$1","deleteProperty","owner","setPrototypeOf","apply","modernProxy","generatePatches","basePath","assign$1","op","useRemove","replaceCount","path$1","generateArrayPatches","assignedValue","origValue","generateObjectPatches","applyPatches","patch","configDefaults","useProxies","autoFreeze","process","onAssign","onDelete","onCopy","Immer","setUseProxies","produce","recipe","this$1","defaultBase","self","len","hasError","processResult","createDraft","isManual","finishDraft","setAutoFreeze","baseDraft","isFrozen","finalizeTree","root","rootPath","needPatches","finalizeProperty","isDraftProp","immer","ImmutableContext","ngxs_labs_immer_adapter_ImmutableStateContext","frozenState","autobindStateContext","newState","oldState","mutatedOldState","actions","_target","_key","method","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_6__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_7__","centered","radius","_isRippleDisabled","MatSidenavModule","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","MatDrawer","MatDrawerContainer","MatSidenavContent","MatSidenav","MatSidenavContainer","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_4__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_5__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_6__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_19__","_angular_material_core__WEBPACK_IMPORTED_MODULE_20__","matDrawerAnimations","transformDrawer","box-shadow","throwMatDuplicatedDrawerError","scrollDispatcher","_contentMarginChanges","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_mode","_disableClose","_autoFocus","_animationStarted","_animationEnd","_animationState","onPositionChanged","_modeChanged","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","disableClose","autoFocus","openedStart","closedStart","focusInitialElementWhenReady","hasMovedFocus","activeEl","HTMLElement","_openedVia","openedVia","_width","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-push]","[class.mat-drawer-side]","_animationStartListener","_animationDoneListener","defaultAutosize","_doCheckSubject","_validateDrawers","updateContentMargins","_autosize","_start","_end","autosize","_backdropOverride","scrollable","_userContent","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_left","_right","_isPushed","_setContainerClass","onMicrotaskEmpty","isAdd","_closeModalDrawer","_canHaveBackdrop","[class.mat-drawer-container-explicit-backdrop]","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]"],"mappings":"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","file":"4-es2015.81d2462e50db62bd4eec.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n  imports: [MatIconModule, FlexLayoutModule, RouterModule, CommonModule],\n  exports: [BreadcrumbsComponent],\n  declarations: [BreadcrumbsComponent],\n})\nexport class BreadcrumbsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subscription, Subject, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, take, map, switchMap, tap } from 'rxjs/operators';\nimport { ElementRef, Injectable, NgZone, Inject, InjectionToken, NgModule, ContentChildren, EventEmitter, forwardRef, Input, Output, Optional, Directive, ChangeDetectorRef, SkipSelf, ContentChild, ViewContainerRef, isDevMode, TemplateRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[(/** @type {?} */ (key))] = source[(/** @type {?} */ (key))];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + (this.dragStartDelay || 0);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            event.preventDefault();\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeElement(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._nextSibling = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeElement(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeElement(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            // Grab the `nextSibling` before the preview and placeholder\n            // have been created so we don't get the preview by accident.\n            this._nextSibling = element.nextSibling;\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild((/** @type {?} */ (element.parentNode)).replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        if (this._nextSibling) {\n            (/** @type {?} */ (this._nextSibling.parentNode)).insertBefore(this._rootElement, this._nextSibling);\n        }\n        else {\n            coerceElement(this._initialContainer.element).appendChild(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialContainer.getItemIndex(this),\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left it's\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = viewRef.rootNodes[0];\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = `${elementRect.width}px`;\n            preview.style.height = `${elementRect.height}px`;\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = this._placeholderRef.rootNodes[0];\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param {?} element Element to be removed.\n * @return {?}\n */\nfunction removeElement(element) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop refs.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?=} _ngZone\n     * @param {?=} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Unique ID for the drop list.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 8.0.0\n         */\n        this.id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = true;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the container's scroll position.\n         */\n        this._scrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the scroll position of the viewport.\n         */\n        this._viewportScrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n         */\n        this._handleScroll = (/**\n         * @return {?}\n         */\n        () => {\n            if (!this.isDragging()) {\n                return;\n            }\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n        });\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        _dragDropRegistry.registerDropContainer(this);\n        this._document = _document;\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._removeListeners();\n        // @breaking-change 9.0.0 Remove check for _ngZone once it's marked as a required param.\n        if (this._ngZone) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => element.addEventListener('scroll', this._handleScroll)));\n        }\n        else {\n            element.addEventListener('scroll', this._handleScroll);\n        }\n        // @breaking-change 9.0.0 Remove check for _viewportRuler once it's marked as a required param.\n        if (this._viewportRuler) {\n            this._viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this.isDragging()) {\n                    /** @type {?} */\n                    const newPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                    this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left, this._clientRect);\n                }\n            }));\n        }\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 9.0.0 `distance` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?=} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance = { x: 0, y: 0 }) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // @breaking-change 9.0.0 Remove null check for _viewportRuler once it's a required parameter.\n        // Check whether we're in range to scroll the viewport.\n        if (this._viewportRuler) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        // If we couldn't find a scroll direction based on the\n        // window, try with the container, if the pointer is close by.\n        if (!verticalScrollDirection && !horizontalScrollDirection &&\n            this._isPointerNearDropContainer(pointerX, pointerY)) {\n            verticalScrollDirection = getVerticalScrollDirection(this._clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(this._clientRect, pointerX);\n            scrollNode = coerceElement(this.element);\n        }\n        // TODO(crisbeto): we also need to account for whether the view or element are scrollable in\n        // the first place. With the current approach we'll still try to scroll them, but it just\n        // won't do anything. The only case where this is relevant is that if we have a scrollable\n        // list close to the viewport edge where the viewport isn't scrollable. In this case the\n        // we'll be trying to scroll the viewport rather than the list.\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                // @breaking-change 9.0.0 Remove null check for `_ngZone` once it is made required.\n                if (this._ngZone) {\n                    this._ngZone.runOutsideAngular(this._startScrollInterval);\n                }\n                else {\n                    this._startScrollInterval();\n                }\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    _cacheOwnPosition() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._clientRect = getMutableClientRect(element);\n        this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._removeListeners();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    _isPointerNearDropContainer(pointerX, pointerY) {\n        const { top, right, bottom, left, width, height } = this._clientRect;\n        /** @type {?} */\n        const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheOwnPosition();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrollPosition Object that is keeping track of the scroll position.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n     *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n     *  the `ClientRect` of the list.\n     * @return {?}\n     */\n    _updateAfterScroll(scrollPosition, newTop, newLeft, extraClientRect) {\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        if (extraClientRect) {\n            adjustClientRect(extraClientRect, topDifference, leftDifference);\n        }\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Removes the event listeners associated with this drop list.\n     * @private\n     * @return {?}\n     */\n    _removeListeners() {\n        coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._document.elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n    }\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            if (this.getDropContainer(drop.id)) {\n                throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n            }\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e))\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    getDropContainer(id) {\n        return Array.from(this._dropInstances).find((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => instance.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * \\@breaking-change 8.0.0\n * @type {?}\n */\nconst CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            },] },\n];\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            },] },\n];\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPreview.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            },] },\n];\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Selector that will be used to determine the element to which the draggable's position will\n     * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n     * element has been found\n     * @deprecated Use `boundaryElement` instead.\n     * \\@breaking-change 9.0.0\n     * @return {?}\n     */\n    get boundaryElementSelector() {\n        return typeof this.boundaryElement === 'string' ? this.boundaryElement : (/** @type {?} */ (undefined));\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    set boundaryElementSelector(selector) {\n        this.boundaryElement = selector;\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => item._stateChanges)));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n}\nCdkDrag.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            },] },\n];\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview, { static: false },] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder, { static: false },] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n            },] },\n];\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter$1 = 0;\nconst ɵ0 = undefined;\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter$1++}`;\n        this._disabled = false;\n        this._sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._syncInputs(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @return {?}\n     */\n    get sortingDisabled() { return this._sortingDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set sortingDisabled(value) {\n        this._sortingDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._dropListRef.withItems(items.map((/**\n             * @param {?} drag\n             * @return {?}\n             */\n            drag => drag._dragRef)));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, ((/** @type {?} */ (previousContainer)))._dropListRef, isPointerOverContainer);\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        /** @type {?} */\n        const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n        return result ? result.data : null;\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return this._dropListRef._isOverContainer(x, y);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\nCdkDropList.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                }\n            },] },\n];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\nCdkDropList.propDecorators = {\n    _draggables: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => CdkDrag)), {\n                    // Explicitly set to false since some of the logic below makes assumptions about it.\n                    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n                    descendants: false\n                },] }],\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, CDK_DRAG_PARENT as ɵb };\n//# sourceMappingURL=drag-drop.js.map\n","import { Inject, OnInit } from '@angular/core';\nimport { Entity } from './entity.model';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\n\nexport abstract class EntityFormComponent<TEntity extends Entity> implements OnInit {\n  title: string;\n  entity: TEntity;\n  entityForm: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) protected data: { title: string; payload: TEntity },\n    protected dialogRef: MatDialogRef<EntityFormComponent<TEntity>>,\n  ) {\n    this.title = data.title;\n    this.entity = data.payload;\n  }\n\n  abstract buildForm(entity: TEntity);\n\n  ngOnInit() {\n    this.buildForm(this.entity);\n  }\n\n  submit() {\n    this.dialogRef.close(this.entityForm.value as Partial<TEntity>);\n  }\n}\n","import { AfterViewInit, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { EntityService } from './entity.service';\nimport { Entity, EntityColumnDef } from './entity.model';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { EntityFormComponent } from './entity-form.component';\nimport { ComponentType } from '@angular/cdk/portal/typings/portal';\nimport { SelectionChange, SelectionModel } from '@angular/cdk/collections';\nimport { untilDestroy } from '@ngx-starter-kit/ngx-utils';\nimport { parseISO } from 'date-fns/esm';\n\nexport abstract class EntitiesComponent<TEntity extends Entity, TService extends EntityService<TEntity>>\n  implements OnInit, OnDestroy, AfterViewInit {\n  dataSource = new MatTableDataSource<TEntity>([]);\n  selection = new SelectionModel<TEntity>(false, []);\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  @ViewChild('filter', { static: true }) filterRef: ElementRef;\n\n  readonly loading$;\n  readonly columns: Array<EntityColumnDef<TEntity>>;\n  readonly title?: string = null;\n  readonly showToolbar?: boolean = false;\n  readonly showColumnFilter?: boolean = false;\n  readonly showActionColumn?: boolean = false;\n  readonly maxSelectable?: number = 1;\n  readonly actionColumn?: string = 'Actions';\n  readonly selectColumn?: string = 'select';\n  // TODO: make them optional abstract\n  readonly formRef?: ComponentType<EntityFormComponent<TEntity>>;\n  getNewEntity?(): TEntity;\n  filterPredicate?(entity: TEntity, filter: string): boolean;\n  // TODO: make them optional abstract end\n\n  constructor(protected entityService: TService) {\n    this.loading$ = entityService.loading$;\n  }\n\n  ngOnInit() {\n    this.selection = new SelectionModel<TEntity>(this.maxSelectable > 1, []);\n\n    this.update().subscribe();\n    if (this.filterPredicate) {\n      this.dataSource.filterPredicate = this.filterPredicate;\n    }\n\n    // remove first selected entity if more then max selected.\n    if (this.maxSelectable > 1) {\n      // is multi select mode?\n      this.selection.changed\n        .pipe(\n          // tap(console.log),\n          filter((sc: SelectionChange<TEntity>) => sc.added.length > 0),\n          filter(_ => this.selection.selected.length > this.maxSelectable),\n          untilDestroy(this),\n        )\n        .subscribe(_ => this.selection.deselect(this.selection.selected.shift()));\n    }\n\n    // fromEvent(this.filterRef.nativeElement, 'keyup')\n    //   .pipe(\n    //     debounceTime(150),\n    //     distinctUntilChanged()\n    //   ).subscribe(() => {\n    //   this.paginator.pageIndex = 0;\n    //   this.applyFilter(this.filterRef.nativeElement.value)\n    // });\n  }\n\n  ngOnDestroy() {}\n\n  ngAfterViewInit() {\n    // Needs to be set up after the view is initialized since the data source will look at the sort\n    // and paginator's initial values to know what data should be rendered.\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  getById(id: number) {\n    return this.entityService.getById(id);\n  }\n\n  delete(item: TEntity) {\n    return this.entityService.delete(item.id).pipe(concatMap(_ => this.update()));\n  }\n\n  updateOrCreate(entity: TEntity, id: number) {\n    if (id) {\n      return this.entityService.put(id, entity).pipe(concatMap(_ => this.update()));\n    } else {\n      return this.entityService.post(entity).pipe(concatMap(_ => this.update()));\n    }\n  }\n\n  /**\n   * Overwrite this method, to get the data your way.\n   */\n  getData(): Observable<TEntity[]> {\n    return this.entityService.getAll();\n  }\n\n  protected update() {\n    return this.getData().pipe(\n      map(result => {\n        this.dataSource = new MatTableDataSource<TEntity>(result);\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n        // return nothing as we don't need.\n        // return result\n      }),\n    );\n  }\n\n  /** Whether all filtered rows are selected. */\n  isAllFilteredRowsSelected() {\n    return this.dataSource.filteredData.every(data => this.selection.isSelected(data));\n  }\n\n  /** Whether the selection it totally matches the filtered rows. */\n  isMasterToggleChecked() {\n    return (\n      this.selection.hasValue() &&\n      this.isAllFilteredRowsSelected() &&\n      this.selection.selected.length >= this.dataSource.filteredData.length\n    );\n  }\n\n  /**\n   * Whether there is a selection that doesn't capture all the\n   * filtered rows there are no filtered rows displayed.\n   */\n  isMasterToggleIndeterminate() {\n    return this.selection.hasValue() && (!this.isAllFilteredRowsSelected() || !this.dataSource.filteredData.length);\n  }\n\n  /** Selects all filtered rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isMasterToggleChecked()) {\n      this.selection.clear();\n    } else {\n      this.dataSource.filteredData.forEach(data => this.selection.select(data));\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n\n  get displayedColumns(): string[] {\n    // prettier-ignore\n    let displayedColumns = this.columns\n      .filter(column => column.visible)\n      .map(x => x.property);\n\n    if (this.maxSelectable > 0) {\n      displayedColumns.unshift(this.selectColumn);\n    }\n    if (this.showActionColumn) {\n      displayedColumns = displayedColumns.concat(this.actionColumn);\n    }\n    return displayedColumns;\n  }\n\n  selectRow(entity: TEntity) {\n    if (this.maxSelectable > 0) {\n      this.selection.toggle(entity);\n      if (this.selection.isSelected(entity)) {\n        this.showDetails(entity);\n      } else {\n        this.showDetails(undefined);\n      }\n    }\n  }\n\n  getRouteAnimation(outlet) {\n    return outlet.activatedRouteData.depth || 5;\n    // return outlet.isActivated ? outlet.activatedRoute : ''\n  }\n\n  /**\n   * will be called with entity or undefined\n   */\n  showDetails(entity: TEntity) {}\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  protected stringToDate(date: string | number | Date): number | Date {\n    const isString = s => typeof s === 'string' || s instanceof String;\n    return isString(date) ? parseISO(date) : date;\n  }\n}\n","import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Entity } from './entity.model';\nimport { catchError, finalize, retry } from 'rxjs/operators';\nimport { format } from 'date-fns/esm';\nimport { IPagination } from './pagination';\n\nexport interface Filter {\n  [name: string]: string | string[];\n}\n\nexport abstract class EntityService<T extends Entity> {\n  protected readonly baseUrl = environment.API_BASE_URL;\n  protected loadingSubject = new BehaviorSubject<boolean>(false);\n  public loading$ = this.loadingSubject.asObservable();\n\n  protected abstract entityPath: string;\n\n  constructor(protected httpClient: HttpClient) {}\n\n  getById(id: number | string) {\n    // this.loadingSubject.next(true);\n    return this.httpClient.get<T>(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      // finalize(() => this.loadingSubject.next(false))\n    );\n  }\n\n  // findAll(filter: Filter, order = 'DESC', skip = 0, take = 100): Observable<IPagination<T>> | Observable<never> {\n  findAll(filter: Filter, order = 'DESC', skip = 0, take = 100): Observable<T[]> | Observable<never> {\n    this.loadingSubject.next(true);\n    return this.httpClient\n      .get<T[]>(`${this.baseUrl}/${this.entityPath}`, {\n        params: new HttpParams()\n          .set('filter', 'filter TODO')\n          .set('order', order)\n          .set('skip', skip.toString())\n          .set('take', take.toString()),\n      })\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError),\n        finalize(() => this.loadingSubject.next(false)),\n      );\n  }\n\n  // getAll(): Observable<IPagination<T>> {\n  getAll(): Observable<T[]> {\n    this.loadingSubject.next(true);\n    return this.httpClient.get<T[]>(`${this.baseUrl}/${this.entityPath}`).pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  delete(id: number | string) {\n    this.loadingSubject.next(true);\n    return this.httpClient.delete(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  post(entity: T) {\n    this.loadingSubject.next(true);\n    return this.httpClient.post(`${this.baseUrl}/${this.entityPath}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  put(id: number | string, entity: T) {\n    console.log(entity);\n    this.loadingSubject.next(true);\n    return this.httpClient.put(`${this.baseUrl}/${this.entityPath}/${id}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  protected handleError(error: HttpErrorResponse) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (typeof error === 'string') {\n      errorMessage = error;\n    } else {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${error.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${error.status}, with body ${error.message}`;\n      }\n    }\n    console.error(error);\n    // return an ErrorObservable with a user-facing error message\n    return throwError(errorMessage);\n  }\n\n  protected convertToJson(body: any) {\n    const temporalFunctionToJson = Date.prototype.toJSON;\n    Date.prototype.toJSON = function() {\n      return format(this, 'YYYY-MM-DD');\n    };\n\n    const jsonBody = JSON.stringify(body);\n\n    Date.prototype.toJSON = temporalFunctionToJson;\n    return jsonBody;\n  }\n}\n","import { TemplateRef } from '@angular/core';\n\nexport abstract class Entity {\n  abstract get id(): number | string;\n  [key: string]: any;\n  constructor(init?: Partial<Entity>) {\n    Object.assign(this, init);\n  }\n}\n\nexport class EntityColumnDef<T> {\n  readonly property: string;\n  readonly header = this.property;\n  public visible = true;\n  readonly sticky?: 'start' | 'end';\n  readonly template?: TemplateRef<any>;\n  readonly displayFn = (entity: T) => entity[this.property];\n\n  public constructor(init?: Partial<EntityColumnDef<T>>) {\n    Object.assign(this, init);\n  }\n}\n","export * from './lib/shared.module';\nexport * from './lib/shared-flex-layout.module';\nexport * from './lib/shared-perfect-scrollbar.module';\nexport * from './lib/shared-material-date.module';\n\nexport * from './lib/containers/entity/entity-form.component';\nexport * from './lib/containers/entity/entity.component';\nexport * from './lib/containers/entity/entity.service';\nexport * from './lib/containers/entity/entity.model';\nexport * from './lib/containers/entity/pagination';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nlet SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-select-trigger'\n            },] },\n];\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     * @param {?=} _liveAnnouncer\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap((/**\n                 * @return {?}\n                 */\n                () => merge(...options.map((/**\n                 * @param {?} option\n                 * @return {?}\n                 */\n                option => option.onSelectionChange))))));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap((/**\n             * @return {?}\n             */\n            () => this.optionSelectionChanges)));\n        }))));\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.added.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.select()));\n            event.removed.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.deselect()));\n        }));\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._resetOptions();\n            this._initializeSelection();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        }));\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.viewValue));\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            const previouslySelectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            /** @type {?} */\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(((/** @type {?} */ (selectedOption))).viewValue, 10000);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some((/**\n             * @param {?} opt\n             * @return {?}\n             */\n            opt => !opt.disabled && !opt.selected));\n            this.options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            }));\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._setPseudoCheckboxPaddingSize();\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        }));\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    _setPseudoCheckboxPaddingSize() {\n        if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n            /** @type {?} */\n            const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n            if (pseudoCheckbox) {\n                SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n            }\n        }\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        }));\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        }));\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        }));\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        }));\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option._stateChanges)))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option.value));\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option.id)).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((/**\n         * @param {?} result\n         * @param {?} current\n         * @param {?} index\n         * @return {?}\n         */\n        (result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }), undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.decorators = [\n    { type: Component, args: [{selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n            },] },\n];\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger', { static: false },] }],\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: false },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger, { static: false },] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n//# sourceMappingURL=select.js.map\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-quickpanel',\n  templateUrl: './quickpanel.component.html',\n  styleUrls: ['./quickpanel.component.scss'],\n})\nexport class QuickpanelComponent implements OnInit {\n  today: number = Date.now();\n\n  events = [\n    {\n      id: 'id',\n      title: 'Business Meeting',\n      time: '05:00 PM',\n      state: 'state',\n    },\n    {\n      id: 'id',\n      title: 'Ask for a Vacation',\n      time: '05:00 PM',\n      state: 'state',\n    },\n    {\n      id: 'id',\n      title: 'Dinner with Micheal',\n      time: '05:00 PM',\n      state: 'state',\n    },\n    {\n      id: 'id',\n      title: 'Deadline for Project ABC',\n      time: '05:00 PM',\n      state: 'state',\n    },\n  ];\n\n  todolists = [\n    {\n      id: 'id',\n      title: 'Get to know Angular more',\n      time: 'Added:4 days ago',\n    },\n    {\n      id: 'id',\n      title: 'Configure new Router',\n      time: 'Added:4 days ago',\n    },\n    {\n      id: 'id',\n      title: 'Invite Joy to play Carroms',\n      time: 'Added:4 days ago',\n    },\n    {\n      id: 'id',\n      title: 'Check SRS of Project X',\n      time: 'Added:4 days ago',\n    },\n  ];\n\n  messages = [\n    { from: 'Catherin', img: 'assets/img/avatars/4.jpg', subject: 'Shopping', content: 'hi there??' },\n    { from: 'Jack', img: 'assets/img/avatars/16.jpg', subject: 'Function', content: 'yes' },\n    { from: 'Karina', img: 'assets/img/avatars/1.jpg', subject: 'Get together', content: 'nice' },\n    { from: 'Micheal', img: 'assets/img/avatars/11.jpg', subject: 'Trip', content: 'ya.. I will' },\n    { from: 'Ashik', img: 'assets/img/avatars/19.jpg', subject: 'Meeting', content: 'Time??' },\n    { from: 'Joy', img: 'assets/img/avatars/10.jpg', subject: 'Party', content: 'Lets enjoy' },\n  ];\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<svg width=\"100%\" height=\"4\" focusable=\"false\" class=\"mat-progress-bar-background mat-progress-bar-element\"><defs><pattern [id]=\"progressbarId\" x=\"4\" y=\"0\" width=\"8\" height=\"4\" patternUnits=\"userSpaceOnUse\"><circle cx=\"2\" cy=\"2\" r=\"2\"/></pattern></defs><rect [attr.fill]=\"_rectangleFillValue\" width=\"100%\" height=\"100%\"/></svg><div class=\"mat-progress-bar-buffer mat-progress-bar-element\" [ngStyle]=\"_bufferTransform()\"></div><div class=\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\" [ngStyle]=\"_primaryTransform()\" #primaryValueBar></div><div class=\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\"></div>","<div style=\"position: static;\" [class.ps]=\"usePSClass\" [perfectScrollbar]=\"config\" [disabled]=\"disabled\">\n  <div class=\"ps-content\">\n    <ng-content></ng-content>\n  </div>\n\n  <div *ngIf=\"scrollIndicators\" class=\"ps-overlay\" [class.ps-at-top]=\"states.top\" [class.ps-at-left]=\"states.left\" [class.ps-at-right]=\"states.right\" [class.ps-at-bottom]=\"states.bottom\">\n    <div class=\"ps-indicator-top\" [class.ps-indicator-show]=\"indicatorY && interaction\"></div>\n    <div class=\"ps-indicator-left\" [class.ps-indicator-show]=\"indicatorX && interaction\"></div>\n    <div class=\"ps-indicator-right\" [class.ps-indicator-show]=\"indicatorX && interaction\"></div>\n    <div class=\"ps-indicator-bottom\" [class.ps-indicator-show]=\"indicatorY && interaction\"></div>\n  </div>\n</div>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatRadioGroup)),\n    multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nclass MatRadioChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /**\n         * Selected value for the radio group.\n         */\n        this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Whether the radio group is required.\n         */\n        this._required = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        /** @type {?} */\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            }));\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange((/** @type {?} */ (this._selected)), this._value));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => radio._markForCheck()));\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\nMatRadioGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group',\n                },\n            },] },\n];\n/** @nocollapse */\nMatRadioGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nMatRadioGroup.propDecorators = {\n    change: [{ type: Output }],\n    _radios: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatRadioButton)), { descendants: true },] }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nclass MatRadioButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n/** @type {?} */\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonMixinBase {\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} _changeDetector\n     * @param {?} _focusMonitor\n     * @param {?} _radioDispatcher\n     * @param {?=} _animationMode\n     * @param {?=} _providerOverride\n     */\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /**\n         * The unique ID for the radio button.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        this._value = null;\n        /**\n         * Unregister function for _radioDispatcher\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} name\n             * @return {?}\n             */\n            (id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            }));\n    }\n    /**\n     * Whether this radio button is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newDisabledState = coerceBooleanProperty(value);\n        if (this._disabled !== newDisabledState) {\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Theme color of the radio button.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set color(newValue) { this._color = newValue; }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Focuses the radio button.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        /** @type {?} */\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n}\nMatRadioButton.decorators = [\n    { type: Component, args: [{selector: 'mat-radio-button',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"></div><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}@media (-ms-high-contrast:active){.mat-radio-disabled{opacity:.5}}\"],\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n];\nMatRadioButton.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatRadioModule {\n}\nMatRadioModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatRadioModule, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroup, MatRadioButton };\n//# sourceMappingURL=radio.js.map\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { AuthState } from '@ngx-starter-kit/auth';\n// import { AuthState } from '@ngx-starter-kit/oidc';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n@Component({\n  selector: 'ngx-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss'],\n})\nexport class ToolbarComponent implements OnInit {\n  @Select(AuthState.profile) profile$: Observable<any>;\n  @Input() quickpanel: MatSidenav;\n  @Input() sidenav: MatSidenav;\n  isFullscreen = false;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { ThemePickerModule } from '@ngx-starter-kit/theme-picker';\nimport { NotificationsModule } from '@ngx-starter-kit/notifications';\n\nimport { ToolbarComponent } from './toolbar.component';\nimport { SearchComponent } from './components/search/search.component';\nimport { SearchBarComponent } from './components/search-bar/search-bar.component';\nimport { UserMenuComponent } from './components/user-menu/user-menu.component';\nimport { FullscreenToggleComponent } from './components/fullscreen-toggle/fullscreen-toggle.component';\nimport { SidenavToggleComponent } from './components/sidenav-toggle/sidenav-toggle.component';\nimport { QuickpanelToggleComponent } from './components/quickpanel-toggle/quickpanel-toggle.component';\nimport { SharedFlexLayoutModule } from '@ngx-starter-kit/shared';\nimport { ClickOutsideModule } from '@ngx-starter-kit/ngx-utils';\n\nconst matModules = [\n  MatToolbarModule,\n  MatButtonModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatListModule,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    [...matModules],\n    ClickOutsideModule,\n    SharedFlexLayoutModule,\n    ThemePickerModule,\n    RouterModule,\n    NotificationsModule,\n  ],\n  exports: [ToolbarComponent],\n  declarations: [\n    ToolbarComponent,\n    SearchComponent,\n    SearchBarComponent,\n    UserMenuComponent,\n    FullscreenToggleComponent,\n    SidenavToggleComponent,\n    QuickpanelToggleComponent,\n  ],\n})\nexport class ToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, ElementRef, NgZone, InjectionToken, ViewContainerRef, Directive, Attribute, ContentChild, ɵɵdefineInjectable } from '@angular/core';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, SPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n    return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Datepicker data that requires internationalization.\n */\nclass MatDatepickerIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the calendar popup (used by screen readers).\n         */\n        this.calendarLabel = 'Calendar';\n        /**\n         * A label for the button used to open the calendar popup (used by screen readers).\n         */\n        this.openCalendarLabel = 'Open calendar';\n        /**\n         * A label for the previous month button (used by screen readers).\n         */\n        this.prevMonthLabel = 'Previous month';\n        /**\n         * A label for the next month button (used by screen readers).\n         */\n        this.nextMonthLabel = 'Next month';\n        /**\n         * A label for the previous year button (used by screen readers).\n         */\n        this.prevYearLabel = 'Previous year';\n        /**\n         * A label for the next year button (used by screen readers).\n         */\n        this.nextYearLabel = 'Next year';\n        /**\n         * A label for the previous multi-year button (used by screen readers).\n         */\n        this.prevMultiYearLabel = 'Previous 20 years';\n        /**\n         * A label for the next multi-year button (used by screen readers).\n         */\n        this.nextMultiYearLabel = 'Next 20 years';\n        /**\n         * A label for the 'switch to month view' button (used by screen readers).\n         */\n        this.switchToMonthViewLabel = 'Choose date';\n        /**\n         * A label for the 'switch to year view' button (used by screen readers).\n         */\n        this.switchToMultiYearViewLabel = 'Choose month and year';\n    }\n}\nMatDatepickerIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatDatepickerIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nclass MatCalendarCell {\n    /**\n     * @param {?} value\n     * @param {?} displayValue\n     * @param {?} ariaLabel\n     * @param {?} enabled\n     * @param {?=} cssClasses\n     */\n    constructor(value, displayValue, ariaLabel, enabled, cssClasses) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n    }\n}\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nclass MatCalendarBody {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _ngZone) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * The number of columns in the table.\n         */\n        this.numCols = 7;\n        /**\n         * The cell number of the active cell in the table.\n         */\n        this.activeCell = 0;\n        /**\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n         * maintained even as the table resizes.\n         */\n        this.cellAspectRatio = 1;\n        /**\n         * Emits when a new value is selected.\n         */\n        this.selectedValueChange = new EventEmitter();\n    }\n    /**\n     * @param {?} cell\n     * @return {?}\n     */\n    _cellClicked(cell) {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const columnChanges = changes['numCols'];\n        const { rows, numCols } = this;\n        if (changes['rows'] || columnChanges) {\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n            this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n        }\n        if (columnChanges || !this._cellWidth) {\n            this._cellWidth = `${100 / numCols}%`;\n        }\n    }\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    _isActiveCell(rowIndex, colIndex) {\n        /** @type {?} */\n        let cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            }));\n        }));\n    }\n}\nMatCalendarBody.decorators = [\n    { type: Component, args: [{selector: '[mat-calendar-body]',\n                template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [ngClass]=\\\"item.cssClasses\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" [attr.aria-selected]=\\\"selectedValue === item.value\\\" (click)=\\\"_cellClicked(item)\\\" [style.width]=\\\"_cellWidth\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n                styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n                host: {\n                    'class': 'mat-calendar-body',\n                    'role': 'grid',\n                    'aria-readonly': 'true'\n                },\n                exportAs: 'matCalendarBody',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendarBody.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nMatCalendarBody.propDecorators = {\n    label: [{ type: Input }],\n    rows: [{ type: Input }],\n    todayValue: [{ type: Input }],\n    selectedValue: [{ type: Input }],\n    labelMinRequiredCells: [{ type: Input }],\n    numCols: [{ type: Input }],\n    activeCell: [{ type: Input }],\n    cellAspectRatio: [{ type: Input }],\n    selectedValueChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMonthView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateFormats\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new date is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        /** @type {?} */\n        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        /** @type {?} */\n        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        /** @type {?} */\n        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        /** @type {?} */\n        let weekdays = longWeekdays.map((/**\n         * @param {?} long\n         * @param {?} i\n         * @return {?}\n         */\n        (long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        }));\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedDate = this._getDateInCurrentMonth(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    _dateSelected(date) {\n        if (this._selectedDate != date) {\n            /** @type {?} */\n            const selectedYear = this._dateAdapter.getYear(this.activeDate);\n            /** @type {?} */\n            const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n            /** @type {?} */\n            const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit();\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n                    this._userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    _init() {\n        this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n        this._monthLabel =\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                .toLocaleUpperCase();\n        /** @type {?} */\n        let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n    _createWeekCells() {\n        /** @type {?} */\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        /** @type {?} */\n        const dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            /** @type {?} */\n            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            /** @type {?} */\n            const enabled = this._shouldEnableDate(date);\n            /** @type {?} */\n            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            /** @type {?} */\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n            this._weeks[this._weeks.length - 1]\n                .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n    /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _shouldEnableDate(date) {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _getDateInCurrentMonth(date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n            this._dateAdapter.getDate(date) : null;\n    }\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    _hasSameMonthAndYear(d1, d2) {\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatMonthView.decorators = [\n    { type: Component, args: [{selector: 'mat-month-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matMonthView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatMonthView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatMonthView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    _userSelection: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst yearsPerPage = 24;\n/** @type {?} */\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMultiYearView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new year is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected year. This doesn't imply a change on the selected date\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this multi-year view (everything other than the year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        let oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n    _init() {\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n        // We want a range years such that we maximize the number of\n        // enabled dates visible at once. This prevents issues where the minimum year\n        // is the last item of a page OR the maximum year is the first item of a page.\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view.\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this._activeDate);\n        /** @type {?} */\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n        this._years = [];\n        for (let i = 0, row = []; i < yearsPerPage; i++) {\n            row.push(minYearOfPage + i);\n            if (row.length == yearsPerRow) {\n                this._years.push(row.map((/**\n                 * @param {?} year\n                 * @return {?}\n                 */\n                year => this._createCellForYear(year))));\n                row = [];\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n    _yearSelected(year) {\n        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n        /** @type {?} */\n        let month = this._dateAdapter.getMonth(this.activeDate);\n        /** @type {?} */\n        let daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    _getActiveCell() {\n        return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    _createCellForYear(year) {\n        /** @type {?} */\n        let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n        return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n    }\n    /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    _shouldEnableYear(year) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatMultiYearView.decorators = [\n    { type: Component, args: [{selector: 'mat-multi-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [rows]=\\\"_years\\\" [todayValue]=\\\"_todayYear\\\" [selectedValue]=\\\"_selectedYear\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_getActiveCell()\\\" (selectedValueChange)=\\\"_yearSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matMultiYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatMultiYearView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatMultiYearView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    yearSelected: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n/**\n * @template D\n * @param {?} dateAdapter\n * @param {?} date1\n * @param {?} date2\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n    /** @type {?} */\n    const year1 = dateAdapter.getYear(date1);\n    /** @type {?} */\n    const year2 = dateAdapter.getYear(date2);\n    /** @type {?} */\n    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n    return Math.floor((year1 - startingYear) / yearsPerPage) ===\n        Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n * @template D\n * @param {?} dateAdapter\n * @param {?} activeDate\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n    /** @type {?} */\n    const activeYear = dateAdapter.getYear(activeDate);\n    return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n * @template D\n * @param {?} dateAdapter\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n    /** @type {?} */\n    let startingYear = 0;\n    if (maxDate) {\n        /** @type {?} */\n        const maxYear = dateAdapter.getYear(maxDate);\n        startingYear = maxYear - yearsPerPage + 1;\n    }\n    else if (minDate) {\n        startingYear = dateAdapter.getYear(minDate);\n    }\n    return startingYear;\n}\n/**\n * Gets remainder that is non-negative, even if first number is negative\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction euclideanModulo(a, b) {\n    return (a % b + b) % b;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatYearView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateFormats\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new month is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected month. This doesn't imply a change on the selected date\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this year view (everything other than the year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        let oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    _monthSelected(month) {\n        /** @type {?} */\n        const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        this.monthSelected.emit(normalizedDate);\n        /** @type {?} */\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * Initializes this year view.\n     * @return {?}\n     */\n    _init() {\n        this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        /** @type {?} */\n        let monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((/**\n         * @param {?} row\n         * @return {?}\n         */\n        row => row.map((/**\n         * @param {?} month\n         * @return {?}\n         */\n        month => this._createCellForMonth(month, monthNames[month])))));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _getMonthInCurrentYear(date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n            this._dateAdapter.getMonth(date) : null;\n    }\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    _createCellForMonth(month, monthName) {\n        /** @type {?} */\n        let ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n    }\n    /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n    _shouldEnableMonth(month) {\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this.activeDate);\n        if (month === undefined || month === null ||\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    _isYearAndMonthAfterMaxDate(year, month) {\n        if (this.maxDate) {\n            /** @type {?} */\n            const maxYear = this._dateAdapter.getYear(this.maxDate);\n            /** @type {?} */\n            const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    _isYearAndMonthBeforeMinDate(year, month) {\n        if (this.minDate) {\n            /** @type {?} */\n            const minYear = this._dateAdapter.getYear(this.minDate);\n            /** @type {?} */\n            const minMonth = this._dateAdapter.getMonth(this.minDate);\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatYearView.decorators = [\n    { type: Component, args: [{selector: 'mat-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatYearView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatYearView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default header for MatCalendar\n * @template D\n */\nclass MatCalendarHeader {\n    /**\n     * @param {?} _intl\n     * @param {?} calendar\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} changeDetectorRef\n     */\n    constructor(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n        this._intl = _intl;\n        this.calendar = calendar;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this.calendar.stateChanges.subscribe((/**\n         * @return {?}\n         */\n        () => changeDetectorRef.markForCheck()));\n    }\n    /**\n     * The label for the current calendar view.\n     * @return {?}\n     */\n    get periodButtonText() {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter\n                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                .toLocaleUpperCase();\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYearName(this.calendar.activeDate);\n        }\n        // The offset from the active year to the \"slot\" for the starting year is the\n        // *actual* first rendered year in the multi-year view, and the last year is\n        // just yearsPerPage - 1 away.\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n        /** @type {?} */\n        const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n        /** @type {?} */\n        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n        return `${minYearOfPage} \\u2013 ${maxYearOfPage}`;\n    }\n    /**\n     * @return {?}\n     */\n    get periodButtonLabel() {\n        return this.calendar.currentView == 'month' ?\n            this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n    }\n    /**\n     * The label for the previous button.\n     * @return {?}\n     */\n    get prevButtonLabel() {\n        return {\n            'month': this._intl.prevMonthLabel,\n            'year': this._intl.prevYearLabel,\n            'multi-year': this._intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n    /**\n     * The label for the next button.\n     * @return {?}\n     */\n    get nextButtonLabel() {\n        return {\n            'month': this._intl.nextMonthLabel,\n            'year': this._intl.nextYearLabel,\n            'multi-year': this._intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    currentPeriodClicked() {\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    previousClicked() {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    nextClicked() {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    previousEnabled() {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n        return !this.calendar.minDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    nextEnabled() {\n        return !this.calendar.maxDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    _isSameView(date1, date2) {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n        }\n        // Otherwise we are in 'multi-year' view.\n        return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n    }\n}\nMatCalendarHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-calendar-header',\n                template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\" (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\" cdkAriaLive=\\\"polite\\\">{{periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><ng-content></ng-content><button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\" [attr.aria-label]=\\\"prevButtonLabel\\\"></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\" [attr.aria-label]=\\\"nextButtonLabel\\\"></button></div></div>\",\n                exportAs: 'matCalendarHeader',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendarHeader.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: MatCalendar, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatCalendar)),] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: ChangeDetectorRef }\n];\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatCalendar {\n    /**\n     * @param {?} _intl\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Used for scheduling that focus should be moved to the active cell on the next tick.\n         * We need to schedule it, rather than do it immediately, because we have to wait\n         * for Angular to re-evaluate the view children.\n         */\n        this._moveFocusOnNextTick = false;\n        /**\n         * Whether the calendar should be started in month or year view.\n         */\n        this.startView = 'month';\n        /**\n         * Emits when the currently selected date changes.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the year chosen in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits the month chosen in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits whenever there is a state change that the header may need to respond to.\n         */\n        this.stateChanges = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._intlChanges = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            _changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * A date representing the period (month or year) to start the calendar in.\n     * @return {?}\n     */\n    get startAt() { return this._startAt; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set startAt(value) {\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     * @return {?}\n     */\n    get activeDate() { return this._clampedActiveDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether the calendar is in month view.\n     * @return {?}\n     */\n    get currentView() { return this._currentView; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set currentView(value) {\n        this._currentView = value;\n        this._moveFocusOnNextTick = true;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n        this.activeDate = this.startAt || this._dateAdapter.today();\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        if (this._moveFocusOnNextTick) {\n            this._moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n        if (change && !change.firstChange) {\n            /** @type {?} */\n            const view = this._getCurrentViewComponent();\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                this._changeDetectorRef.detectChanges();\n                view._init();\n            }\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    focusActiveCell() {\n        this._getCurrentViewComponent()._focusActiveCell();\n    }\n    /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n    updateTodaysDate() {\n        /** @type {?} */\n        let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n        view.ngAfterContentInit();\n    }\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    _dateSelected(date) {\n        if (!this._dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n    /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    _yearSelectedInMultiYearView(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    _monthSelectedInYearView(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * @return {?}\n     */\n    _userSelected() {\n        this._userSelection.emit();\n    }\n    /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n    _goToDateInView(date, view) {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n    _getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\nMatCalendar.decorators = [\n    { type: Component, args: [{selector: 'mat-calendar',\n                template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template><div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\"><mat-month-view *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" [dateClass]=\\\"dateClass\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchCase=\\\"'year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\\\"'multi-year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view></div>\",\n                styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n                host: {\n                    'class': 'mat-calendar',\n                },\n                exportAs: 'matCalendar',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendar.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: ChangeDetectorRef }\n];\nMatCalendar.propDecorators = {\n    headerComponent: [{ type: Input }],\n    startAt: [{ type: Input }],\n    startView: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    yearSelected: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    _userSelection: [{ type: Output }],\n    monthView: [{ type: ViewChild, args: [MatMonthView, { static: false },] }],\n    yearView: [{ type: ViewChild, args: [MatYearView, { static: false },] }],\n    multiYearView: [{ type: ViewChild, args: [MatMultiYearView, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\nconst matDatepickerAnimations = {\n    /**\n     * Transforms the height of the datepicker's calendar.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * Fades in the content of the calendar.\n     */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n        // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nclass MatDatepickerContentBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\nclass MatDatepickerContent extends _MatDatepickerContentMixinBase {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        super(elementRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._calendar.focusActiveCell();\n    }\n}\nMatDatepickerContent.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker-content',\n                template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\" [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\" (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\" (monthSelected)=\\\"datepicker._selectMonth($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n                styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n                host: {\n                    'class': 'mat-datepicker-content',\n                    '[@transformPanel]': '\"enter\"',\n                    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                },\n                animations: [\n                    matDatepickerAnimations.transformPanel,\n                    matDatepickerAnimations.fadeInCalendar,\n                ],\n                exportAs: 'matDatepickerContent',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['color'],\n            },] },\n];\n/** @nocollapse */\nMatDatepickerContent.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatDatepickerContent.propDecorators = {\n    _calendar: [{ type: ViewChild, args: [MatCalendar, { static: false },] }]\n};\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\nclass MatDatepicker {\n    /**\n     * @param {?} _dialog\n     * @param {?} _overlay\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _dateAdapter\n     * @param {?} _dir\n     * @param {?} _document\n     */\n    constructor(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._document = _document;\n        /**\n         * The view that the calendar should start in.\n         */\n        this.startView = 'month';\n        this._touchUi = false;\n        /**\n         * Emits selected year in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits selected month in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when the datepicker has been opened.\n         */\n        this.openedStream = new EventEmitter();\n        /**\n         * Emits when the datepicker has been closed.\n         */\n        this.closedStream = new EventEmitter();\n        this._opened = false;\n        /**\n         * The id for the datepicker calendar.\n         */\n        this.id = `mat-datepicker-${datepickerUid++}`;\n        this._validSelected = null;\n        /**\n         * The element that was focused before the datepicker was opened.\n         */\n        this._focusedElementBeforeOpen = null;\n        /**\n         * Subscription to value changes in the associated input element.\n         */\n        this._inputSubscription = Subscription.EMPTY;\n        /**\n         * Emits when the datepicker is disabled.\n         */\n        this._disabledChange = new Subject();\n        /**\n         * Emits new selected date when selected date changes.\n         */\n        this._selectedChanged = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * The date to open the calendar to initially.\n     * @return {?}\n     */\n    get startAt() {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set startAt(value) {\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * Color palette to use on the datepicker's calendar.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._color = value;\n    }\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     * @return {?}\n     */\n    get touchUi() { return this._touchUi; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set touchUi(value) {\n        this._touchUi = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the datepicker pop-up should be disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled === undefined && this._datepickerInput ?\n            this._datepickerInput.disabled : !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._disabledChange.next(newValue);\n        }\n    }\n    /**\n     * Whether the calendar is open.\n     * @return {?}\n     */\n    get opened() { return this._opened; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set opened(value) { value ? this.open() : this.close(); }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get _selected() { return this._validSelected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _selected(value) { this._validSelected = value; }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get _minDate() {\n        return this._datepickerInput && this._datepickerInput.min;\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get _maxDate() {\n        return this._datepickerInput && this._datepickerInput.max;\n    }\n    /**\n     * @return {?}\n     */\n    get _dateFilter() {\n        return this._datepickerInput && this._datepickerInput._dateFilter;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.close();\n        this._inputSubscription.unsubscribe();\n        this._disabledChange.complete();\n        if (this._popupRef) {\n            this._popupRef.dispose();\n            this._popupComponentRef = null;\n        }\n    }\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    select(date) {\n        /** @type {?} */\n        let oldValue = this._selected;\n        this._selected = date;\n        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n            this._selectedChanged.next(date);\n        }\n    }\n    /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    _selectYear(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    _selectMonth(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    _registerInput(input) {\n        if (this._datepickerInput) {\n            throw Error('A MatDatepicker can only be associated with a single input.');\n        }\n        this._datepickerInput = input;\n        this._inputSubscription =\n            this._datepickerInput._valueChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => this._selected = value));\n    }\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n    open() {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this._datepickerInput) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        if (this._document) {\n            this._focusedElementBeforeOpen = this._document.activeElement;\n        }\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\n        this._opened = true;\n        this.openedStream.emit();\n    }\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n    close() {\n        if (!this._opened) {\n            return;\n        }\n        if (this._popupRef && this._popupRef.hasAttached()) {\n            this._popupRef.detach();\n        }\n        if (this._dialogRef) {\n            this._dialogRef.close();\n            this._dialogRef = null;\n        }\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\n            this._calendarPortal.detach();\n        }\n        /** @type {?} */\n        const completeClose = (/**\n         * @return {?}\n         */\n        () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this._focusedElementBeforeOpen = null;\n            }\n        });\n        if (this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this._focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    }\n    /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n    _openAsDialog() {\n        // Usually this would be handled by `open` which ensures that we can only have one overlay\n        // open at a time, however since we reset the variables in async handlers some overlays\n        // may slip through if the user opens and closes multiple times in quick succession (e.g.\n        // by holding down the enter key).\n        if (this._dialogRef) {\n            this._dialogRef.close();\n        }\n        this._dialogRef = this._dialog.open(MatDatepickerContent, {\n            direction: this._dir ? this._dir.value : 'ltr',\n            viewContainerRef: this._viewContainerRef,\n            panelClass: 'mat-datepicker-dialog',\n        });\n        this._dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this.close()));\n        this._dialogRef.componentInstance.datepicker = this;\n        this._setColor();\n    }\n    /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n    _openAsPopup() {\n        if (!this._calendarPortal) {\n            this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        }\n        if (!this._popupRef) {\n            this._createPopup();\n        }\n        if (!this._popupRef.hasAttached()) {\n            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n            this._popupComponentRef.instance.datepicker = this;\n            this._setColor();\n            // Update the position once the calendar has rendered.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._popupRef.updatePosition();\n            }));\n        }\n    }\n    /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n    _createPopup() {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this._createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mat-overlay-transparent-backdrop',\n            direction: this._dir,\n            scrollStrategy: this._scrollStrategy(),\n            panelClass: 'mat-datepicker-popup',\n        });\n        this._popupRef = this._overlay.create(overlayConfig);\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\n            return event.keyCode === ESCAPE ||\n                (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n        })))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (event) {\n                event.preventDefault();\n            }\n            this.close();\n        }));\n    }\n    /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n    _createPopupPositionStrategy() {\n        return this._overlay.position()\n            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n            .withTransformOriginOn('.mat-datepicker-content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n    _setColor() {\n        /** @type {?} */\n        const color = this.color;\n        if (this._popupComponentRef) {\n            this._popupComponentRef.instance.color = color;\n        }\n        if (this._dialogRef) {\n            this._dialogRef.componentInstance.color = color;\n        }\n    }\n}\nMatDatepicker.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker',\n                template: '',\n                exportAs: 'matDatepicker',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDatepicker.ctorParameters = () => [\n    { type: MatDialog },\n    { type: Overlay },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatDatepicker.propDecorators = {\n    calendarHeaderComponent: [{ type: Input }],\n    startAt: [{ type: Input }],\n    startView: [{ type: Input }],\n    color: [{ type: Input }],\n    touchUi: [{ type: Input }],\n    disabled: [{ type: Input }],\n    yearSelected: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    panelClass: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    openedStream: [{ type: Output, args: ['opened',] }],\n    closedStream: [{ type: Output, args: ['closed',] }],\n    opened: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatDatepickerInput)),\n    multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatDatepickerInput)),\n    multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nclass MatDatepickerInputEvent {\n    /**\n     * @param {?} target\n     * @param {?} targetElement\n     */\n    constructor(target, targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n}\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\nclass MatDatepickerInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _formField\n     */\n    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {\n        this._elementRef = _elementRef;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._formField = _formField;\n        /**\n         * Emits when a `change` event is fired on this `<input>`.\n         */\n        this.dateChange = new EventEmitter();\n        /**\n         * Emits when an `input` event is fired on this `<input>`.\n         */\n        this.dateInput = new EventEmitter();\n        /**\n         * Emits when the value changes (either due to user input or programmatic change).\n         */\n        this._valueChange = new EventEmitter();\n        /**\n         * Emits when the disabled state has changed\n         */\n        this._disabledChange = new EventEmitter();\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._cvaOnChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._validatorOnChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._datepickerSubscription = Subscription.EMPTY;\n        this._localeSubscription = Subscription.EMPTY;\n        /**\n         * The form control validator for whether the input parses.\n         */\n        this._parseValidator = (/**\n         * @return {?}\n         */\n        () => {\n            return this._lastValueValid ?\n                null : { 'matDatepickerParse': { 'text': this._elementRef.nativeElement.value } };\n        });\n        /**\n         * The form control validator for the min date.\n         */\n        this._minValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return (!this.min || !controlValue ||\n                this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n                null : { 'matDatepickerMin': { 'min': this.min, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the max date.\n         */\n        this._maxValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return (!this.max || !controlValue ||\n                this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n                null : { 'matDatepickerMax': { 'max': this.max, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the date filter.\n         */\n        this._filterValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n                null : { 'matDatepickerFilter': true };\n        });\n        /**\n         * The combined form control validator for this input.\n         */\n        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n        /**\n         * Whether the last value set on the input was valid.\n         */\n        this._lastValueValid = false;\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.value = this.value;\n        }));\n    }\n    /**\n     * The datepicker that this input is associated with.\n     * @param {?} value\n     * @return {?}\n     */\n    set matDatepicker(value) {\n        if (!value) {\n            return;\n        }\n        this._datepicker = value;\n        this._datepicker._registerInput(this);\n        this._datepickerSubscription.unsubscribe();\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((/**\n         * @param {?} selected\n         * @return {?}\n         */\n        (selected) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }));\n    }\n    /**\n     * Function that can be used to filter out dates within the datepicker.\n     * @param {?} value\n     * @return {?}\n     */\n    set matDatepickerFilter(value) {\n        this._dateFilter = value;\n        this._validatorOnChange();\n    }\n    /**\n     * The value of the input.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        value = this._dateAdapter.deserialize(value);\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\n        value = this._getValidDateOrNull(value);\n        /** @type {?} */\n        const oldDate = this.value;\n        this._value = value;\n        this._formatValue(value);\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\n            this._valueChange.emit(value);\n        }\n    }\n    /**\n     * The minimum valid date.\n     * @return {?}\n     */\n    get min() { return this._min; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set min(value) {\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._validatorOnChange();\n    }\n    /**\n     * The maximum valid date.\n     * @return {?}\n     */\n    get max() { return this._max; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set max(value) {\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._validatorOnChange();\n    }\n    /**\n     * Whether the datepicker-input is disabled.\n     * @return {?}\n     */\n    get disabled() { return !!this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disabledChange.emit(newValue);\n        }\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._datepickerSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this._valueChange.complete();\n        this._disabledChange.complete();\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) {\n        this._validatorOnChange = fn;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n        return this._validator ? this._validator(c) : null;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n    getPopupConnectionElementRef() {\n        return this.getConnectedOverlayOrigin();\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._cvaOnChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        /** @type {?} */\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n            this._datepicker.open();\n            event.preventDefault();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _onInput(value) {\n        /** @type {?} */\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\n        date = this._getValidDateOrNull(date);\n        if (!this._dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this._cvaOnChange(date);\n            this._valueChange.emit(date);\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n        else {\n            this._validatorOnChange();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onChange() {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n    _getThemePalette() {\n        return this._formField ? this._formField.color : undefined;\n    }\n    /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n    _onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this._formatValue(this.value);\n        }\n        this._onTouched();\n    }\n    /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _formatValue(value) {\n        this._elementRef.nativeElement.value =\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\nMatDatepickerInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matDatepicker]',\n                providers: [\n                    MAT_DATEPICKER_VALUE_ACCESSOR,\n                    MAT_DATEPICKER_VALIDATORS,\n                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                ],\n                host: {\n                    'aria-haspopup': 'dialog',\n                    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                    '[disabled]': 'disabled',\n                    '(input)': '_onInput($event.target.value)',\n                    '(change)': '_onChange()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                },\n                exportAs: 'matDatepickerInput',\n            },] },\n];\n/** @nocollapse */\nMatDatepickerInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: MatFormField, decorators: [{ type: Optional }] }\n];\nMatDatepickerInput.propDecorators = {\n    matDatepicker: [{ type: Input }],\n    matDatepickerFilter: [{ type: Input }],\n    value: [{ type: Input }],\n    min: [{ type: Input }],\n    max: [{ type: Input }],\n    disabled: [{ type: Input }],\n    dateChange: [{ type: Output }],\n    dateInput: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\nclass MatDatepickerToggleIcon {\n}\nMatDatepickerToggleIcon.decorators = [\n    { type: Directive, args: [{\n                selector: '[matDatepickerToggleIcon]'\n            },] },\n];\n/**\n * @template D\n */\nclass MatDatepickerToggle {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     * @param {?} defaultTabIndex\n     */\n    constructor(_intl, _changeDetectorRef, defaultTabIndex) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._stateChanges = Subscription.EMPTY;\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n    /**\n     * Whether the toggle button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        if (this._disabled === undefined && this.datepicker) {\n            return this.datepicker.disabled;\n        }\n        return !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['datepicker']) {\n            this._watchStateChanges();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._watchStateChanges();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _open(event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _watchStateChanges() {\n        /** @type {?} */\n        const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n        /** @type {?} */\n        const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n            this.datepicker._datepickerInput._disabledChange : of();\n        /** @type {?} */\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            of();\n        this._stateChanges.unsubscribe();\n        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n}\nMatDatepickerToggle.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker-toggle',\n                template: \"<button #button mat-icon-button type=\\\"button\\\" aria-haspopup=\\\"dialog\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" [disableRipple]=\\\"disableRipple\\\" (click)=\\\"_open($event)\\\"><svg *ngIf=\\\"!_customIcon\\\" class=\\\"mat-datepicker-toggle-default-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" fill=\\\"currentColor\\\" focusable=\\\"false\\\"><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg><ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content></button>\",\n                styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n                host: {\n                    'class': 'mat-datepicker-toggle',\n                    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n                    // consumer may have provided, while still being able to receive focus.\n                    '[attr.tabindex]': '-1',\n                    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                    '(focus)': '_button.focus()',\n                },\n                exportAs: 'matDatepickerToggle',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatDatepickerToggle.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatDatepickerToggle.propDecorators = {\n    datepicker: [{ type: Input, args: ['for',] }],\n    tabIndex: [{ type: Input }],\n    disabled: [{ type: Input }],\n    disableRipple: [{ type: Input }],\n    _customIcon: [{ type: ContentChild, args: [MatDatepickerToggleIcon, { static: false },] }],\n    _button: [{ type: ViewChild, args: ['button', { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDatepickerModule {\n}\nMatDatepickerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatDialogModule,\n                    OverlayModule,\n                    A11yModule,\n                    PortalModule,\n                ],\n                exports: [\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                ],\n                declarations: [\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                ],\n                providers: [\n                    MatDatepickerIntl,\n                    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                ],\n                entryComponents: [\n                    MatDatepickerContent,\n                    MatCalendarHeader,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatMultiYearView, yearsPerPage, yearsPerRow, MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView };\n//# sourceMappingURL=datepicker.js.map\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\n\nexport interface Crumb {\n  name: string;\n  link?: string;\n}\n@Component({\n  selector: 'ngx-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbsComponent implements OnInit {\n  @Input()\n  readonly title: string;\n  @Input()\n  crumbs: ReadonlyArray<Crumb>;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<mat-tab-header #tabHeader [selectedIndex]=\"selectedIndex\" [disableRipple]=\"disableRipple\" (indexFocused)=\"_focusChanged($event)\" (selectFocusedIndex)=\"selectedIndex = $event\"><div class=\"mat-tab-label\" role=\"tab\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabLabelId(i)\" [attr.tabIndex]=\"_getTabIndex(tab, i)\" [attr.aria-posinset]=\"i + 1\" [attr.aria-setsize]=\"_tabs.length\" [attr.aria-controls]=\"_getTabContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [attr.aria-label]=\"tab.ariaLabel || null\" [attr.aria-labelledby]=\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\" [class.mat-tab-label-active]=\"selectedIndex == i\" [disabled]=\"tab.disabled\" [matRippleDisabled]=\"tab.disabled || disableRipple\" (click)=\"_handleClick(tab, tabHeader, i)\"><div class=\"mat-tab-label-content\"><ng-template [ngIf]=\"tab.templateLabel\"><ng-template [cdkPortalOutlet]=\"tab.templateLabel\"></ng-template></ng-template><ng-template [ngIf]=\"!tab.templateLabel\">{{tab.textLabel}}</ng-template></div></div></mat-tab-header><div class=\"mat-tab-body-wrapper\" [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\" #tabBodyWrapper><mat-tab-body role=\"tabpanel\" *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabContentId(i)\" [attr.aria-labelledby]=\"_getTabLabelId(i)\" [class.mat-tab-body-active]=\"selectedIndex == i\" [content]=\"tab.content\" [position]=\"tab.position\" [origin]=\"tab.origin\" [animationDuration]=\"animationDuration\" (_onCentered)=\"_removeTabBodyWrapperHeight()\" (_onCentering)=\"_setTabBodyWrapperHeight($event)\"></mat-tab-body></div>","<div class=\"mat-tab-body-content\" #content [@translateTab]=\"{\n        value: _position,\n        params: {animationDuration: animationDuration}\n     }\" (@translateTab.start)=\"_onTranslateTabStarted($event)\" (@translateTab.done)=\"_translateTabComplete.next($event)\"><ng-template matTabBodyHost></ng-template></div>","<div class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\" #previousPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollBefore || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\" (click)=\"_handlePaginatorClick('before')\" (mousedown)=\"_handlePaginatorPress('before')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div><div class=\"mat-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\"><div #tabList class=\"mat-tab-list\" [class._mat-animation-noopable]=\"_animationMode === 'NoopAnimations'\" role=\"tablist\" (cdkObserveContent)=\"_onContentChanges()\"><div class=\"mat-tab-labels\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\" #nextPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollAfter || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\" (mousedown)=\"_handlePaginatorPress('after')\" (click)=\"_handlePaginatorClick('after')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div>","<ng-template><ng-content></ng-content></ng-template>","<div class=\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\" #previousPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollBefore || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollBefore\" (click)=\"_handlePaginatorClick('before')\" (mousedown)=\"_handlePaginatorPress('before')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div><div class=\"mat-tab-link-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\"><div class=\"mat-tab-list\" #tabList (cdkObserveContent)=\"_onContentChanges()\"><div class=\"mat-tab-links\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\" #nextPaginator aria-hidden=\"true\" mat-ripple [matRippleDisabled]=\"_disableScrollAfter || disableRipple\" [class.mat-tab-header-pagination-disabled]=\"_disableScrollAfter\" (mousedown)=\"_handlePaginatorPress('after')\" (click)=\"_handlePaginatorClick('after')\" (touchend)=\"_stopInterval()\"><div class=\"mat-tab-header-pagination-chevron\"></div></div>","<mat-tab-group>\n  <mat-tab label=\"Overview\">\n    <div class=\"sidebar\">\n      <div\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center center\"\n        style=\"padding: 30px 0; background: url('assets/img/bg/city1.jpg');\"\n      >\n        <div style=\"width: 100%; height: 22%; position: absolute;background: #17161642;z-index: 1\"></div>\n        <div class=\"mat-display-2\" style=\"margin: 0; color: white;z-index: 2\">{{ today | date: 'shortTime' }}</div>\n        <div class=\"mat-subheading-2\" style=\"margin: 0;color: white;z-index: 2\">\n          {{ today | date: 'EEEE' }}, {{ today | date: 'MMMM' }} {{ today | date: 'dd' }}\n        </div>\n      </div>\n\n      <mat-divider></mat-divider>\n\n      <h3 class=\"mat-subheading-2\" style=\"margin: 10px 14px 0;\">Upcoming Events</h3>\n      <mat-nav-list>\n        <div *ngFor=\"let event of events\">\n          <mat-list-item>\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-ripple>\n              <div fxLayout=\"column\">\n                <div class=\"mat-ubheading-2\" style=\"margin: 0; font-weight: bold;\">{{ event.title }}</div>\n                <div style=\"font-size: 12px;\">{{ event.time }}</div>\n              </div>\n            </div>\n          </mat-list-item>\n        </div>\n      </mat-nav-list>\n\n      <mat-divider></mat-divider>\n\n      <mat-nav-list>\n        <h3 class=\"mat-subheading-2\" style=\"margin: 10px 14px 0;\">Todo-List</h3>\n        <div *ngFor=\"let todolist of todolists\">\n          <mat-list-item>\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" mat-ripple>\n              <div class=\"title\" fxLayout=\"column\">\n                <div class=\"mat-ubheading-2\" style=\"margin: 0; font-weight: bold;\">{{ todolist.title }}</div>\n                <div style=\"font-size: 12px;\">{{ todolist.time }}</div>\n              </div>\n            </div>\n          </mat-list-item>\n        </div>\n      </mat-nav-list>\n\n      <mat-divider></mat-divider>\n    </div>\n  </mat-tab>\n\n  <mat-tab label=\"Notifications\">\n    <div class=\"sidebar\">\n      <div>\n        <h3 style=\"margin: 10px 14px 0;\">Friends</h3>\n\n        <mat-list>\n          <mat-list-item *ngFor=\"let message of messages\">\n            <img matListAvatar [src]=\"message.img\" alt=\"...\" />\n            <h3 matLine style=\"margin: 0; font-weight: bold;\">{{ message.from }}</h3>\n            <p matLine>\n              <span> {{ message.subject }} </span> <span> -- {{ message.content }} </span>\n            </p>\n          </mat-list-item>\n        </mat-list>\n      </div>\n    </div>\n  </mat-tab>\n</mat-tab-group>\n\n<mat-divider></mat-divider>\n\n<mat-nav-list>\n  <div>\n    <h3 class=\"mat-subheading-2\" style=\"margin: 10px 14px 0;\">Server Statistics</h3>\n    <div>\n      <mat-list-item>\n        <h5>CPU Load</h5>\n        <mat-progress-bar [color]=\"'accent'\" [mode]=\"'buffer'\" [value]=\"'70'\" [bufferValue]=\"100\">></mat-progress-bar>\n      </mat-list-item>\n    </div>\n\n    <div>\n      <mat-list-item>\n        <h5>RAM Usage</h5>\n        <mat-progress-bar [color]=\"'primary'\" [mode]=\"'buffer'\" [value]=\"'47'\" [bufferValue]=\"100\"></mat-progress-bar>\n      </mat-list-item>\n    </div>\n\n    <div>\n      <mat-list-item>\n        <h5>CPU Temp</h5>\n        <mat-progress-bar [color]=\"'warn'\" [mode]=\"'buffer'\" [value]=\"'43'\" [bufferValue]=\"100\"></mat-progress-bar>\n      </mat-list-item>\n    </div>\n  </div>\n</mat-nav-list>\n","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from '../../toDate/index.js';\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from '../../toDate/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import getUTCISOWeekYear from '../getUTCISOWeekYear/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import lightFormatters from '../lightFormatters/index.js';\nimport getUTCDayOfYear from '../../../_lib/getUTCDayOfYear/index.js';\nimport getUTCISOWeek from '../../../_lib/getUTCISOWeek/index.js';\nimport getUTCISOWeekYear from '../../../_lib/getUTCISOWeekYear/index.js';\nimport getUTCWeek from '../../../_lib/getUTCWeek/index.js';\nimport getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport addLeadingZeros from '../../addLeadingZeros/index.js';\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n  /*\n   * |     | Unit                           |     | Unit                           |\n   * |-----|--------------------------------|-----|--------------------------------|\n   * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n   * |  d  | Day of month                   |  D  | Day of year                    |\n   * |  e  | Local day of week              |  E  | Day of week                    |\n   * |  f  |                                |  F* | Day of week in month           |\n   * |  g* | Modified Julian day            |  G  | Era                            |\n   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n   * |  i! | ISO day of week                |  I! | ISO week of year               |\n   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n   * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n   * |  m  | Minute                         |  M  | Month                          |\n   * |  n  |                                |  N  |                                |\n   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n   * |  p! | Long localized time            |  P! | Long localized date            |\n   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n   * |  s  | Second                         |  S  | Fraction of second             |\n   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n   * |  u  | Extended year                  |  U* | Cyclic year                    |\n   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n   * |  w  | Local week of year             |  W* | Week of month                  |\n   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n   *\n   * Letters marked by * are not implemented but reserved by Unicode standard.\n   *\n   * Letters marked by ! are non-standard, but implemented by date-fns:\n   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n   *   i.e. 7 for Sunday, 1 for Monday, etc.\n   * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n   *   `R` is supposed to be used in conjunction with `I` and `i`\n   *   for universal ISO week-numbering date, whereas\n   *   `Y` is supposed to be used in conjunction with `w` and `e`\n   *   for week-numbering date specific to the locale.\n   * - `P` is long localized date format\n   * - `p` is long localized time format\n   */\n\n};\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token) {\n  if (token === 'YYYY') {\n    throw new RangeError('Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'YY') {\n    throw new RangeError('Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr');\n  } else if (token === 'D') {\n    throw new RangeError('Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr');\n  } else if (token === 'DD') {\n    throw new RangeError('Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr');\n  }\n}","import isValid from '../isValid/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport formatters from '../_lib/format/formatters/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js'; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'(.*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from '../toDate/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `true`        |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, ChangeDetectionStrategy, ElementRef, Inject, Input, Output, EventEmitter, Optional, NgZone, ViewEncapsulation, ViewChild, InjectionToken, inject, NgModule } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatProgressBar.\n/**\n * \\@docs-private\n */\nclass MatProgressBarBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n * @type {?}\n */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?=} _animationMode\n     * @param {?=} location\n     */\n    constructor(_elementRef, _ngZone, _animationMode, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        /**\n         * Flag that indicates whether NoopAnimations mode is set to true.\n         */\n        this._isNoopAnimation = false;\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Event emitted when animation of the primary progress bar completes. This event will not\n         * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n         * animations (indeterminate and query).\n         */\n        this.animationEnd = new EventEmitter();\n        /**\n         * Reference to animation end subscription to be unsubscribed on destroy.\n         */\n        this._animationEndSubscription = Subscription.EMPTY;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n        /**\n         * ID of the progress bar.\n         */\n        this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n        // We need to prefix the SVG reference with the current path, otherwise they won't work\n        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n        // because named route URLs can contain parentheses (see #12338). Also we don't use since\n        // we can't tell the difference between whether\n        // the consumer is using the hash location strategy or not, because `Location` normalizes\n        // both `/#/foo/bar` and `/foo/bar` to the same thing.\n        /** @type {?} */\n        const path = location ? location.getPathname().split('#')[0] : '';\n        this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n        this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    }\n    /**\n     * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set value(v) {\n        this._value = clamp(v || 0);\n        // When noop animation is set to true, trigger animationEnd directly.\n        if (this._isNoopAnimation) {\n            this._emitAnimationEnd();\n        }\n    }\n    /**\n     * Buffer value of the progress bar. Defaults to zero.\n     * @return {?}\n     */\n    get bufferValue() { return this._bufferValue; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set bufferValue(v) { this._bufferValue = clamp(v || 0); }\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    _primaryTransform() {\n        /** @type {?} */\n        const scale = this.value / 100;\n        return { transform: `scaleX(${scale})` };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    _bufferTransform() {\n        if (this.mode === 'buffer') {\n            /** @type {?} */\n            const scale = this.bufferValue / 100;\n            return { transform: `scaleX(${scale})` };\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!this._isNoopAnimation) {\n            // Run outside angular so change detection didn't get triggered on every transition end\n            // instead only on the animation that we care about (primary value bar's transitionend)\n            this._ngZone.runOutsideAngular(((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const element = this._primaryValueBar.nativeElement;\n                this._animationEndSubscription =\n                    ((/** @type {?} */ (fromEvent(element, 'transitionend'))))\n                        .pipe(filter(((/**\n                     * @param {?} e\n                     * @return {?}\n                     */\n                    (e) => e.target === element))))\n                        .subscribe((/**\n                     * @return {?}\n                     */\n                    () => this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    () => this._emitAnimationEnd()))));\n            })));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._animationEndSubscription.unsubscribe();\n    }\n    /**\n     * Emit an animationEnd event if in determinate or buffer mode.\n     * @private\n     * @return {?}\n     */\n    _emitAnimationEnd() {\n        if (this.mode === 'determinate' || this.mode === 'buffer') {\n            this.animationEnd.next({ value: this.value });\n        }\n    }\n}\nMatProgressBar.decorators = [\n    { type: Component, args: [{selector: 'mat-progress-bar',\n                exportAs: 'matProgressBar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                    '[attr.mode]': 'mode',\n                    'class': 'mat-progress-bar',\n                    '[class._mat-animation-noopable]': '_isNoopAnimation',\n                },\n                inputs: ['color'],\n                template: \"<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\"><defs><pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\"><circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/></pattern></defs><rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/></svg><div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div><div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div><div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\",\n                styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-background{display:none}}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}@media (-ms-high-contrast:active){.mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after{animation:none;transition:none}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\"],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatProgressBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PROGRESS_BAR_LOCATION,] }] }\n];\nMatProgressBar.propDecorators = {\n    value: [{ type: Input }],\n    bufferValue: [{ type: Input }],\n    _primaryValueBar: [{ type: ViewChild, args: ['primaryValueBar', { static: false },] }],\n    animationEnd: [{ type: Output }],\n    mode: [{ type: Input }]\n};\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressBarModule {\n}\nMatProgressBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatProgressBar, MatCommonModule],\n                declarations: [MatProgressBar],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatProgressBarModule, MAT_PROGRESS_BAR_LOCATION_FACTORY, MAT_PROGRESS_BAR_LOCATION, MatProgressBar };\n//# sourceMappingURL=progress-bar.js.map\n","import { Entity } from '@ngx-starter-kit/shared';\n\nexport enum TargetType {\n  ALL = 'all',\n  USER = 'user',\n  TOPIC = 'topic',\n}\nexport enum NotificationColor {\n  WARN = 'warn',\n  ACCENT = 'accent',\n  PRIMARY = 'primary',\n}\n\nexport enum NotificationIcon {\n  NOTIFICATIONS = 'notifications',\n  NOTIFICATIONS_ACTIVE = 'notifications_active',\n  SHOPPING_BASKET = 'shopping_basket',\n  EJECT = 'eject',\n  CACHED = 'cached',\n  CODE = 'code',\n}\n\nexport class AppNotification extends Entity {\n  public id: number;\n  public title: string;\n  public body: string;\n  public target: string;\n  public targetType: TargetType;\n  public icon: NotificationIcon;\n  public color: NotificationColor;\n  public read: boolean;\n  public native: boolean;\n  public isActive: boolean;\n  public createdAt: Date;\n  public updatedAt?: Date;\n}\n","import { NgModule } from '@angular/core';\n\nimport { MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatDateFormats, MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\n\nconst MODULE_EXPORTS = [MatDatepickerModule, MatNativeDateModule];\n\nconst DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: 'LL',\n  },\n  display: {\n    dateInput: 'LL',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@NgModule({\n  exports: MODULE_EXPORTS,\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: DATE_FORMATS }, { provide: MAT_DATE_LOCALE, useValue: 'en-GB' }],\n})\nexport class SharedMaterialDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone, Optional, TemplateRef, ChangeDetectionStrategy, Component, ContentChild, Input, ViewChild, ViewContainerRef, ViewEncapsulation, ChangeDetectorRef, Output, EventEmitter, ComponentFactoryResolver, forwardRef, ContentChildren, Attribute, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalHostDirective, PortalModule } from '@angular/cdk/portal';\nimport { mixinDisabled, mixinColor, mixinDisableRipple, MAT_RIPPLE_GLOBAL_OPTIONS, mixinTabIndex, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Subject, Subscription, merge, of, timer, fromEvent } from 'rxjs';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { END, ENTER, HOME, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Platform, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token for the MatInkBar's Positioner.\n * @type {?}\n */\nconst _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * \\@docs-private\n * @return {?}\n */\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n    /** @type {?} */\n    const method = (/**\n     * @param {?} element\n     * @return {?}\n     */\n    (element) => ({\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\n    }));\n    return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nclass MatInkBar {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _inkBarPositioner\n     * @param {?=} _animationMode\n     */\n    constructor(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._inkBarPositioner = _inkBarPositioner;\n        this._animationMode = _animationMode;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param {?} element\n     * @return {?}\n     */\n    alignToElement(element) {\n        this.show();\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => this._setStyles(element)));\n            }));\n        }\n        else {\n            this._setStyles(element);\n        }\n    }\n    /**\n     * Shows the ink bar.\n     * @return {?}\n     */\n    show() {\n        this._elementRef.nativeElement.style.visibility = 'visible';\n    }\n    /**\n     * Hides the ink bar.\n     * @return {?}\n     */\n    hide() {\n        this._elementRef.nativeElement.style.visibility = 'hidden';\n    }\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _setStyles(element) {\n        /** @type {?} */\n        const positions = this._inkBarPositioner(element);\n        /** @type {?} */\n        const inkBar = this._elementRef.nativeElement;\n        inkBar.style.left = positions.left;\n        inkBar.style.width = positions.width;\n    }\n}\nMatInkBar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-ink-bar',\n                host: {\n                    'class': 'mat-ink-bar',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n            },] },\n];\n/** @nocollapse */\nMatInkBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [_MAT_INK_BAR_POSITIONER,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Decorates the `ng-template` tags and reads out the template from it.\n */\nclass MatTabContent {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nMatTabContent.decorators = [\n    { type: Directive, args: [{ selector: '[matTabContent]' },] },\n];\n/** @nocollapse */\nMatTabContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to flag tab labels for use with the portal directive\n */\nclass MatTabLabel extends CdkPortal {\n}\nMatTabLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-tab-label], [matTabLabel]',\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatTab.\n/**\n * \\@docs-private\n */\nclass MatTabBase {\n}\n/** @type {?} */\nconst _MatTabMixinBase = mixinDisabled(MatTabBase);\nclass MatTab extends _MatTabMixinBase {\n    /**\n     * @param {?} _viewContainerRef\n     */\n    constructor(_viewContainerRef) {\n        super();\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Plain text label for the tab, used when there is no template label.\n         */\n        this.textLabel = '';\n        /**\n         * Portal that will be the hosted content of the tab\n         */\n        this._contentPortal = null;\n        /**\n         * Emits whenever the internal state of the tab changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        this.origin = null;\n        /**\n         * Whether the tab is currently active.\n         */\n        this.isActive = false;\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    get content() {\n        return this._contentPortal;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n            this._stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n    }\n}\nMatTab.decorators = [\n    { type: Component, args: [{selector: 'mat-tab',\n                template: \"<ng-template><ng-content></ng-content></ng-template>\",\n                inputs: ['disabled'],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matTab',\n            },] },\n];\n/** @nocollapse */\nMatTab.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\nMatTab.propDecorators = {\n    templateLabel: [{ type: ContentChild, args: [MatTabLabel, { static: false },] }],\n    _explicitContent: [{ type: ContentChild, args: [MatTabContent, { read: TemplateRef, static: true },] }],\n    _implicitContent: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    textLabel: [{ type: Input, args: ['label',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material tabs.\n * \\@docs-private\n * @type {?}\n */\nconst matTabsAnimations = {\n    /**\n     * Animation translates a tab along the X axis.\n     */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\n        transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The portal host directive for the contents of the tab.\n * \\@docs-private\n */\nclass MatTabBodyPortal extends CdkPortalOutlet {\n    /**\n     * @param {?} componentFactoryResolver\n     * @param {?} viewContainerRef\n     * @param {?} _host\n     */\n    constructor(componentFactoryResolver, viewContainerRef, _host) {\n        super(componentFactoryResolver, viewContainerRef);\n        this._host = _host;\n        /**\n         * Subscription to events for when the tab body begins centering.\n         */\n        this._centeringSub = Subscription.EMPTY;\n        /**\n         * Subscription to events for when the tab body finishes leaving from center position.\n         */\n        this._leavingSub = Subscription.EMPTY;\n    }\n    /**\n     * Set initial visibility or set up subscription for changing visibility.\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        this._centeringSub = this._host._beforeCentering\n            .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n            .subscribe((/**\n         * @param {?} isCentering\n         * @return {?}\n         */\n        (isCentering) => {\n            if (isCentering && !this.hasAttached()) {\n                this.attach(this._host._content);\n            }\n        }));\n        this._leavingSub = this._host._afterLeavingCenter.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.detach();\n        }));\n    }\n    /**\n     * Clean up centering subscription.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._centeringSub.unsubscribe();\n        this._leavingSub.unsubscribe();\n    }\n}\nMatTabBodyPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTabBodyHost]'\n            },] },\n];\n/** @nocollapse */\nMatTabBodyPortal.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: MatTabBody, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatTabBody)),] }] }\n];\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nclass MatTabBody {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dir\n     * @param {?} changeDetectorRef\n     */\n    constructor(_elementRef, _dir, changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        /**\n         * Subscription to the directionality change observable.\n         */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /**\n         * Emits when an animation on the tab is complete.\n         */\n        this._translateTabComplete = new Subject();\n        /**\n         * Event emitted when the tab begins to animate towards the center as the active tab.\n         */\n        this._onCentering = new EventEmitter();\n        /**\n         * Event emitted before the centering of the tab begins.\n         */\n        this._beforeCentering = new EventEmitter();\n        /**\n         * Event emitted before the centering of the tab begins.\n         */\n        this._afterLeavingCenter = new EventEmitter();\n        /**\n         * Event emitted when the tab completes its animation towards the center.\n         */\n        this._onCentered = new EventEmitter(true);\n        // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n        // anyway to prevent the animations module from throwing an error if the body is used on its own.\n        /**\n         * Duration for the tab's animation.\n         */\n        this.animationDuration = '500ms';\n        if (_dir) {\n            this._dirChangeSubscription = _dir.change.subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            (dir) => {\n                this._computePositionAnimationState(dir);\n                changeDetectorRef.markForCheck();\n            }));\n        }\n        // Ensure that we get unique animation events, because the `.done` callback can get\n        // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n        this._translateTabComplete.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If the transition to the center is complete, emit an event.\n            if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n                this._onCentered.emit();\n            }\n            if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n                this._afterLeavingCenter.emit();\n            }\n        }));\n    }\n    /**\n     * The shifted index position of the tab body, where zero represents the active center tab.\n     * @param {?} position\n     * @return {?}\n     */\n    set position(position) {\n        this._positionIndex = position;\n        this._computePositionAnimationState();\n    }\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._position == 'center' && this.origin != null) {\n            this._position = this._computePositionFromOrigin();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dirChangeSubscription.unsubscribe();\n        this._translateTabComplete.complete();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onTranslateTabStarted(event) {\n        /** @type {?} */\n        const isCentering = this._isCenterPosition(event.toState);\n        this._beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the provided position state is considered center, regardless of origin.\n     * @param {?} position\n     * @return {?}\n     */\n    _isCenterPosition(position) {\n        return position == 'center' ||\n            position == 'left-origin-center' ||\n            position == 'right-origin-center';\n    }\n    /**\n     * Computes the position state that will be used for the tab-body animation trigger.\n     * @private\n     * @param {?=} dir\n     * @return {?}\n     */\n    _computePositionAnimationState(dir = this._getLayoutDirection()) {\n        if (this._positionIndex < 0) {\n            this._position = dir == 'ltr' ? 'left' : 'right';\n        }\n        else if (this._positionIndex > 0) {\n            this._position = dir == 'ltr' ? 'right' : 'left';\n        }\n        else {\n            this._position = 'center';\n        }\n    }\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     * @private\n     * @return {?}\n     */\n    _computePositionFromOrigin() {\n        /** @type {?} */\n        const dir = this._getLayoutDirection();\n        if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n        return 'right-origin-center';\n    }\n}\nMatTabBody.decorators = [\n    { type: Component, args: [{selector: 'mat-tab-body',\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content [@translateTab]=\\\"{ value: _position, params: {animationDuration: animationDuration} }\\\" (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\" (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"><ng-template matTabBodyHost></ng-template></div>\",\n                styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTabsAnimations.translateTab],\n                host: {\n                    'class': 'mat-tab-body',\n                },\n            },] },\n];\n/** @nocollapse */\nMatTabBody.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef }\n];\nMatTabBody.propDecorators = {\n    _onCentering: [{ type: Output }],\n    _beforeCentering: [{ type: Output }],\n    _afterLeavingCenter: [{ type: Output }],\n    _onCentered: [{ type: Output }],\n    _portalHost: [{ type: ViewChild, args: [PortalHostDirective, { static: false },] }],\n    _content: [{ type: Input, args: ['content',] }],\n    origin: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    position: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/**\n * \\@docs-private\n */\nclass MatTabLabelWrapperBase {\n}\n/** @type {?} */\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * \\@docs-private\n */\nclass MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n    /**\n     * Sets focus on the wrapper element\n     * @return {?}\n     */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    getOffsetLeft() {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n    /**\n     * @return {?}\n     */\n    getOffsetWidth() {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\nMatTabLabelWrapper.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTabLabelWrapper]',\n                inputs: ['disabled'],\n                host: {\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[attr.aria-disabled]': '!!disabled',\n                }\n            },] },\n];\n/** @nocollapse */\nMatTabLabelWrapper.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config used to bind passive event listeners\n * @type {?}\n */\nconst passiveEventListenerOptions = (/** @type {?} */ (normalizePassiveListenerOptions({ passive: true })));\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n * @type {?}\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n * @type {?}\n */\nconst HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n * @type {?}\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n/**\n * Base class for a tab header that supported pagination.\n * @abstract\n */\nclass MatPaginatedTabHeader {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _viewportRuler\n     * @param {?} _dir\n     * @param {?} _ngZone\n     * @param {?=} _platform\n     * @param {?=} _animationMode\n     */\n    constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._animationMode = _animationMode;\n        /**\n         * The distance in pixels that the tab labels should be translated to the left.\n         */\n        this._scrollDistance = 0;\n        /**\n         * Whether the header should scroll to the selected index after the view has been checked.\n         */\n        this._selectedIndexChanged = false;\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Whether the controls for pagination should be displayed\n         */\n        this._showPaginationControls = false;\n        /**\n         * Whether the tab list can be scrolled more towards the end of the tab label list.\n         */\n        this._disableScrollAfter = true;\n        /**\n         * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n         */\n        this._disableScrollBefore = true;\n        /**\n         * Stream that will stop the automated scrolling.\n         */\n        this._stopScrolling = new Subject();\n        this._selectedIndex = 0;\n        /**\n         * Event emitted when the option is selected.\n         */\n        this.selectFocusedIndex = new EventEmitter();\n        /**\n         * Event emitted when a label is focused.\n         */\n        this.indexFocused = new EventEmitter();\n        // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n        _ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            fromEvent(_elementRef.nativeElement, 'mouseleave')\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._stopInterval();\n            }));\n        }));\n    }\n    /**\n     * The index of the active tab.\n     * @return {?}\n     */\n    get selectedIndex() { return this._selectedIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectedIndex(value) {\n        value = coerceNumberProperty(value);\n        if (this._selectedIndex != value) {\n            this._selectedIndexChanged = true;\n            this._selectedIndex = value;\n            if (this._keyManager) {\n                this._keyManager.updateActiveItemIndex(value);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to handle these events manually, because we want to bind passive event listeners.\n        fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._handlePaginatorPress('before');\n        }));\n        fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._handlePaginatorPress('after');\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        /** @type {?} */\n        const dirChange = this._dir ? this._dir.change : of(null);\n        /** @type {?} */\n        const resize = this._viewportRuler.change(150);\n        /** @type {?} */\n        const realign = (/**\n         * @return {?}\n         */\n        () => {\n            this.updatePagination();\n            this._alignInkBarToSelectedTab();\n        });\n        this._keyManager = new FocusKeyManager(this._items)\n            .withHorizontalOrientation(this._getLayoutDirection())\n            .withWrap();\n        this._keyManager.updateActiveItem(0);\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n        // On dir change or window resize, realign the ink bar and update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            realign();\n            this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n        }));\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} newFocusIndex\n         * @return {?}\n         */\n        newFocusIndex => {\n            this.indexFocused.emit(newFocusIndex);\n            this._setTabFocus(newFocusIndex);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._items.length) {\n            this.updatePagination();\n            this._tabLabelCount = this._items.length;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._stopScrolling.complete();\n    }\n    /**\n     * Handles keyboard events on the header.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        // We don't handle any key bindings with a modifier key.\n        if (hasModifierKey(event)) {\n            return;\n        }\n        switch (event.keyCode) {\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                this._itemSelected(event);\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     * @return {?}\n     */\n    _onContentChanges() {\n        /** @type {?} */\n        const textContent = this._elementRef.nativeElement.textContent;\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in (see #14249).\n        if (textContent !== this._currentTextContent) {\n            this._currentTextContent = textContent || '';\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.updatePagination();\n                this._alignInkBarToSelectedTab();\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     * @return {?}\n     */\n    updatePagination() {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    }\n    /**\n     * Tracks which element has focus; used for keyboard navigation\n     * @return {?}\n     */\n    get focusIndex() {\n        return this._keyManager ? (/** @type {?} */ (this._keyManager.activeItemIndex)) : 0;\n    }\n    /**\n     * When the focus index is set, we must manually send focus to the correct label\n     * @param {?} value\n     * @return {?}\n     */\n    set focusIndex(value) {\n        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n            return;\n        }\n        this._keyManager.setActiveItem(value);\n    }\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     * @param {?} index\n     * @return {?}\n     */\n    _isValidIndex(index) {\n        if (!this._items) {\n            return true;\n        }\n        /** @type {?} */\n        const tab = this._items ? this._items.toArray()[index] : null;\n        return !!tab && !tab.disabled;\n    }\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     * @param {?} tabIndex\n     * @return {?}\n     */\n    _setTabFocus(tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._items && this._items.length) {\n            this._items.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            /** @type {?} */\n            const containerEl = this._tabListContainer.nativeElement;\n            /** @type {?} */\n            const dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n    /**\n     * The layout direction of the containing app.\n     * @return {?}\n     */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\n     * @return {?}\n     */\n    _updateTabScrollPosition() {\n        /** @type {?} */\n        const scrollDistance = this.scrollDistance;\n        /** @type {?} */\n        const platform = this._platform;\n        /** @type {?} */\n        const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n        // and ripples will exceed the boundaries of the visible tab bar.\n        // See: https://github.com/angular/components/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n        // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n        // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n        if (platform && (platform.TRIDENT || platform.EDGE)) {\n            this._tabListContainer.nativeElement.scrollLeft = 0;\n        }\n    }\n    /**\n     * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n     * @return {?}\n     */\n    get scrollDistance() { return this._scrollDistance; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set scrollDistance(value) {\n        this._scrollTo(value);\n    }\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} direction\n     * @return {?}\n     */\n    _scrollHeader(direction) {\n        /** @type {?} */\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        /** @type {?} */\n        const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n        return this._scrollTo(this._scrollDistance + scrollAmount);\n    }\n    /**\n     * Handles click events on the pagination arrows.\n     * @param {?} direction\n     * @return {?}\n     */\n    _handlePaginatorClick(direction) {\n        this._stopInterval();\n        this._scrollHeader(direction);\n    }\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} labelIndex\n     * @return {?}\n     */\n    _scrollToLabel(labelIndex) {\n        /** @type {?} */\n        const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        /** @type {?} */\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        const { offsetLeft, offsetWidth } = selectedLabel.elementRef.nativeElement;\n        /** @type {?} */\n        let labelBeforePos;\n        /** @type {?} */\n        let labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = offsetLeft;\n            labelAfterPos = labelBeforePos + offsetWidth;\n        }\n        else {\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n            labelBeforePos = labelAfterPos - offsetWidth;\n        }\n        /** @type {?} */\n        const beforeVisiblePos = this.scrollDistance;\n        /** @type {?} */\n        const afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    _checkPaginationEnabled() {\n        /** @type {?} */\n        const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n        if (isEnabled !== this._showPaginationControls) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._showPaginationControls = isEnabled;\n    }\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    _checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this._disableScrollBefore = this.scrollDistance == 0;\n        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    _getMaxScrollDistance() {\n        /** @type {?} */\n        const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n        /** @type {?} */\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return (lengthOfTabList - viewLength) || 0;\n    }\n    /**\n     * Tells the ink-bar to align itself to the current label wrapper\n     * @return {?}\n     */\n    _alignInkBarToSelectedTab() {\n        /** @type {?} */\n        const selectedItem = this._items && this._items.length ?\n            this._items.toArray()[this.selectedIndex] : null;\n        /** @type {?} */\n        const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n        if (selectedLabelWrapper) {\n            this._inkBar.alignToElement(selectedLabelWrapper);\n        }\n        else {\n            this._inkBar.hide();\n        }\n    }\n    /**\n     * Stops the currently-running paginator interval.\n     * @return {?}\n     */\n    _stopInterval() {\n        this._stopScrolling.next();\n    }\n    /**\n     * Handles the user pressing down on one of the paginators.\n     * Starts scrolling the header after a certain amount of time.\n     * @param {?} direction In which direction the paginator should be scrolled.\n     * @return {?}\n     */\n    _handlePaginatorPress(direction) {\n        // Avoid overlapping timers.\n        this._stopInterval();\n        // Start a timer after the delay and keep firing based on the interval.\n        timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n            // Keep the timer going until something tells it to stop or the component is destroyed.\n            .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            const { maxScrollDistance, distance } = this._scrollHeader(direction);\n            // Stop the timer if we've reached the start or the end.\n            if (distance === 0 || distance >= maxScrollDistance) {\n                this._stopInterval();\n            }\n        }));\n    }\n    /**\n     * Scrolls the header to a given position.\n     * @private\n     * @param {?} position Position to which to scroll.\n     * @return {?} Information on the current scroll distance and the maximum.\n     */\n    _scrollTo(position) {\n        /** @type {?} */\n        const maxScrollDistance = this._getMaxScrollDistance();\n        this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this._scrollDistanceChanged = true;\n        this._checkScrollingControls();\n        return { maxScrollDistance, distance: this._scrollDistance };\n    }\n}\n/** @nocollapse */\nMatPaginatedTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nclass MatTabHeader extends MatPaginatedTabHeader {\n    /**\n     * @param {?} elementRef\n     * @param {?} changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?} dir\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?=} animationMode\n     */\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, \n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n    }\n    /**\n     * Whether the ripple effect is disabled or not.\n     * @return {?}\n     */\n    get disableRipple() { return this._disableRipple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    /**\n     * @protected\n     * @param {?} event\n     * @return {?}\n     */\n    _itemSelected(event) {\n        event.preventDefault();\n    }\n}\nMatTabHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-tab-header',\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" #previousPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_handlePaginatorClick('before')\\\" (mousedown)=\\\"_handlePaginatorPress('before')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div><div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"><div #tabList class=\\\"mat-tab-list\\\" [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\" role=\\\"tablist\\\" (cdkObserveContent)=\\\"_onContentChanges()\\\"><div class=\\\"mat-tab-labels\\\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" #nextPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (mousedown)=\\\"_handlePaginatorPress('after')\\\" (click)=\\\"_handlePaginatorClick('after')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div>\",\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-labels{display:flex}[mat-align-tabs=center] .mat-tab-labels{justify-content:center}[mat-align-tabs=end] .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{min-width:72px}}\"],\n                inputs: ['selectedIndex'],\n                outputs: ['selectFocusedIndex', 'indexFocused'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                },\n            },] },\n];\n/** @nocollapse */\nMatTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabHeader.propDecorators = {\n    _items: [{ type: ContentChildren, args: [MatTabLabelWrapper,] }],\n    _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n    _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n    _nextPaginator: [{ type: ViewChild, args: ['nextPaginator', { static: false },] }],\n    _previousPaginator: [{ type: ViewChild, args: ['previousPaginator', { static: false },] }],\n    disableRipple: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID's for each tab component\n * @type {?}\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nclass MatTabChangeEvent {\n}\n/**\n * Injection token that can be used to provide the default options the tabs module.\n * @type {?}\n */\nconst MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n// Boilerplate for applying mixins to MatTabGroup.\n/**\n * \\@docs-private\n */\nclass MatTabGroupBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nclass MatTabGroup extends _MatTabGroupMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?=} defaultConfig\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /**\n         * The tab index that should be selected after the content has been checked.\n         */\n        this._indexToSelect = 0;\n        /**\n         * Snapshot of the height of the tab body wrapper before another tab is activated.\n         */\n        this._tabBodyWrapperHeight = 0;\n        /**\n         * Subscription to tabs being added/removed.\n         */\n        this._tabsSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to changes in the tab labels.\n         */\n        this._tabLabelSubscription = Subscription.EMPTY;\n        this._dynamicHeight = false;\n        this._selectedIndex = null;\n        /**\n         * Position of the tab header.\n         */\n        this.headerPosition = 'above';\n        /**\n         * Output to enable support for two-way binding on `[(selectedIndex)]`\n         */\n        this.selectedIndexChange = new EventEmitter();\n        /**\n         * Event emitted when focus has changed within a tab group.\n         */\n        this.focusChange = new EventEmitter();\n        /**\n         * Event emitted when the body animation has completed\n         */\n        this.animationDone = new EventEmitter();\n        /**\n         * Event emitted when the tab selection has changed.\n         */\n        this.selectedTabChange = new EventEmitter(true);\n        this._groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '500ms';\n    }\n    /**\n     * Whether the tab group should grow to the size of the active tab.\n     * @return {?}\n     */\n    get dynamicHeight() { return this._dynamicHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set dynamicHeight(value) { this._dynamicHeight = coerceBooleanProperty(value); }\n    /**\n     * The index of the active tab.\n     * @return {?}\n     */\n    get selectedIndex() { return this._selectedIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectedIndex(value) {\n        this._indexToSelect = coerceNumberProperty(value, null);\n    }\n    /**\n     * Duration for the tab animation. Will be normalized to milliseconds if no units are set.\n     * @return {?}\n     */\n    get animationDuration() { return this._animationDuration; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set animationDuration(value) {\n        this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n    }\n    /**\n     * Background color of the tab group.\n     * @return {?}\n     */\n    get backgroundColor() { return this._backgroundColor; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set backgroundColor(value) {\n        /** @type {?} */\n        const nativeElement = this._elementRef.nativeElement;\n        nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            nativeElement.classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        /** @type {?} */\n        const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != indexToSelect) {\n            /** @type {?} */\n            const isFirstRun = this._selectedIndex == null;\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n            }\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._tabs.forEach((/**\n                 * @param {?} tab\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (tab, index) => tab.isActive = index === indexToSelect));\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            }));\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach((/**\n         * @param {?} tab\n         * @param {?} index\n         * @return {?}\n         */\n        (tab, index) => {\n            tab.position = index - indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        }));\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._subscribeToTabLabels();\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this._tabsSubscription = this._tabs.changes.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const indexToSelect = this._clampTabIndex(this._indexToSelect);\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                /** @type {?} */\n                const tabs = this._tabs.toArray();\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this._indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n            this._subscribeToTabLabels();\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._tabsSubscription.unsubscribe();\n        this._tabLabelSubscription.unsubscribe();\n    }\n    /**\n     * Re-aligns the ink bar to the selected tab element.\n     * @return {?}\n     */\n    realignInkBar() {\n        if (this._tabHeader) {\n            this._tabHeader._alignInkBarToSelectedTab();\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    _focusChanged(index) {\n        this.focusChange.emit(this._createChangeEvent(index));\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createChangeEvent(index) {\n        /** @type {?} */\n        const event = new MatTabChangeEvent;\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    }\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     * @private\n     * @return {?}\n     */\n    _subscribeToTabLabels() {\n        if (this._tabLabelSubscription) {\n            this._tabLabelSubscription.unsubscribe();\n        }\n        this._tabLabelSubscription = merge(...this._tabs.map((/**\n         * @param {?} tab\n         * @return {?}\n         */\n        tab => tab._stateChanges)))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n    /**\n     * Clamps the given index to the bounds of 0 and the tabs length.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _clampTabIndex(index) {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Math.max(NaN, 0) === NaN).\n        return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n    }\n    /**\n     * Returns a unique id for each tab label element\n     * @param {?} i\n     * @return {?}\n     */\n    _getTabLabelId(i) {\n        return `mat-tab-label-${this._groupId}-${i}`;\n    }\n    /**\n     * Returns a unique id for each tab content element\n     * @param {?} i\n     * @return {?}\n     */\n    _getTabContentId(i) {\n        return `mat-tab-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     * @param {?} tabHeight\n     * @return {?}\n     */\n    _setTabBodyWrapperHeight(tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        /** @type {?} */\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = tabHeight + 'px';\n        }\n    }\n    /**\n     * Removes the height of the tab body wrapper.\n     * @return {?}\n     */\n    _removeTabBodyWrapperHeight() {\n        /** @type {?} */\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        this._tabBodyWrapperHeight = wrapper.clientHeight;\n        wrapper.style.height = '';\n        this.animationDone.emit();\n    }\n    /**\n     * Handle click events, setting new selected index if appropriate.\n     * @param {?} tab\n     * @param {?} tabHeader\n     * @param {?} index\n     * @return {?}\n     */\n    _handleClick(tab, tabHeader, index) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n    /**\n     * Retrieves the tabindex for the tab.\n     * @param {?} tab\n     * @param {?} idx\n     * @return {?}\n     */\n    _getTabIndex(tab, idx) {\n        if (tab.disabled) {\n            return null;\n        }\n        return this.selectedIndex === idx ? 0 : -1;\n    }\n}\nMatTabGroup.decorators = [\n    { type: Component, args: [{selector: 'mat-tab-group',\n                exportAs: 'matTabGroup',\n                template: \"<mat-tab-header #tabHeader [selectedIndex]=\\\"selectedIndex\\\" [disableRipple]=\\\"disableRipple\\\" (indexFocused)=\\\"_focusChanged($event)\\\" (selectFocusedIndex)=\\\"selectedIndex = $event\\\"><div class=\\\"mat-tab-label\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabLabelId(i)\\\" [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"_tabs.length\\\" [attr.aria-controls]=\\\"_getTabContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [attr.aria-label]=\\\"tab.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\" [class.mat-tab-label-active]=\\\"selectedIndex == i\\\" [disabled]=\\\"tab.disabled\\\" [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\" (click)=\\\"_handleClick(tab, tabHeader, i)\\\"><div class=\\\"mat-tab-label-content\\\"><ng-template [ngIf]=\\\"tab.templateLabel\\\"><ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template></ng-template><ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template></div></div></mat-tab-header><div class=\\\"mat-tab-body-wrapper\\\" [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\" #tabBodyWrapper><mat-tab-body role=\\\"tabpanel\\\" *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabContentId(i)\\\" [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\" [class.mat-tab-body-active]=\\\"selectedIndex == i\\\" [content]=\\\"tab.content\\\" [position]=\\\"tab.position\\\" [origin]=\\\"tab.origin\\\" [animationDuration]=\\\"animationDuration\\\" (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\" (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\"></mat-tab-body></div>\",\n                styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\"],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['color', 'disableRipple'],\n                host: {\n                    'class': 'mat-tab-group',\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n                },\n            },] },\n];\n/** @nocollapse */\nMatTabGroup.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabGroup.propDecorators = {\n    _tabs: [{ type: ContentChildren, args: [MatTab,] }],\n    _tabBodyWrapper: [{ type: ViewChild, args: ['tabBodyWrapper', { static: false },] }],\n    _tabHeader: [{ type: ViewChild, args: ['tabHeader', { static: false },] }],\n    dynamicHeight: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    headerPosition: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    backgroundColor: [{ type: Input }],\n    selectedIndexChange: [{ type: Output }],\n    focusChange: [{ type: Output }],\n    animationDone: [{ type: Output }],\n    selectedTabChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nclass MatTabNav extends MatPaginatedTabHeader {\n    /**\n     * @param {?} elementRef\n     * @param {?} dir\n     * @param {?} ngZone\n     * @param {?} changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?=} platform\n     * @param {?=} animationMode\n     */\n    constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, \n    /**\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n     */\n    platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n        /**\n         * Theme color of the nav bar.\n         */\n        this.color = 'primary';\n    }\n    /**\n     * Background color of the tab nav.\n     * @return {?}\n     */\n    get backgroundColor() { return this._backgroundColor; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set backgroundColor(value) {\n        /** @type {?} */\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /**\n     * Whether the ripple effect is disabled or not.\n     * @return {?}\n     */\n    get disableRipple() { return this._disableRipple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _itemSelected() {\n        // noop\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.updateActiveLink();\n        super.ngAfterContentInit();\n    }\n    /**\n     * Notifies the component that the active link has been changed.\n     * \\@breaking-change 8.0.0 `element` parameter to be removed.\n     * @param {?=} _element\n     * @return {?}\n     */\n    updateActiveLink(_element) {\n        if (!this._items) {\n            return;\n        }\n        /** @type {?} */\n        const items = this._items.toArray();\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].active) {\n                this.selectedIndex = i;\n                this._changeDetectorRef.markForCheck();\n                return;\n            }\n        }\n        // The ink bar should hide itself if no items are active.\n        this.selectedIndex = -1;\n        this._inkBar.hide();\n    }\n}\nMatTabNav.decorators = [\n    { type: Component, args: [{selector: '[mat-tab-nav-bar]',\n                exportAs: 'matTabNavBar, matTabNav',\n                inputs: ['color'],\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" #previousPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_handlePaginatorClick('before')\\\" (mousedown)=\\\"_handlePaginatorPress('before')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div><div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"><div class=\\\"mat-tab-list\\\" #tabList (cdkObserveContent)=\\\"_onContentChanges()\\\"><div class=\\\"mat-tab-links\\\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" #nextPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (mousedown)=\\\"_handlePaginatorPress('after')\\\" (click)=\\\"_handlePaginatorClick('after')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div>\",\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-links{display:flex}[mat-align-tabs=center] .mat-tab-links{justify-content:center}[mat-align-tabs=end] .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-link:focus{outline:dotted 2px}}.mat-tab-link.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-link.mat-tab-disabled{opacity:.5}}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-link{opacity:1}}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media (max-width:599px){.mat-tab-link{min-width:72px}}\"],\n                host: {\n                    'class': 'mat-tab-nav-bar mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatTabNav.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Platform, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabNav.propDecorators = {\n    _items: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatTabLink)), { descendants: true },] }],\n    _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n    _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n    _nextPaginator: [{ type: ViewChild, args: ['nextPaginator', { static: false },] }],\n    _previousPaginator: [{ type: ViewChild, args: ['previousPaginator', { static: false },] }],\n    backgroundColor: [{ type: Input }],\n    disableRipple: [{ type: Input }],\n    color: [{ type: Input }]\n};\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkBase {\n}\n/** @type {?} */\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nclass MatTabLink extends _MatTabLinkMixinBase {\n    /**\n     * @param {?} _tabNavBar\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?} tabIndex\n     * @param {?} _focusMonitor\n     * @param {?=} animationMode\n     */\n    constructor(_tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {\n        super();\n        this._tabNavBar = _tabNavBar;\n        this.elementRef = elementRef;\n        this._focusMonitor = _focusMonitor;\n        /**\n         * Whether the tab link is active or not.\n         */\n        this._isActive = false;\n        this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n        this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n        this.rippleConfig = globalRippleOptions || {};\n        this.tabIndex = parseInt(tabIndex) || 0;\n        if (animationMode === 'NoopAnimations') {\n            this.rippleConfig.animation = { enterDuration: 0, exitDuration: 0 };\n        }\n        _focusMonitor.monitor(elementRef);\n    }\n    /**\n     * Whether the link is active.\n     * @return {?}\n     */\n    get active() { return this._isActive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set active(value) {\n        if (value !== this._isActive) {\n            this._isActive = value;\n            this._tabNavBar.updateActiveLink(this.elementRef);\n        }\n    }\n    /**\n     * Whether ripples are disabled on interaction.\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n            !!this.rippleConfig.disabled;\n    }\n    /**\n     * @return {?}\n     */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._tabLinkRipple._removeTriggerEvents();\n        this._focusMonitor.stopMonitoring(this.elementRef);\n    }\n}\nMatTabLink.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-tab-link], [matTabLink]',\n                exportAs: 'matTabLink',\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                host: {\n                    'class': 'mat-tab-link',\n                    '[attr.aria-current]': 'active',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.tabIndex]': 'tabIndex',\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[class.mat-tab-label-active]': 'active',\n                }\n            },] },\n];\n/** @nocollapse */\nMatTabLink.ctorParameters = () => [\n    { type: MatTabNav },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabLink.propDecorators = {\n    active: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTabsModule {\n}\nMatTabsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PortalModule,\n                    MatRippleModule,\n                    ObserversModule,\n                    A11yModule,\n                ],\n                // Don't export all components because some are only to be used internally.\n                exports: [\n                    MatCommonModule,\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabContent,\n                ],\n                declarations: [\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatInkBar,\n                    MatTabLabelWrapper,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabBody,\n                    MatTabBodyPortal,\n                    MatTabHeader,\n                    MatTabContent,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, MatTabContent, MatTabsModule, MatTabChangeEvent, MAT_TABS_CONFIG, MatTabGroup, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵa24, MatPaginatedTabHeader as ɵb24 };\n//# sourceMappingURL=tabs.js.map\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { AppNotification } from './app-notification.model';\nimport { EntityService, IPagination } from '@ngx-starter-kit/shared';\nimport { Observable } from 'rxjs';\nimport { catchError, finalize, map, retry } from 'rxjs/operators';\nimport { BrowserFeatureKey, FeatureService } from '@ngx-starter-kit/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationsService extends EntityService<AppNotification> {\n  public apiBaseUrl = environment.API_BASE_URL;\n  readonly entityPath = 'notifications';\n\n  constructor(httpClient: HttpClient, private readonly featureService: FeatureService) {\n    super(httpClient);\n  }\n\n  getAll(): Observable<AppNotification[]> {\n    this.loadingSubject.next(true);\n    return this.httpClient.get<IPagination<AppNotification>>(`${this.baseUrl}/${this.entityPath}/own`).pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n      // return without count\n      map(data => data.items),\n    );\n  }\n\n  /**\n   * Util for showing native Notifications\n   * @param noti:  {\n   *    title: 'NGX WebApp Notification',\n   *   options: {\n   *     body: payload.message,\n   *     icon: 'assets/icons/icon-72x72.png',\n   *     data: {\n   *       click_url: '/index.html',\n   *     },\n   *   },\n   * }\n   */\n  async showNativeNotification(noti: { title: string; options?: Partial<NotificationOptions> }) {\n    if (\n      this.featureService.detectFeature(BrowserFeatureKey.NotificationsAPI).supported &&\n      !this.featureService.isMobileAndroid()\n    ) {\n      const permission = await Notification.requestPermission();\n      if (permission === 'granted') {\n        const notification = new Notification(noti.title, noti.options);\n        notification.onclick = () => {\n          console.log('clicked todo: mark as read');\n        };\n      }\n    }\n  }\n}\n","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import { Actions, ofActionSuccessful, Store } from '@ngxs/store';\nimport { Injectable } from '@angular/core';\nimport { AddNotification, DeleteNotification, MarkAllAsRead, MarkAsRead } from './notifications.actions';\nimport { SendWebSocketAction } from '@ngx-starter-kit/socketio-plugin';\nimport { SwPush } from '@angular/service-worker';\nimport { AppNotification } from './app-notification.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationsHandler {\n  constructor(private actions$: Actions, private store: Store, private readonly swPush: SwPush) {\n    this.actions$\n      .pipe(ofActionSuccessful(DeleteNotification))\n      .subscribe(action => this.store.dispatch(new SendWebSocketAction(action)));\n    this.actions$\n      .pipe(ofActionSuccessful(MarkAsRead))\n      .subscribe(action => this.store.dispatch(new SendWebSocketAction(action)));\n    this.actions$\n      .pipe(ofActionSuccessful(MarkAllAsRead))\n      .subscribe(action => this.store.dispatch(new SendWebSocketAction(action)));\n\n    if (this.swPush.isEnabled) {\n      this.swPush.messages.subscribe((message: { notification: Notification }) => {\n        if (message.notification.data.targetType) {\n          this.store.dispatch(new AddNotification(new AppNotification(message.notification.data)));\n        }\n      });\n      this.swPush.notificationClicks.subscribe(({ action, notification: { title, ...notification } }) => {\n        console.log(`action: ${action}, title: ${title}, notification`, notification);\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, isDevMode, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {\n}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?} _renderer\n     * @param {?=} _animationMode\n     */\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n        if (isDevMode()) {\n            /** @type {?} */\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            /** @type {?} */\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const contentChange = changes['content'];\n        if (contentChange) {\n            /** @type {?} */\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     * @return {?}\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @private\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @private\n     * @return {?}\n     */\n    _createBadgeElement() {\n        /** @type {?} */\n        const badgeElement = this._renderer.createElement('span');\n        /** @type {?} */\n        const activeClass = 'mat-badge-active';\n        /** @type {?} */\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this.content;\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    badgeElement.classList.add(activeClass);\n                }));\n            }));\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @private\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        /** @type {?} */\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @private\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /**\n     * Clears any existing badges that might be left over from server-side rendering.\n     * @private\n     * @param {?} cssClass\n     * @return {?}\n     */\n    _clearExistingBadges(cssClass) {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            /** @type {?} */\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n}\nMatBadge.decorators = [\n    { type: Directive, args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled',\n                },\n            },] },\n];\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatBadgeModule, MatBadge };\n//# sourceMappingURL=badge.js.map\n","import { AppNotification } from './app-notification.model';\n\n// Actions\nexport class FetchNotifications {\n  static readonly type = '[Notifications] Fetch';\n}\n// new AddNotification({ id: 6, icon: 'notifications', message: 'sumo',createdAt: new Date(Date.now() - 864e5), read: false, native: true}),\nexport class AddNotification {\n  static readonly type = '[Notifications] Add';\n  constructor(public readonly payload: AppNotification) {}\n}\n\nexport class DeleteNotification {\n  static readonly type = '[Notifications] Delete';\n  constructor(public readonly payload: AppNotification) {}\n}\n\nexport class MarkAsRead {\n  static readonly type = '[Notifications] MarkAsRead';\n  constructor(public readonly payload: AppNotification) {}\n}\n\nexport class MarkAllAsRead {\n  static readonly type = '[Notifications] MarkAllAsRead';\n}\n","import { Subscriber } from '../Subscriber';\nexport function retry(count = -1) {\n    return (source) => source.lift(new RetryOperator(count, source));\n}\nclass RetryOperator {\n    constructor(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    }\n}\nclass RetrySubscriber extends Subscriber {\n    constructor(destination, count, source) {\n        super(destination);\n        this.count = count;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { source, count } = this;\n            if (count === 0) {\n                return super.error(err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    }\n}\n//# sourceMappingURL=retry.js.map","import { Component, Input, OnInit } from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n@Component({\n  selector: 'ngx-sidenav-toggle',\n  templateUrl: './sidenav-toggle.component.html',\n  styleUrls: ['./sidenav-toggle.component.scss'],\n})\nexport class SidenavToggleComponent implements OnInit {\n  @Input()\n  sidenav: MatSidenav;\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  openSidenav() {\n    this.sidenav.open();\n  }\n}\n","<button class=\"button\" (click)=\"openSidenav()\" mat-icon-button fxHide.gt-md><mat-icon>menu</mat-icon></button>\n","import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n  selector: '[ngxClickOutside]',\n})\nexport class ClickOutsideDirective {\n  @Output()\n  public ngxClickOutside = new EventEmitter<MouseEvent>();\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event', '$event.target'])\n  public onClick(event: MouseEvent, targetElement: HTMLElement): void {\n    if (!targetElement) {\n      return;\n    }\n\n    const clickedInside = this.elementRef.nativeElement.contains(targetElement);\n    if (!clickedInside) {\n      this.ngxClickOutside.emit(event);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { MenuItem, MenuService } from '@ngx-starter-kit/navigator';\n\n@Component({\n  selector: 'ngx-search-bar',\n  templateUrl: './search-bar.component.html',\n  styleUrls: ['./search-bar.component.scss'],\n})\nexport class SearchBarComponent implements OnInit {\n  input: string;\n  focused: boolean;\n\n  recentlyVisited: MenuItem[] = [];\n\n  constructor(private router: Router, private sidenavService: MenuService) {}\n\n  ngOnInit() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        const item = this.sidenavService.getItemByRoute(event.urlAfterRedirects);\n\n        if (item) {\n          const index = this.recentlyVisited.indexOf(item);\n          if (index > -1) {\n            this.recentlyVisited.splice(index, 1);\n          }\n\n          this.recentlyVisited.unshift(item);\n\n          if (this.recentlyVisited.length > 5) {\n            this.recentlyVisited.pop();\n          }\n        }\n      }\n    });\n  }\n\n  openDropdown() {\n    this.focused = true;\n  }\n\n  closeDropdown() {\n    this.focused = false;\n  }\n}\n","<div\n  class=\"search-wrapper\"\n  fxLayout=\"row\"\n  [ngClass]=\"{ focus: focused, 'has-input': input }\"\n  fxFlex\n  (ngxClickOutside)=\"closeDropdown()\"\n>\n  <mat-icon class=\"search-icon\">search</mat-icon>\n  <input\n    #searchInput\n    type=\"search\"\n    autocomplete=\"off\"\n    spellcheck=\"false\"\n    class=\"search-input\"\n    (focus)=\"openDropdown()\"\n    placeholder=\"Search...\"\n  />\n\n  <div class=\"search-dropdown mat-elevation-z1\">\n    <div class=\"content results\" *ngIf=\"input\" fxLayout=\"column\">\n      <div class=\"heading\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <mat-icon class=\"icon\">search</mat-icon>\n        Search results for: {{ searchInput.value }}\n      </div>\n      <div class=\"items\">\n        <div class=\"item\" matRipple>Overview</div>\n        <div class=\"item\" matRipple>Dashboard</div>\n        <div class=\"item\" matRipple>Servers</div>\n        <div class=\"item\" matRipple>Grid</div>\n        <div class=\"item\" matRipple>Profile</div>\n        <div class=\"item\" matRipple>Home</div>\n      </div>\n    </div>\n\n    <div class=\"content recents\" fxLayout=\"row\" *ngIf=\"!input\">\n      <div class=\"recently\" fxLayout=\"column\" fxFlex>\n        <div class=\"heading\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <mat-icon class=\"icon\">restore</mat-icon>\n          Recently Visited\n        </div>\n        <div class=\"items\">\n          <div\n            class=\"item\"\n            matRipple\n            *ngFor=\"let item of recentlyVisited\"\n            [routerLink]=\"item.route\"\n            (click)=\"closeDropdown()\"\n          >\n            {{ item.name }}\n          </div>\n        </div>\n      </div>\n      <div class=\"frequently\" fxLayout=\"column\" fxFlex fxFlexOffset=\"16px\">\n        <div class=\"heading\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n          <mat-icon class=\"icon\">youtube_searched_for</mat-icon>\n          Frequently Visited\n        </div>\n        <div class=\"items\">\n          <div class=\"item\" matRipple [routerLink]=\"['/dashboard']\">Dashboard</div>\n          <div class=\"item\" matRipple [routerLink]=\"['/dashboard/overview']\">Overview</div>\n          <div class=\"item\" matRipple [routerLink]=\"['/dashboard/experiments']\">Experiments</div>\n          <div class=\"item\" matRipple [routerLink]=\"['/dashboard/grid']\">Grid</div>\n          <div class=\"item\" matRipple [routerLink]=\"['/dashboard/experiments/animations']\">Animations</div>\n          <div class=\"item\" matRipple [routerLink]=\"['/home']\">Home</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport * as screenfull from 'screenfull';\n\n@Component({\n  selector: 'ngx-fullscreen-toggle',\n  templateUrl: './fullscreen-toggle.component.html',\n  styleUrls: ['./fullscreen-toggle.component.scss'],\n})\nexport class FullscreenToggleComponent implements OnInit {\n  isFullscreen: boolean;\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  toggleFullscreen() {\n    if ((screenfull as any).enabled) {\n      (screenfull as any).toggle();\n      this.isFullscreen = !this.isFullscreen;\n    }\n  }\n}\n","<button class=\"button\" mat-button (click)=\"toggleFullscreen()\" fxFlex=\"grow\">\n  <mat-icon *ngIf=\"!isFullscreen\">fullscreen</mat-icon>\n  <mat-icon *ngIf=\"isFullscreen\">fullscreen_exit</mat-icon>\n</button>\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material';\n\n@Component({\n  selector: 'ngx-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss'],\n})\nexport class SearchComponent implements OnInit {\n  isOpen: boolean;\n\n  @ViewChild('input', { read: ElementRef, static: true }) input: ElementRef;\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  open() {\n    this.isOpen = true;\n\n    setTimeout(() => {\n      this.input.nativeElement.focus();\n    }, 100);\n  }\n\n  close() {\n    this.isOpen = false;\n  }\n}\n","<div fxLayout=\"row\" fxLayoutAlign=\"center stretch\" fxFlex=\"grow\">\n  <button class=\"search-button\" mat-button (click)=\"open()\"><mat-icon>search</mat-icon></button>\n  <mat-form-field class=\"search\" [class.search-open]=\"isOpen\" fxFlex=\"auto\">\n    <input #input (blur)=\"close()\" matInput placeholder=\"Search...\" />\n  </mat-form-field>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport { listFadeAnimation } from '@ngx-starter-kit/animations';\n\nimport { DeleteNotification, FetchNotifications, MarkAllAsRead, MarkAsRead } from './notifications.actions';\nimport { Observable } from 'rxjs';\nimport { NotificationsState } from './notifications.state';\nimport { AppNotification } from './app-notification.model';\n\n@Component({\n  selector: 'ngx-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.scss'],\n  animations: [listFadeAnimation],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationsComponent implements OnInit {\n  @Select(NotificationsState) notifications$: Observable<AppNotification>;\n  @Select(NotificationsState.unReadCount) unReadCount$: Observable<number>;\n  isOpen: boolean;\n\n  constructor(private store: Store) {}\n\n  ngOnInit() {\n    this.store.dispatch(new FetchNotifications());\n  }\n\n  markAsRead(notification) {\n    this.store.dispatch(new MarkAsRead(notification));\n  }\n\n  dismiss(notification, event) {\n    event.stopPropagation();\n    this.store.dispatch(new DeleteNotification(notification));\n  }\n\n  toggleDropdown() {\n    this.isOpen = !this.isOpen;\n  }\n\n  onClickOutside() {\n    this.isOpen = false;\n  }\n\n  markAllAsRead() {\n    this.store.dispatch(new MarkAllAsRead());\n  }\n\n  trackById(index: number, item: AppNotification) {\n    return item.id;\n  }\n}\n","<div\n  class=\"notification-container\"\n  (ngxClickOutside)=\"onClickOutside()\"\n  fxFlex=\"grow\"\n  fxLayout=\"row\"\n  fxLayoutAlign=\"start center\"\n>\n  <button class=\"button\" type=\"button\" mat-button (click)=\"toggleDropdown()\" [class.open]=\"isOpen\" fxFlex=\"grow\">\n    <span *ngIf=\"(unReadCount$ | async) > 0; then withBadge; else withOutBadge\"></span>\n    <ng-template #withBadge>\n      <mat-icon matBadge=\"{{ unReadCount$ | async }}\" matBadgePosition=\"above after\" matBadgeColor=\"accent\"\n        >notifications_active</mat-icon\n      >\n    </ng-template>\n    <ng-template #withOutBadge><mat-icon>notifications_none</mat-icon></ng-template>\n  </button>\n\n  <div class=\"dropdown mat-elevation-z1\" [class.open]=\"isOpen\">\n    <div class=\"card\">\n      <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <div class=\"title\">\n          <div class=\"name\">Notifications</div>\n          <div class=\"extra\">You have {{ unReadCount$ | async }} new notifications.</div>\n        </div>\n        <button type=\"button\" mat-icon-button><mat-icon class=\"icon\">settings</mat-icon></button>\n      </div>\n\n      <ng-container *ngLet=\"(notifications$ | async) as notifications\">\n        <ng-container *ngIf=\"notifications?.length !== 0; then thenBlock; else elseBlock\"></ng-container>\n        <ng-template #thenBlock>\n          <perfect-scrollbar class=\"content\">\n            <ng-container *ngFor=\"let notification of notifications; last as isLast; trackBy: trackById\">\n              <div\n                class=\"notification\"\n                (click)=\"markAsRead(notification)\"\n                [ngClass]=\"notification.color\"\n                [class.read]=\"notification.read\"\n                fxLayout=\"row\"\n                fxLayoutAlign=\"start center\"\n                matRipple\n                [@listFade]\n              >\n                <mat-icon class=\"icon\">{{ notification.icon }}</mat-icon>\n                <div class=\"title\" fxLayout=\"column\">\n                  <div class=\"name\">{{ notification.body }}</div>\n                  <div class=\"time\">{{ notification.createdAt | formatTimeInWords }}</div>\n                </div>\n                <span fxFlex></span>\n                <button (click)=\"dismiss(notification, $event)\" type=\"button\" mat-icon-button>\n                  <mat-icon class=\"close\">close</mat-icon>\n                </button>\n              </div>\n              <div class=\"divider\" *ngIf=\"!isLast\"></div>\n            </ng-container>\n          </perfect-scrollbar>\n        </ng-template>\n        <ng-template #elseBlock>\n          <div class=\"empty\" fxLayout=\"row\" fxLayoutAlign=\"center center\" [@listFade]>\n            All fine! No notifications right now.\n          </div>\n        </ng-template>\n\n        <div class=\"footer\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <div class=\"action\" (click)=\"markAllAsRead()\">Mark all as read</div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { Logout } from '@ngx-starter-kit/auth';\n// import { Logout } from '@ngx-starter-kit/oidc';\nimport { Store } from '@ngxs/store';\n\n@Component({\n  selector: 'ngx-user-menu',\n  templateUrl: './user-menu.component.html',\n  styleUrls: ['./user-menu.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserMenuComponent implements OnInit {\n  isOpen: boolean;\n  @Input()\n  currentUser = null;\n\n  constructor(private store: Store) {}\n\n  ngOnInit() {\n    if (this.currentUser.given_name && this.currentUser.given_name === 'Sumanth') {\n      this.currentUser.photoURL = 'assets/img/avatars/user-image.jpg';\n    }\n  }\n\n  toggleDropdown() {\n    this.isOpen = !this.isOpen;\n  }\n\n  onClickOutside() {\n    this.isOpen = false;\n  }\n\n  public logout() {\n    this.store.dispatch(new Logout());\n  }\n}\n","<div class=\"user-container\" #userButton (ngxClickOutside)=\"onClickOutside()\">\n  <button class=\"user-button\" mat-button (click)=\"toggleDropdown()\" [class.open]=\"isOpen\">\n    <span fxLayout=\"row\" fxLayoutAlign=\"start center\">\n      <img class=\"user-avatar\" [src]=\"currentUser?.photoURL || 'assets/img/avatars/noavatar.png'\" />\n      <span class=\"name\" fxHide fxShow.gt-sm>{{ currentUser?.given_name || 'Sumo Demo' }}</span>\n      <mat-icon class=\"icon\" fxHide fxShow.gt-sm>keyboard_arrow_down</mat-icon>\n    </span>\n  </button>\n\n  <div class=\"dropdown mat-elevation-z1\" [class.open]=\"isOpen\">\n    <div class=\"content\">\n      <mat-nav-list>\n        <mat-list-item>\n          <a matLine [routerLink]=\"['/dashboard/profile']\">Profile</a>\n          <button mat-icon-button><mat-icon>account_circle</mat-icon></button>\n        </mat-list-item>\n        <mat-list-item>\n          <a matLine [routerLink]=\"['/dashboard/settings']\">Settings</a>\n          <button mat-icon-button><mat-icon>settings</mat-icon></button>\n        </mat-list-item>\n        <mat-list-item>\n          <a matLine [routerLink]=\"['/home/faq']\">Help</a> <button mat-icon-button><mat-icon>help</mat-icon></button>\n        </mat-list-item>\n\n        <mat-divider></mat-divider>\n\n        <mat-list-item (click)=\"logout()\">\n          <a matLine>Logout</a> <button mat-icon-button><mat-icon>exit_to_app</mat-icon></button>\n        </mat-list-item>\n      </mat-nav-list>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n@Component({\n  selector: 'ngx-quickpanel-toggle',\n  templateUrl: './quickpanel-toggle.component.html',\n  styleUrls: ['./quickpanel-toggle.component.scss'],\n})\nexport class QuickpanelToggleComponent implements OnInit {\n  @Input()\n  quickpanel: MatSidenav;\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  openQuickpanel() {\n    this.quickpanel.open();\n  }\n}\n","<button mat-button class=\"button\" (click)=\"openQuickpanel()\" fxFlex=\"grow\">\n  <mat-icon>format_align_right</mat-icon>\n</button>\n","<mat-toolbar class=\"toolbar\" fxLayout=\"row\" fxLayoutAlign=\"space-between\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <ngx-sidenav-toggle [sidenav]=\"sidenav\"></ngx-sidenav-toggle>\n\n    <img\n      class=\"logo\"\n      [routerLink]=\"['/']\"\n      fxHide.gt-md\n      fxHide.xs\n      style=\"height: 35px; margin-left: 24px; margin-bottom: -5px;\"\n      src=\"assets/img/logo_text_dark.png\"\n    />\n\n    <ngx-search-bar fxFlex=\"500px\" fxHide fxShow.gt-md></ngx-search-bar>\n  </div>\n\n  <div fxLayout=\"row\">\n    <ngx-fullscreen-toggle class=\"button\" fxHide fxShow.gt-sm></ngx-fullscreen-toggle>\n\n    <ngx-search class=\"button\" fxHide fxShow.gt-sm></ngx-search>\n\n    <ngx-notifications class=\"button\" fxHide fxShow.gt-sm></ngx-notifications>\n\n    <!-- <theme-picker class=\"button\" fxShow fxHide.lt-md></theme-picker> -->\n\n    <ngx-user-menu class=\"button\" [currentUser]=\"profile$ | async\"></ngx-user-menu>\n\n    <ngx-quickpanel-toggle class=\"button\" [quickpanel]=\"quickpanel\"></ngx-quickpanel-toggle>\n  </div>\n</mat-toolbar>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellDef]' },] },\n];\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] },\n];\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] },\n];\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] },\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef, { static: false },] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef, { static: false },] }]\n};\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] },\n];\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] },\n];\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] },\n];\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: Component, args: [{selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state)) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => state));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => !state))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => !!element.style[dir]));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[rowOutlet]' },] },\n];\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[headerRowOutlet]' },] },\n];\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[footerRowOutlet]' },] },\n];\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?} _document\n     * @param {?} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *it's* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *it's* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *it's* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *it's* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n            (/** @type {?} */ (console.warn))) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        (_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        const tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.sticky));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        (footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.resetStickyChanged()));\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        }));\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        (acc, def) => acc || !!def.getColumnsDiff());\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data || [];\n            this.renderRows();\n        }));\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._headerRowOutlet, def, i)));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        (def, i) => this._renderRow(this._footerRowOutlet, def, i)));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        columnName => {\n            /** @type {?} */\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.sticky));\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        columnDef => columnDef.stickyEnd));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => !def.when || def.when(dataIndex, data)));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            def => def.when && def.when(dataIndex, data))) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            const context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        (acc, d) => {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        }));\n    }\n}\nCdkTable.decorators = [\n    { type: Component, args: [{selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n};\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass CdkTextColumn {\n    /**\n     * @param {?} _table\n     * @param {?} _options\n     */\n    constructor(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /**\n     * Column name that should be used to reference this column.\n     * @return {?}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (data, name) => ((/** @type {?} */ (data)))[name]));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    _createDefaultHeaderText() {\n        /** @type {?} */\n        const name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.decorators = [\n    { type: Component, args: [{selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n/** @nocollapse */\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };\n//# sourceMappingURL=table.js.map\n","import { Action, NgxsAfterBootstrap, Selector, State, StateContext } from '@ngxs/store';\nimport { ImmutableContext, ImmutableSelector } from '@ngxs-labs/immer-adapter';\nimport { append, patch, removeItem, updateItem } from '@ngxs/store/operators';\nimport { tap } from 'rxjs/operators';\nimport { AppNotification } from './app-notification.model';\nimport { NotificationsService } from './notifications.service';\nimport {\n  FetchNotifications,\n  AddNotification,\n  DeleteNotification,\n  MarkAsRead,\n  MarkAllAsRead,\n} from './notifications.actions';\n\n/** @dynamic */\n@State<AppNotification[]>({\n  name: 'notifications',\n  defaults: [],\n})\nexport class NotificationsState implements NgxsAfterBootstrap {\n  constructor(private notificationsService: NotificationsService) {}\n\n  @Selector()\n  static unReadCount(state: AppNotification[]) {\n    return state.filter(note => !note.read).length;\n  }\n\n  ngxsAfterBootstrap(ctx: StateContext<AppNotification[]>) {\n    console.log('State initialized, now getting Notifications.');\n    /**\n     * well, this way, it will be called before dashboard is routed due to preloadingStrategy.\n     * we will loose lazy loading benefits. so lets use ngxsAfterBootstrap on component to load initial data.\n     */\n    // ctx.dispatch(new FetchNotifications())\n  }\n\n  @ImmutableContext()\n  @Action(AddNotification)\n  add(ctx: StateContext<AppNotification[]>, { payload }: AddNotification) {\n    ctx.setState((state: AppNotification[]) => {\n      state.push(payload);\n      return state;\n    });\n  }\n\n  @Action(FetchNotifications, { cancelUncompleted: true })\n  fetchNotifications({ getState, patchState, setState }: StateContext<AppNotification[]>) {\n    return this.notificationsService.getAll().pipe(tap(res => setState(res)));\n  }\n\n  // @ImmutableContext()\n  // @Action(DeleteNotification)\n  // delete(ctx: StateContext<AppNotification[]>, { payload }: DeleteNotification) {\n  //   ctx.setState((state: AppNotification[]) => {\n  //     return state.splice(state.findIndex(note => note.id === payload.id), 1);\n  //     // or (slower):\n  //     // return state.filter(note => note.id !== payload.id);\n  //   });\n  // }\n\n  @Action(DeleteNotification)\n  delete(ctx: StateContext<AppNotification[]>, { payload }: DeleteNotification) {\n    ctx.setState(removeItem<AppNotification>(note => note.id === payload.id));\n  }\n\n  @ImmutableContext()\n  @Action(MarkAsRead)\n  markAsRead(ctx: StateContext<AppNotification[]>, { payload }: MarkAsRead) {\n    ctx.setState((state: AppNotification[]) => {\n      state[state.findIndex(note => note.id === payload.id)].read = true;\n      return state;\n    });\n  }\n\n  @ImmutableContext()\n  @Action(MarkAllAsRead)\n  markAllAsRead(ctx: StateContext<AppNotification[]>) {\n    ctx.setState((state: AppNotification[]) => {\n      state.forEach(item => {\n        item.read = true;\n      });\n      return state;\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NotificationsComponent } from './notifications.component';\nimport { NgxsModule } from '@ngxs/store';\n\nimport { SharedFlexLayoutModule, SharedPerfectScrollbarModule } from '@ngx-starter-kit/shared';\nimport { ClickOutsideModule, DateFnsModule, NgLetModule } from '@ngx-starter-kit/ngx-utils';\n\nimport { NotificationsState } from './notifications.state';\nimport { NotificationsHandler } from './notifications.handler';\nimport { CommonModule } from '@angular/common';\n\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nconst matModules = [MatButtonModule, MatIconModule, MatBadgeModule];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    [...matModules],\n    NgLetModule,\n    DateFnsModule,\n    ClickOutsideModule,\n    SharedPerfectScrollbarModule,\n    SharedFlexLayoutModule,\n    NgxsModule.forFeature([NotificationsState]),\n  ],\n  declarations: [NotificationsComponent],\n  exports: [NotificationsComponent],\n})\nexport class NotificationsModule {\n  // HINT: NotificationsHandler is injected here to initialize it as Module Run Block\n  constructor(notificationsHandler: NotificationsHandler) {}\n}\n","/*!\n* screenfull\n* v4.2.1 - 2019-07-27\n* (c) Sindre Sorhus; MIT License\n*/\n(function () {\n\t'use strict';\n\n\tvar document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\tvar isCommonjs = typeof module !== 'undefined' && module.exports;\n\tvar keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;\n\n\tvar fn = (function () {\n\t\tvar val;\n\n\t\tvar fnMap = [\n\t\t\t[\n\t\t\t\t'requestFullscreen',\n\t\t\t\t'exitFullscreen',\n\t\t\t\t'fullscreenElement',\n\t\t\t\t'fullscreenEnabled',\n\t\t\t\t'fullscreenchange',\n\t\t\t\t'fullscreenerror'\n\t\t\t],\n\t\t\t// New WebKit\n\t\t\t[\n\t\t\t\t'webkitRequestFullscreen',\n\t\t\t\t'webkitExitFullscreen',\n\t\t\t\t'webkitFullscreenElement',\n\t\t\t\t'webkitFullscreenEnabled',\n\t\t\t\t'webkitfullscreenchange',\n\t\t\t\t'webkitfullscreenerror'\n\n\t\t\t],\n\t\t\t// Old WebKit (Safari 5.1)\n\t\t\t[\n\t\t\t\t'webkitRequestFullScreen',\n\t\t\t\t'webkitCancelFullScreen',\n\t\t\t\t'webkitCurrentFullScreenElement',\n\t\t\t\t'webkitCancelFullScreen',\n\t\t\t\t'webkitfullscreenchange',\n\t\t\t\t'webkitfullscreenerror'\n\n\t\t\t],\n\t\t\t[\n\t\t\t\t'mozRequestFullScreen',\n\t\t\t\t'mozCancelFullScreen',\n\t\t\t\t'mozFullScreenElement',\n\t\t\t\t'mozFullScreenEnabled',\n\t\t\t\t'mozfullscreenchange',\n\t\t\t\t'mozfullscreenerror'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'msRequestFullscreen',\n\t\t\t\t'msExitFullscreen',\n\t\t\t\t'msFullscreenElement',\n\t\t\t\t'msFullscreenEnabled',\n\t\t\t\t'MSFullscreenChange',\n\t\t\t\t'MSFullscreenError'\n\t\t\t]\n\t\t];\n\n\t\tvar i = 0;\n\t\tvar l = fnMap.length;\n\t\tvar ret = {};\n\n\t\tfor (; i < l; i++) {\n\t\t\tval = fnMap[i];\n\t\t\tif (val && val[1] in document) {\n\t\t\t\tfor (i = 0; i < val.length; i++) {\n\t\t\t\t\tret[fnMap[0][i]] = val[i];\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t})();\n\n\tvar eventNameMap = {\n\t\tchange: fn.fullscreenchange,\n\t\terror: fn.fullscreenerror\n\t};\n\n\tvar screenfull = {\n\t\trequest: function (elem) {\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tvar request = fn.requestFullscreen;\n\n\t\t\t\tvar onFullScreenEntered = function () {\n\t\t\t\t\tthis.off('change', onFullScreenEntered);\n\t\t\t\t\tresolve();\n\t\t\t\t}.bind(this);\n\n\t\t\t\tthis.on('change', onFullScreenEntered);\n\n\t\t\t\telem = elem || document.documentElement;\n\n\t\t\t\tvar promise;\n\n\t\t\t\t// Work around Safari 5.1 bug: reports support for\n\t\t\t\t// keyboard in fullscreen even though it doesn't.\n\t\t\t\t// Browser sniffing, since the alternative with\n\t\t\t\t// setTimeout is even worse.\n\t\t\t\tif (/ Version\\/5\\.1(?:\\.\\d+)? Safari\\//.test(navigator.userAgent)) {\n\t\t\t\t\tpromise = elem[request]();\n\t\t\t\t} else {\n\t\t\t\t\tpromise = elem[request](keyboardAllowed ? Element.ALLOW_KEYBOARD_INPUT : {});\n\t\t\t\t}\n\n\t\t\t\tPromise.resolve(promise).catch(reject);\n\t\t\t}.bind(this));\n\t\t},\n\t\texit: function () {\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tif (!this.isFullscreen) {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar onFullScreenExit = function () {\n\t\t\t\t\tthis.off('change', onFullScreenExit);\n\t\t\t\t\tresolve();\n\t\t\t\t}.bind(this);\n\n\t\t\t\tdocument[fn.exitFullscreen]();\n\n\t\t\t\tthis.on('change', onFullScreenExit);\n\t\t\t}.bind(this));\n\t\t},\n\t\ttoggle: function (elem) {\n\t\t\treturn this.isFullscreen ? this.exit() : this.request(elem);\n\t\t},\n\t\tonchange: function (callback) {\n\t\t\tthis.on('change', callback);\n\t\t},\n\t\tonerror: function (callback) {\n\t\t\tthis.on('error', callback);\n\t\t},\n\t\ton: function (event, callback) {\n\t\t\tvar eventName = eventNameMap[event];\n\t\t\tif (eventName) {\n\t\t\t\tdocument.addEventListener(eventName, callback, false);\n\t\t\t}\n\t\t},\n\t\toff: function (event, callback) {\n\t\t\tvar eventName = eventNameMap[event];\n\t\t\tif (eventName) {\n\t\t\t\tdocument.removeEventListener(eventName, callback, false);\n\t\t\t}\n\t\t},\n\t\traw: fn\n\t};\n\n\tif (!fn) {\n\t\tif (isCommonjs) {\n\t\t\tmodule.exports = false;\n\t\t} else {\n\t\t\twindow.screenfull = false;\n\t\t}\n\n\t\treturn;\n\t}\n\n\tObject.defineProperties(screenfull, {\n\t\tisFullscreen: {\n\t\t\tget: function () {\n\t\t\t\treturn Boolean(document[fn.fullscreenElement]);\n\t\t\t}\n\t\t},\n\t\telement: {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn document[fn.fullscreenElement];\n\t\t\t}\n\t\t},\n\t\tenabled: {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\t// Coerce to boolean in case of old WebKit\n\t\t\t\treturn Boolean(document[fn.fullscreenEnabled]);\n\t\t\t}\n\t\t}\n\t});\n\n\tif (isCommonjs) {\n\t\tmodule.exports = screenfull;\n\t\t// TODO: remove this in the next major version\n\t\tmodule.exports.default = screenfull;\n\t} else {\n\t\twindow.screenfull = screenfull;\n\t}\n})();\n","<ng-content></ng-content>","<div class=\"mat-drawer-inner-container\"><ng-content></ng-content></div>","<div class=\"mat-drawer-backdrop\" (click)=\"_onBackdropClicked()\" *ngIf=\"hasBackdrop\" [class.mat-drawer-shown]=\"_isShowingBackdrop()\"></div><ng-content select=\"mat-drawer\"></ng-content><ng-content select=\"mat-drawer-content\"></ng-content><mat-drawer-content *ngIf=\"!_content\"><ng-content></ng-content></mat-drawer-content>","<ng-content></ng-content>","<div class=\"mat-drawer-inner-container\"><ng-content></ng-content></div>","<div class=\"mat-drawer-backdrop\" (click)=\"_onBackdropClicked()\" *ngIf=\"hasBackdrop\" [class.mat-drawer-shown]=\"_isShowingBackdrop()\"></div><ng-content select=\"mat-sidenav\"></ng-content><ng-content select=\"mat-sidenav-content\"></ng-content><mat-sidenav-content *ngIf=\"!_content\" cdkScrollable><ng-content></ng-content></mat-sidenav-content>","<div class=\"title\">{{ title }}</div>\n<div class=\"crumbs\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  <div\n    class=\"crumb\"\n    *ngFor=\"let crumb of crumbs; let last = last\"\n    [ngSwitch]=\"!!crumb.link\"\n    fxLayout=\"row\"\n    fxLayoutAlign=\"start center\"\n  >\n    <a *ngSwitchCase=\"true\" class=\"crumb link\" [routerLink]=\"[crumb.link]\">{{ crumb.name }}</a>\n    <div *ngSwitchDefault class=\"link\">{{ crumb.name }}</div>\n    <mat-icon *ngIf=\"!last\" class=\"chevron\">chevron_right</mat-icon>\n  </div>\n</div>\n","<div cdk-overlay-origin class=\"mat-select-trigger\" aria-hidden=\"true\" (click)=\"toggle()\" #origin=\"cdkOverlayOrigin\" #trigger><div class=\"mat-select-value\" [ngSwitch]=\"empty\"><span class=\"mat-select-placeholder\" *ngSwitchCase=\"true\">{{placeholder || '\\u00A0'}}</span> <span class=\"mat-select-value-text\" *ngSwitchCase=\"false\" [ngSwitch]=\"!!customTrigger\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\"mat-select-trigger\" *ngSwitchCase=\"true\"></ng-content></span></div><div class=\"mat-select-arrow-wrapper\"><div class=\"mat-select-arrow\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\" [cdkConnectedOverlayScrollStrategy]=\"_scrollStrategy\" [cdkConnectedOverlayOrigin]=\"origin\" [cdkConnectedOverlayOpen]=\"panelOpen\" [cdkConnectedOverlayPositions]=\"_positions\" [cdkConnectedOverlayMinWidth]=\"_triggerRect?.width\" [cdkConnectedOverlayOffsetY]=\"_offsetY\" (backdropClick)=\"close()\" (attach)=\"_onAttached()\" (detach)=\"close()\"><div class=\"mat-select-panel-wrap\" [@transformPanelWrap]><div #panel class=\"mat-select-panel {{ _getPanelTheme() }}\" [ngClass]=\"panelClass\" [@transformPanel]=\"multiple ? 'showing-multiple' : 'showing'\" (@transformPanel.done)=\"_panelDoneAnimatingStream.next($event.toState)\" [style.transformOrigin]=\"_transformOrigin\" [style.font-size.px]=\"_triggerFontSize\" (keydown)=\"_handleKeydown($event)\"><ng-content></ng-content></div></div></ng-template>","import { NgModule } from '@angular/core';\nimport { QuickpanelComponent } from './quickpanel.component';\nimport { CommonModule } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { SharedFlexLayoutModule, SharedPerfectScrollbarModule } from '@ngx-starter-kit/shared';\n\nconst matModules = [MatListModule, MatProgressBarModule, MatSidenavModule, MatTabsModule];\n\n@NgModule({\n  imports: [CommonModule, [...matModules], SharedFlexLayoutModule, SharedPerfectScrollbarModule],\n  exports: [QuickpanelComponent],\n  declarations: [QuickpanelComponent],\n})\nexport class QuickpanelModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        this.stickyCssClass = 'mat-table-sticky';\n    }\n}\nMatTable.decorators = [\n    { type: Component, args: [{selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                host: {\n                    'class': 'mat-table',\n                },\n                providers: [{ provide: CdkTable, useExisting: MatTable }],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            },] },\n];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            },] },\n];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            },] },\n];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n}\nMatColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matColumnDef]',\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ],\n            },] },\n];\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }],\n    sticky: [{ type: Input }],\n    stickyEnd: [{ type: Input }]\n};\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass MatHeaderCell extends CdkHeaderCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] },\n];\n/** @nocollapse */\nMatHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass MatFooterCell extends CdkFooterCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/**\n * Cell template container that adds the right classes and role.\n */\nclass MatCell extends CdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n    }\n}\nMatCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] },\n];\n/** @nocollapse */\nMatCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n            },] },\n];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n            },] },\n];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.decorators = [\n    { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n            },] },\n];\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.decorators = [\n    { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n            },] },\n];\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass MatRow extends CdkRow {\n}\nMatRow.decorators = [\n    { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.decorators = [\n    { type: Component, args: [{selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CdkTableModule,\n                    CommonModule,\n                    MatCommonModule,\n                ],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\nclass MatTableDataSource extends DataSource {\n    /**\n     * @param {?=} initialData\n     */\n    constructor(initialData = []) {\n        super();\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        (data, sortHeaderId) => {\n            /** @type {?} */\n            const value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (_isNumberValue(value)) {\n                /** @type {?} */\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        (data, sort) => {\n            /** @type {?} */\n            const active = sort.active;\n            /** @type {?} */\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            (a, b) => {\n                /** @type {?} */\n                let valueA = this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                let valueB = this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come first.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            }));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            const dataStr = Object.keys(data).reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            (currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }), '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        });\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Array of data that should be rendered by the table, where each object represents one row.\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set data(data) { this._data.next(data); }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     * @return {?}\n     */\n    get filter() { return this._filter.value; }\n    /**\n     * @param {?} filter\n     * @return {?}\n     */\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     * @return {?}\n     */\n    get sort() { return this._sort; }\n    /**\n     * @param {?} sort\n     * @return {?}\n     */\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     * @return {?}\n     */\n    get paginator() { return this._paginator; }\n    /**\n     * @param {?} paginator\n     * @return {?}\n     */\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        const sortChange = this._sort ?\n            (/** @type {?} */ (merge(this._sort.sortChange, this._sort.initialized))) :\n            of(null);\n        /** @type {?} */\n        const pageChange = this._paginator ?\n            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\n            of(null);\n        /** @type {?} */\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        const filteredData = combineLatest(dataStream, this._filter)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._filterData(data))));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        const orderedData = combineLatest(filteredData, sortChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._orderData(data))));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        const paginatedData = combineLatest(orderedData, pageChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([data]) => this._pageData(data))));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => this._renderData.next(data)));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            obj => this.filterPredicate(obj, this.filter)));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        }));\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    disconnect() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };\n//# sourceMappingURL=table.js.map\n","var obj;\nvar NOTHING = typeof Symbol !== \"undefined\" ? Symbol(\"immer-nothing\") : ( obj = {}, obj[\"immer-nothing\"] = true, obj );\nvar DRAFTABLE = typeof Symbol !== \"undefined\" && Symbol.for ? Symbol.for(\"immer-draftable\") : \"__$immer_draftable\";\nvar DRAFT_STATE = typeof Symbol !== \"undefined\" && Symbol.for ? Symbol.for(\"immer-state\") : \"__$immer_state\";\nfunction isDraft(value) {\n  return !!value && !!value[DRAFT_STATE];\n}\nfunction isDraftable(value) {\n  if (!value || typeof value !== \"object\") { return false; }\n  if (Array.isArray(value)) { return true; }\n  var proto = Object.getPrototypeOf(value);\n  if (!proto || proto === Object.prototype) { return true; }\n  return !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE];\n}\nfunction original(value) {\n  if (value && value[DRAFT_STATE]) {\n    return value[DRAFT_STATE].base;\n  } // otherwise return undefined\n\n}\nvar assign = Object.assign || function assign(target, value) {\n  for (var key in value) {\n    if (has(value, key)) {\n      target[key] = value[key];\n    }\n  }\n\n  return target;\n};\nvar ownKeys = typeof Reflect !== \"undefined\" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== \"undefined\" ? function (obj) { return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)); } : Object.getOwnPropertyNames;\nfunction shallowCopy(base, invokeGetters) {\n  if ( invokeGetters === void 0 ) invokeGetters = false;\n\n  if (Array.isArray(base)) { return base.slice(); }\n  var clone = Object.create(Object.getPrototypeOf(base));\n  ownKeys(base).forEach(function (key) {\n    if (key === DRAFT_STATE) {\n      return; // Never copy over draft state.\n    }\n\n    var desc = Object.getOwnPropertyDescriptor(base, key);\n    var value = desc.value;\n\n    if (desc.get) {\n      if (!invokeGetters) {\n        throw new Error(\"Immer drafts cannot have computed properties\");\n      }\n\n      value = desc.get.call(base);\n    }\n\n    if (desc.enumerable) {\n      clone[key] = value;\n    } else {\n      Object.defineProperty(clone, key, {\n        value: value,\n        writable: true,\n        configurable: true\n      });\n    }\n  });\n  return clone;\n}\nfunction each(value, cb) {\n  if (Array.isArray(value)) {\n    for (var i = 0; i < value.length; i++) { cb(i, value[i], value); }\n  } else {\n    ownKeys(value).forEach(function (key) { return cb(key, value[key], value); });\n  }\n}\nfunction isEnumerable(base, prop) {\n  var desc = Object.getOwnPropertyDescriptor(base, prop);\n  return !!desc && desc.enumerable;\n}\nfunction has(thing, prop) {\n  return Object.prototype.hasOwnProperty.call(thing, prop);\n}\nfunction is(x, y) {\n  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\n/** Each scope represents a `produce` call. */\n\nvar ImmerScope = function ImmerScope(parent) {\n  this.drafts = [];\n  this.parent = parent; // Whenever the modified draft contains a draft from another scope, we\n  // need to prevent auto-freezing so the unowned draft can be finalized.\n\n  this.canAutoFreeze = true; // To avoid prototype lookups:\n\n  this.patches = null;\n};\n\nImmerScope.prototype.usePatches = function usePatches (patchListener) {\n  if (patchListener) {\n    this.patches = [];\n    this.inversePatches = [];\n    this.patchListener = patchListener;\n  }\n};\n\nImmerScope.prototype.revoke = function revoke$1 () {\n  this.leave();\n  this.drafts.forEach(revoke);\n  this.drafts = null; // Make draft-related methods throw.\n};\n\nImmerScope.prototype.leave = function leave () {\n  if (this === ImmerScope.current) {\n    ImmerScope.current = this.parent;\n  }\n};\nImmerScope.current = null;\n\nImmerScope.enter = function () {\n  return this.current = new ImmerScope(this.current);\n};\n\nfunction revoke(draft) {\n  draft[DRAFT_STATE].revoke();\n}\n\n// but share them all instead\n\nvar descriptors = {};\nfunction willFinalize(scope, result, isReplaced) {\n  scope.drafts.forEach(function (draft) {\n    draft[DRAFT_STATE].finalizing = true;\n  });\n\n  if (!isReplaced) {\n    if (scope.patches) {\n      markChangesRecursively(scope.drafts[0]);\n    } // This is faster when we don't care about which attributes changed.\n\n\n    markChangesSweep(scope.drafts);\n  } // When a child draft is returned, look for changes.\n  else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n      markChangesSweep(scope.drafts);\n    }\n}\nfunction createProxy(base, parent) {\n  var isArray = Array.isArray(base);\n  var draft = clonePotentialDraft(base);\n  each(draft, function (prop) {\n    proxyProperty(draft, prop, isArray || isEnumerable(base, prop));\n  }); // See \"proxy.js\" for property documentation.\n\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    scope: scope,\n    modified: false,\n    finalizing: false,\n    // es5 only\n    finalized: false,\n    assigned: {},\n    parent: parent,\n    base: base,\n    draft: draft,\n    copy: null,\n    revoke: revoke$1,\n    revoked: false // es5 only\n\n  };\n  createHiddenProperty(draft, DRAFT_STATE, state);\n  scope.drafts.push(draft);\n  return draft;\n}\n\nfunction revoke$1() {\n  this.revoked = true;\n}\n\nfunction source(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek(draft, prop) {\n  var state = draft[DRAFT_STATE];\n\n  if (state && !state.finalizing) {\n    state.finalizing = true;\n    var value = draft[prop];\n    state.finalizing = false;\n    return value;\n  }\n\n  return draft[prop];\n}\n\nfunction get(state, prop) {\n  assertUnrevoked(state);\n  var value = peek(source(state), prop);\n  if (state.finalizing) { return value; } // Create a draft if the value is unmodified.\n\n  if (value === peek(state.base, prop) && isDraftable(value)) {\n    prepareCopy(state);\n    return state.copy[prop] = createProxy(value, state);\n  }\n\n  return value;\n}\n\nfunction set(state, prop, value) {\n  assertUnrevoked(state);\n  state.assigned[prop] = true;\n\n  if (!state.modified) {\n    if (is(value, peek(source(state), prop))) { return; }\n    markChanged(state);\n    prepareCopy(state);\n  }\n\n  state.copy[prop] = value;\n}\n\nfunction markChanged(state) {\n  if (!state.modified) {\n    state.modified = true;\n    if (state.parent) { markChanged(state.parent); }\n  }\n}\n\nfunction prepareCopy(state) {\n  if (!state.copy) { state.copy = clonePotentialDraft(state.base); }\n}\n\nfunction clonePotentialDraft(base) {\n  var state = base && base[DRAFT_STATE];\n\n  if (state) {\n    state.finalizing = true;\n    var draft = shallowCopy(state.draft, true);\n    state.finalizing = false;\n    return draft;\n  }\n\n  return shallowCopy(base);\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n  var desc = descriptors[prop];\n\n  if (desc) {\n    desc.enumerable = enumerable;\n  } else {\n    descriptors[prop] = desc = {\n      configurable: true,\n      enumerable: enumerable,\n\n      get: function get$1() {\n        return get(this[DRAFT_STATE], prop);\n      },\n\n      set: function set$1(value) {\n        set(this[DRAFT_STATE], prop, value);\n      }\n\n    };\n  }\n\n  Object.defineProperty(draft, prop, desc);\n}\n\nfunction assertUnrevoked(state) {\n  if (state.revoked === true) { throw new Error(\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + JSON.stringify(source(state))); }\n} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\n\nfunction markChangesSweep(drafts) {\n  // The natural order of drafts in the `scope` array is based on when they\n  // were accessed. By processing drafts in reverse natural order, we have a\n  // better chance of processing leaf nodes first. When a leaf node is known to\n  // have changed, we can avoid any traversal of its ancestor nodes.\n  for (var i = drafts.length - 1; i >= 0; i--) {\n    var state = drafts[i][DRAFT_STATE];\n\n    if (!state.modified) {\n      if (Array.isArray(state.base)) {\n        if (hasArrayChanges(state)) { markChanged(state); }\n      } else if (hasObjectChanges(state)) { markChanged(state); }\n    }\n  }\n}\n\nfunction markChangesRecursively(object) {\n  if (!object || typeof object !== \"object\") { return; }\n  var state = object[DRAFT_STATE];\n  if (!state) { return; }\n  var base = state.base;\n  var draft = state.draft;\n  var assigned = state.assigned;\n\n  if (!Array.isArray(object)) {\n    // Look for added keys.\n    Object.keys(draft).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (base[key] === undefined && !has(base, key)) {\n        assigned[key] = true;\n        markChanged(state);\n      } else if (!assigned[key]) {\n        // Only untouched properties trigger recursion.\n        markChangesRecursively(draft[key]);\n      }\n    }); // Look for removed keys.\n\n    Object.keys(base).forEach(function (key) {\n      // The `undefined` check is a fast path for pre-existing keys.\n      if (draft[key] === undefined && !has(draft, key)) {\n        assigned[key] = false;\n        markChanged(state);\n      }\n    });\n  } else if (hasArrayChanges(state)) {\n    markChanged(state);\n    assigned.length = true;\n\n    if (draft.length < base.length) {\n      for (var i = draft.length; i < base.length; i++) { assigned[i] = false; }\n    } else {\n      for (var i$1 = base.length; i$1 < draft.length; i$1++) { assigned[i$1] = true; }\n    }\n\n    for (var i$2 = 0; i$2 < draft.length; i$2++) {\n      // Only untouched indices trigger recursion.\n      if (assigned[i$2] === undefined) { markChangesRecursively(draft[i$2]); }\n    }\n  }\n}\n\nfunction hasObjectChanges(state) {\n  var base = state.base;\n  var draft = state.draft; // Search for added keys and changed keys. Start at the back, because\n  // non-numeric keys are ordered by time of definition on the object.\n\n  var keys = Object.keys(draft);\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    var key = keys[i];\n    var baseValue = base[key]; // The `undefined` check is a fast path for pre-existing keys.\n\n    if (baseValue === undefined && !has(base, key)) {\n      return true;\n    } // Once a base key is deleted, future changes go undetected, because its\n    // descriptor is erased. This branch detects any missed changes.\n    else {\n        var value = draft[key];\n        var state$1 = value && value[DRAFT_STATE];\n\n        if (state$1 ? state$1.base !== baseValue : !is(value, baseValue)) {\n          return true;\n        }\n      }\n  } // At this point, no keys were added or changed.\n  // Compare key count to determine if keys were deleted.\n\n\n  return keys.length !== Object.keys(base).length;\n}\n\nfunction hasArrayChanges(state) {\n  var draft = state.draft;\n  if (draft.length !== state.base.length) { return true; } // See #116\n  // If we first shorten the length, our array interceptors will be removed.\n  // If after that new items are added, result in the same original length,\n  // those last items will have no intercepting property.\n  // So if there is no own descriptor on the last position, we know that items were removed and added\n  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n  // the last one\n\n  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\n  if (descriptor && !descriptor.get) { return true; } // For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\n  return false;\n}\n\nfunction createHiddenProperty(target, prop, value) {\n  Object.defineProperty(target, prop, {\n    value: value,\n    enumerable: false,\n    writable: true\n  });\n}\n\nvar legacyProxy = /*#__PURE__*/Object.freeze({\n    willFinalize: willFinalize,\n    createProxy: createProxy\n});\n\nfunction willFinalize$1() {}\nfunction createProxy$1(base, parent) {\n  var scope = parent ? parent.scope : ImmerScope.current;\n  var state = {\n    // Track which produce call this is associated with.\n    scope: scope,\n    // True for both shallow and deep changes.\n    modified: false,\n    // Used during finalization.\n    finalized: false,\n    // Track which properties have been assigned (true) or deleted (false).\n    assigned: {},\n    // The parent draft state.\n    parent: parent,\n    // The base state.\n    base: base,\n    // The base proxy.\n    draft: null,\n    // Any property proxies.\n    drafts: {},\n    // The base copy with any updated values.\n    copy: null,\n    // Called by the `produce` function.\n    revoke: null\n  };\n  var ref = Array.isArray(base) ? // [state] is used for arrays, to make sure the proxy is array-ish and not violate invariants,\n  // although state itself is an object\n  Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps);\n  var revoke = ref.revoke;\n  var proxy = ref.proxy;\n  state.draft = proxy;\n  state.revoke = revoke;\n  scope.drafts.push(proxy);\n  return proxy;\n}\nvar objectTraps = {\n  get: get$1,\n\n  has: function has(target, prop) {\n    return prop in source$1(target);\n  },\n\n  ownKeys: function ownKeys(target) {\n    return Reflect.ownKeys(source$1(target));\n  },\n\n  set: set$1,\n  deleteProperty: deleteProperty,\n  getOwnPropertyDescriptor: getOwnPropertyDescriptor,\n\n  defineProperty: function defineProperty() {\n    throw new Error(\"Object.defineProperty() cannot be used on an Immer draft\"); // prettier-ignore\n  },\n\n  getPrototypeOf: function getPrototypeOf(target) {\n    return Object.getPrototypeOf(target.base);\n  },\n\n  setPrototypeOf: function setPrototypeOf() {\n    throw new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\"); // prettier-ignore\n  }\n\n};\nvar arrayTraps = {};\neach(objectTraps, function (key, fn) {\n  arrayTraps[key] = function () {\n    arguments[0] = arguments[0][0];\n    return fn.apply(this, arguments);\n  };\n});\n\narrayTraps.deleteProperty = function (state, prop) {\n  if (isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports deleting array indices\"); // prettier-ignore\n  }\n\n  return objectTraps.deleteProperty.call(this, state[0], prop);\n};\n\narrayTraps.set = function (state, prop, value) {\n  if (prop !== \"length\" && isNaN(parseInt(prop))) {\n    throw new Error(\"Immer only supports setting array indices and the 'length' property\"); // prettier-ignore\n  }\n\n  return objectTraps.set.call(this, state[0], prop, value);\n}; // returns the object we should be reading the current value from, which is base, until some change has been made\n\n\nfunction source$1(state) {\n  return state.copy || state.base;\n} // Access a property without creating an Immer draft.\n\n\nfunction peek$1(draft, prop) {\n  var state = draft[DRAFT_STATE];\n  var desc = Reflect.getOwnPropertyDescriptor(state ? source$1(state) : draft, prop);\n  return desc && desc.value;\n}\n\nfunction get$1(state, prop) {\n  if (prop === DRAFT_STATE) { return state; }\n  var drafts = state.drafts; // Check for existing draft in unmodified state.\n\n  if (!state.modified && has(drafts, prop)) {\n    return drafts[prop];\n  }\n\n  var value = source$1(state)[prop];\n\n  if (state.finalized || !isDraftable(value)) {\n    return value;\n  } // Check for existing draft in modified state.\n\n\n  if (state.modified) {\n    // Assigned values are never drafted. This catches any drafts we created, too.\n    if (value !== peek$1(state.base, prop)) { return value; } // Store drafts on the copy (when one exists).\n\n    drafts = state.copy;\n  }\n\n  return drafts[prop] = createProxy$1(value, state);\n}\n\nfunction set$1(state, prop, value) {\n  if (!state.modified) {\n    var baseValue = peek$1(state.base, prop); // Optimize based on value's truthiness. Truthy values are guaranteed to\n    // never be undefined, so we can avoid the `in` operator. Lastly, truthy\n    // values may be drafts, but falsy values are never drafts.\n\n    var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;\n    if (isUnchanged) { return true; }\n    markChanged$1(state);\n  }\n\n  state.assigned[prop] = true;\n  state.copy[prop] = value;\n  return true;\n}\n\nfunction deleteProperty(state, prop) {\n  // The `undefined` check is a fast path for pre-existing keys.\n  if (peek$1(state.base, prop) !== undefined || prop in state.base) {\n    state.assigned[prop] = false;\n    markChanged$1(state);\n  }\n\n  if (state.copy) { delete state.copy[prop]; }\n  return true;\n} // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n// the same guarantee in ES5 mode.\n\n\nfunction getOwnPropertyDescriptor(state, prop) {\n  var owner = source$1(state);\n  var desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n\n  if (desc) {\n    desc.writable = true;\n    desc.configurable = !Array.isArray(owner) || prop !== \"length\";\n  }\n\n  return desc;\n}\n\nfunction markChanged$1(state) {\n  if (!state.modified) {\n    state.modified = true;\n    state.copy = assign(shallowCopy(state.base), state.drafts);\n    state.drafts = null;\n    if (state.parent) { markChanged$1(state.parent); }\n  }\n}\n\nvar modernProxy = /*#__PURE__*/Object.freeze({\n    willFinalize: willFinalize$1,\n    createProxy: createProxy$1\n});\n\nfunction generatePatches(state, basePath, patches, inversePatches) {\n  Array.isArray(state.base) ? generateArrayPatches(state, basePath, patches, inversePatches) : generateObjectPatches(state, basePath, patches, inversePatches);\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n  var assign, assign$1;\n\n  var base = state.base;\n  var copy = state.copy;\n  var assigned = state.assigned; // Reduce complexity by ensuring `base` is never longer.\n\n  if (copy.length < base.length) {\n    (assign = [copy, base], base = assign[0], copy = assign[1]);\n    (assign$1 = [inversePatches, patches], patches = assign$1[0], inversePatches = assign$1[1]);\n  }\n\n  var delta = copy.length - base.length; // Find the first replaced index.\n\n  var start = 0;\n\n  while (base[start] === copy[start] && start < base.length) {\n    ++start;\n  } // Find the last replaced index. Search from the end to optimize splice patches.\n\n\n  var end = base.length;\n\n  while (end > start && base[end - 1] === copy[end + delta - 1]) {\n    --end;\n  } // Process replaced indices.\n\n\n  for (var i = start; i < end; ++i) {\n    if (assigned[i] && copy[i] !== base[i]) {\n      var path = basePath.concat([i]);\n      patches.push({\n        op: \"replace\",\n        path: path,\n        value: copy[i]\n      });\n      inversePatches.push({\n        op: \"replace\",\n        path: path,\n        value: base[i]\n      });\n    }\n  }\n\n  var useRemove = end != base.length;\n  var replaceCount = patches.length; // Process added indices.\n\n  for (var i$1 = end + delta - 1; i$1 >= end; --i$1) {\n    var path$1 = basePath.concat([i$1]);\n    patches[replaceCount + i$1 - end] = {\n      op: \"add\",\n      path: path$1,\n      value: copy[i$1]\n    };\n\n    if (useRemove) {\n      inversePatches.push({\n        op: \"remove\",\n        path: path$1\n      });\n    }\n  } // One \"replace\" patch reverses all non-splicing \"add\" patches.\n\n\n  if (!useRemove) {\n    inversePatches.push({\n      op: \"replace\",\n      path: basePath.concat([\"length\"]),\n      value: base.length\n    });\n  }\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n  var base = state.base;\n  var copy = state.copy;\n  each(state.assigned, function (key, assignedValue) {\n    var origValue = base[key];\n    var value = copy[key];\n    var op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\";\n    if (origValue === value && op === \"replace\") { return; }\n    var path = basePath.concat(key);\n    patches.push(op === \"remove\" ? {\n      op: op,\n      path: path\n    } : {\n      op: op,\n      path: path,\n      value: value\n    });\n    inversePatches.push(op === \"add\" ? {\n      op: \"remove\",\n      path: path\n    } : op === \"remove\" ? {\n      op: \"add\",\n      path: path,\n      value: origValue\n    } : {\n      op: \"replace\",\n      path: path,\n      value: origValue\n    });\n  });\n}\n\nfunction applyPatches(draft, patches) {\n  for (var i = 0; i < patches.length; i++) {\n    var patch = patches[i];\n    var path = patch.path;\n\n    if (path.length === 0 && patch.op === \"replace\") {\n      draft = patch.value;\n    } else {\n      var base = draft;\n\n      for (var i$1 = 0; i$1 < path.length - 1; i$1++) {\n        base = base[path[i$1]];\n        if (!base || typeof base !== \"object\") { throw new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")); } // prettier-ignore\n      }\n\n      var key = path[path.length - 1];\n\n      switch (patch.op) {\n        case \"replace\":\n          base[key] = patch.value;\n          break;\n\n        case \"add\":\n          if (Array.isArray(base)) {\n            // TODO: support \"foo/-\" paths for appending to an array\n            base.splice(key, 0, patch.value);\n          } else {\n            base[key] = patch.value;\n          }\n\n          break;\n\n        case \"remove\":\n          if (Array.isArray(base)) {\n            base.splice(key, 1);\n          } else {\n            delete base[key];\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unsupported patch operation: \" + patch.op);\n      }\n    }\n  }\n\n  return draft;\n}\n\nfunction verifyMinified() {}\n\nvar configDefaults = {\n  useProxies: typeof Proxy !== \"undefined\" && typeof Reflect !== \"undefined\",\n  autoFreeze: typeof process !== \"undefined\" ? process.env.NODE_ENV !== \"production\" : verifyMinified.name === \"verifyMinified\",\n  onAssign: null,\n  onDelete: null,\n  onCopy: null\n};\nvar Immer = function Immer(config) {\n  assign(this, configDefaults, config);\n  this.setUseProxies(this.useProxies);\n  this.produce = this.produce.bind(this);\n};\n\nImmer.prototype.produce = function produce (base, recipe, patchListener) {\n    var this$1 = this;\n\n  // curried invocation\n  if (typeof base === \"function\" && typeof recipe !== \"function\") {\n    var defaultBase = recipe;\n    recipe = base;\n    var self = this;\n    return function curriedProduce(base) {\n        var this$1 = this;\n        if ( base === void 0 ) base = defaultBase;\n        var args = [], len = arguments.length - 1;\n        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n      return self.produce(base, function (draft) { return recipe.call.apply(recipe, [ this$1, draft ].concat( args )); }); // prettier-ignore\n    };\n  } // prettier-ignore\n\n\n  {\n    if (typeof recipe !== \"function\") {\n      throw new Error(\"The first or second argument to `produce` must be a function\");\n    }\n\n    if (patchListener !== undefined && typeof patchListener !== \"function\") {\n      throw new Error(\"The third argument to `produce` must be a function or undefined\");\n    }\n  }\n  var result; // Only plain objects, arrays, and \"immerable classes\" are drafted.\n\n  if (isDraftable(base)) {\n    var scope = ImmerScope.enter();\n    var proxy = this.createProxy(base);\n    var hasError = true;\n\n    try {\n      result = recipe(proxy);\n      hasError = false;\n    } finally {\n      // finally instead of catch + rethrow better preserves original stack\n      if (hasError) { scope.revoke(); }else { scope.leave(); }\n    }\n\n    if (result instanceof Promise) {\n      return result.then(function (result) {\n        scope.usePatches(patchListener);\n        return this$1.processResult(result, scope);\n      }, function (error) {\n        scope.revoke();\n        throw error;\n      });\n    }\n\n    scope.usePatches(patchListener);\n    return this.processResult(result, scope);\n  } else {\n    result = recipe(base);\n    if (result === undefined) { return base; }\n    return result !== NOTHING ? result : undefined;\n  }\n};\n\nImmer.prototype.createDraft = function createDraft (base) {\n  if (!isDraftable(base)) {\n    throw new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\"); // prettier-ignore\n  }\n\n  var scope = ImmerScope.enter();\n  var proxy = this.createProxy(base);\n  proxy[DRAFT_STATE].isManual = true;\n  scope.leave();\n  return proxy;\n};\n\nImmer.prototype.finishDraft = function finishDraft (draft, patchListener) {\n  var state = draft && draft[DRAFT_STATE];\n\n  if (!state || !state.isManual) {\n    throw new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\"); // prettier-ignore\n  }\n\n  if (state.finalized) {\n    throw new Error(\"The given draft is already finalized\"); // prettier-ignore\n  }\n\n  var scope = state.scope;\n  scope.usePatches(patchListener);\n  return this.processResult(undefined, scope);\n};\n\nImmer.prototype.setAutoFreeze = function setAutoFreeze (value) {\n  this.autoFreeze = value;\n};\n\nImmer.prototype.setUseProxies = function setUseProxies (value) {\n  this.useProxies = value;\n  assign(this, value ? modernProxy : legacyProxy);\n};\n\nImmer.prototype.applyPatches = function applyPatches$1 (base, patches) {\n  // Mutate the base state when a draft is passed.\n  if (isDraft(base)) {\n    return applyPatches(base, patches);\n  } // Otherwise, produce a copy of the base state.\n\n\n  return this.produce(base, function (draft) { return applyPatches(draft, patches); });\n};\n/** @internal */\n\n\nImmer.prototype.processResult = function processResult (result, scope) {\n  var baseDraft = scope.drafts[0];\n  var isReplaced = result !== undefined && result !== baseDraft;\n  this.willFinalize(scope, result, isReplaced);\n\n  if (isReplaced) {\n    if (baseDraft[DRAFT_STATE].modified) {\n      scope.revoke();\n      throw new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\"); // prettier-ignore\n    }\n\n    if (isDraftable(result)) {\n      // Finalize the result in case it contains (or is) a subset of the draft.\n      result = this.finalize(result, null, scope);\n    }\n\n    if (scope.patches) {\n      scope.patches.push({\n        op: \"replace\",\n        path: [],\n        value: result\n      });\n      scope.inversePatches.push({\n        op: \"replace\",\n        path: [],\n        value: baseDraft[DRAFT_STATE].base\n      });\n    }\n  } else {\n    // Finalize the base draft.\n    result = this.finalize(baseDraft, [], scope);\n  }\n\n  scope.revoke();\n\n  if (scope.patches) {\n    scope.patchListener(scope.patches, scope.inversePatches);\n  }\n\n  return result !== NOTHING ? result : undefined;\n};\n/**\n * @internal\n * Finalize a draft, returning either the unmodified base state or a modified\n * copy of the base state.\n */\n\n\nImmer.prototype.finalize = function finalize (draft, path, scope) {\n    var this$1 = this;\n\n  var state = draft[DRAFT_STATE];\n\n  if (!state) {\n    if (Object.isFrozen(draft)) { return draft; }\n    return this.finalizeTree(draft, null, scope);\n  } // Never finalize drafts owned by another scope.\n\n\n  if (state.scope !== scope) {\n    return draft;\n  }\n\n  if (!state.modified) {\n    return state.base;\n  }\n\n  if (!state.finalized) {\n    state.finalized = true;\n    this.finalizeTree(state.draft, path, scope);\n\n    if (this.onDelete) {\n      // The `assigned` object is unreliable with ES5 drafts.\n      if (this.useProxies) {\n        var assigned = state.assigned;\n\n        for (var prop in assigned) {\n          if (!assigned[prop]) { this.onDelete(state, prop); }\n        }\n      } else {\n        var base = state.base;\n          var copy = state.copy;\n        each(base, function (prop) {\n          if (!has(copy, prop)) { this$1.onDelete(state, prop); }\n        });\n      }\n    }\n\n    if (this.onCopy) {\n      this.onCopy(state);\n    } // At this point, all descendants of `state.copy` have been finalized,\n    // so we can be sure that `scope.canAutoFreeze` is accurate.\n\n\n    if (this.autoFreeze && scope.canAutoFreeze) {\n      Object.freeze(state.copy);\n    }\n\n    if (path && scope.patches) {\n      generatePatches(state, path, scope.patches, scope.inversePatches);\n    }\n  }\n\n  return state.copy;\n};\n/**\n * @internal\n * Finalize all drafts in the given state tree.\n */\n\n\nImmer.prototype.finalizeTree = function finalizeTree (root, rootPath, scope) {\n    var this$1 = this;\n\n  var state = root[DRAFT_STATE];\n\n  if (state) {\n    if (!this.useProxies) {\n      // Create the final copy, with added keys and without deleted keys.\n      state.copy = shallowCopy(state.draft, true);\n    }\n\n    root = state.copy;\n  }\n\n  var needPatches = !!rootPath && !!scope.patches;\n\n  var finalizeProperty = function (prop, value, parent) {\n    if (value === parent) {\n      throw Error(\"Immer forbids circular references\");\n    } // In the `finalizeTree` method, only the `root` object may be a draft.\n\n\n    var isDraftProp = !!state && parent === root;\n\n    if (isDraft(value)) {\n      var path = isDraftProp && needPatches && !state.assigned[prop] ? rootPath.concat(prop) : null; // Drafts owned by `scope` are finalized here.\n\n      value = this$1.finalize(value, path, scope); // Drafts from another scope must prevent auto-freezing.\n\n      if (isDraft(value)) {\n        scope.canAutoFreeze = false;\n      } // Preserve non-enumerable properties.\n\n\n      if (Array.isArray(parent) || isEnumerable(parent, prop)) {\n        parent[prop] = value;\n      } else {\n        Object.defineProperty(parent, prop, {\n          value: value\n        });\n      } // Unchanged drafts are never passed to the `onAssign` hook.\n\n\n      if (isDraftProp && value === state.base[prop]) { return; }\n    } // Unchanged draft properties are ignored.\n    else if (isDraftProp && is(value, state.base[prop])) {\n        return;\n      } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n      else if (isDraftable(value) && !Object.isFrozen(value)) {\n          each(value, finalizeProperty);\n        }\n\n    if (isDraftProp && this$1.onAssign) {\n      this$1.onAssign(state, prop, value);\n    }\n  };\n\n  each(root, finalizeProperty);\n  return root;\n};\n\nvar immer = new Immer();\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\n\nvar produce = immer.produce;\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\n\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\n\nvar setUseProxies = immer.setUseProxies.bind(immer);\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\n\nvar applyPatches$1 = immer.applyPatches.bind(immer);\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\n\nvar createDraft = immer.createDraft.bind(immer);\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\n\nvar finishDraft = immer.finishDraft.bind(immer);\n\nexport default produce;\nexport { Immer, applyPatches$1 as applyPatches, createDraft, finishDraft, DRAFTABLE as immerable, isDraft, isDraftable, NOTHING as nothing, original, produce, setAutoFreeze, setUseProxies };\n//# sourceMappingURL=immer.module.js.map\n","import { produce, createDraft, finishDraft } from 'immer';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An utility function, that determines if provided target is defined and not nullable\n *\n * @template T\n * @param {?} target - Value to check for being `undefined` or `null`\n * @return {?} - True if the passed target is not `undefined` and not `null`\n */\nfunction isDefined(target) {\n    return target !== undefined && target !== null;\n}\n/**\n * An utility function, that determines if provided object is valid\n *\n * @template T\n * @param {?} ctx - `StateContext` plain object\n * @return {?} - True if provided object is valid and has necessary methods\n */\nfunction isValidContext(ctx) {\n    return isDefined(ctx) && typeof ctx.getState === 'function' && typeof ctx.setState === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An adapter function for the `produce` from `immer` library\n *\n * @deprecated - use immutable helpers from ngxs v3.4.x\n * @template T\n * @param {?} ctx - Reference to the `StateContext` plain object\n * @param {?} recipe - Function that receives a proxy of the current state\n * @return {?} - New state or throws an error\n */\nfunction produce$1(ctx, recipe) {\n    /** @type {?} */\n    const invalidContext = !isValidContext(ctx);\n    if (invalidContext) {\n        throw new Error('You should provide `StateContext` object as the first argument of the `produce` function');\n    }\n    return ctx.setState((/** @type {?} */ (((/**\n     * @param {?} state\n     * @return {?}\n     */\n    (state) => produce(state, recipe))))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ImmutableStateContext {\n    /**\n     * @param {?} ctx\n     */\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.frozenState = null;\n        ImmutableStateContext.autobindStateContext(this);\n    }\n    /**\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    static autobindStateContext(context) {\n        for (const prop of Object.getOwnPropertyNames(Object.getPrototypeOf(context))) {\n            if (prop === 'constructor' || typeof context[prop] !== 'function') {\n                continue;\n            }\n            context[prop] = context[prop].bind(context);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getState() {\n        this.frozenState = (/** @type {?} */ (createDraft(this.ctx.getState())));\n        return this.frozenState;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    setState(val) {\n        /** @type {?} */\n        let state;\n        if (typeof val === 'function') {\n            /** @type {?} */\n            let newState;\n            /** @type {?} */\n            const oldState = (/** @type {?} */ (createDraft(this.ctx.getState())));\n            /** @type {?} */\n            const operator = (/** @type {?} */ (val));\n            /** @type {?} */\n            const mutatedOldState = operator(oldState);\n            if (this.frozenState === mutatedOldState) {\n                newState = finishDraft(this.frozenState);\n                finishDraft(oldState);\n            }\n            else {\n                /** @type {?} */\n                const mutateOutsideOperator = oldState !== mutatedOldState;\n                if (mutateOutsideOperator) {\n                    newState = mutatedOldState;\n                    finishDraft(oldState);\n                }\n                else {\n                    newState = finishDraft(mutatedOldState);\n                }\n            }\n            state = newState;\n        }\n        else {\n            state = finishDraft(val);\n        }\n        this.frozenState = null;\n        return this.ctx.setState(state);\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    patchState(val) {\n        return this.ctx.patchState((/** @type {?} */ (finishDraft(val))));\n    }\n    /**\n     * @param {?} actions\n     * @return {?}\n     */\n    dispatch(actions) {\n        return this.ctx.dispatch(actions);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated - use ImmutableContext instead Mutation\n * @return {?}\n */\nfunction Mutation() {\n    return (/**\n     * @param {?} _target\n     * @param {?} _key\n     * @param {?} descriptor\n     * @return {?}\n     */\n    function (_target, _key, descriptor) {\n        /** @type {?} */\n        const method = descriptor.value;\n        descriptor.value = (/**\n         * @param {?} ctx\n         * @param {?} action\n         * @param {...?} args\n         * @return {?}\n         */\n        function (ctx, action, ...args) {\n            return method.apply(this, [new ImmutableStateContext(ctx), action, ...args]);\n        });\n        return descriptor;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction ImmutableContext() {\n    return (/**\n     * @param {?} _target\n     * @param {?} _key\n     * @param {?} descriptor\n     * @return {?}\n     */\n    function (_target, _key, descriptor) {\n        /** @type {?} */\n        const method = descriptor.value;\n        descriptor.value = (/**\n         * @param {?} ctx\n         * @param {?} action\n         * @param {...?} args\n         * @return {?}\n         */\n        function (ctx, action, ...args) {\n            return method.apply(this, [new ImmutableStateContext(ctx), action, ...args]);\n        });\n        return descriptor;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction ImmutableSelector() {\n    return (/**\n     * @param {?} _target\n     * @param {?} _key\n     * @param {?} descriptor\n     * @return {?}\n     */\n    function (_target, _key, descriptor) {\n        /** @type {?} */\n        const method = descriptor.value;\n        descriptor.value = (/**\n         * @param {?} state\n         * @param {...?} args\n         * @return {?}\n         */\n        function (state, ...args) {\n            return method.apply(this, [createDraft(state), ...args]);\n        });\n        return descriptor;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ImmutableContext, ImmutableSelector, produce$1 as produce, Mutation };\n\n//# sourceMappingURL=ngxs-labs-immer-adapter.js.map","<label [attr.for]=\"inputId\" class=\"mat-radio-label\" #label><div class=\"mat-radio-container\"><div class=\"mat-radio-outer-circle\"></div><div class=\"mat-radio-inner-circle\"></div><div mat-ripple class=\"mat-radio-ripple\" [matRippleTrigger]=\"label\" [matRippleDisabled]=\"_isRippleDisabled()\" [matRippleCentered]=\"true\" [matRippleRadius]=\"20\" [matRippleAnimation]=\"{enterDuration: 150}\"><div class=\"mat-ripple-element mat-radio-persistent-ripple\"></div></div><input #input class=\"mat-radio-input cdk-visually-hidden\" type=\"radio\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [tabIndex]=\"tabIndex\" [attr.name]=\"name\" [required]=\"required\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" [attr.aria-describedby]=\"ariaDescribedby\" (change)=\"_onInputChange($event)\" (click)=\"_onInputClick($event)\"></div><div class=\"mat-radio-label-content\" [class.mat-radio-label-before]=\"labelPosition == 'before'\"><span style=\"display:none\">&nbsp;</span><ng-content></ng-content></div></label>","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, HostListener, HostBinding, NgModule } from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, startWith, take, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material drawers.\n * \\@docs-private\n * @type {?}\n */\nconst matDrawerAnimations = {\n    /**\n     * Animation that slides a drawer in and out.\n     */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Configures whether drawers should use auto sizing by default.\n * @type {?}\n */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\nMatDrawerContent.decorators = [\n    { type: Component, args: [{selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDrawerContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatDrawerContainer)),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _focusMonitor\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?} _doc\n     */\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /**\n         * Whether the drawer is initialized. Used for disabling the initial animation.\n         */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._autoFocus = true;\n        /**\n         * Emits whenever the drawer has started animating.\n         */\n        this._animationStarted = new Subject();\n        /**\n         * Emits whenever the drawer is done animating.\n         */\n        this._animationEnd = new Subject();\n        /**\n         * Current state of the sidenav animation.\n         */\n        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n        // metadata is not inherited by child classes, instead the host binding data is defined in a way\n        // that can be inherited.\n        // tslint:disable:no-host-decorator-in-concrete\n        this._animationState = 'void';\n        /**\n         * Event emitted when the drawer open state is changed.\n         */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Event emitted when the drawer's position changes.\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this._opened = false;\n        this.openedChange.subscribe((/**\n         * @param {?} opened\n         * @return {?}\n         */\n        (opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = (/** @type {?} */ (this._doc.activeElement));\n                }\n                if (this._isFocusTrapEnabled && this._focusTrap) {\n                    this._trapFocus();\n                }\n            }\n            else {\n                this._restoreFocus();\n            }\n        }));\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            ((/** @type {?} */ (fromEvent(this._elementRef.nativeElement, 'keydown')))).pipe(filter((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }))));\n        }));\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        }));\n    }\n    /**\n     * The side that the drawer is attached to.\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value != this._position) {\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /**\n     * Mode of the drawer; one of 'over', 'push' or 'side'.\n     * @return {?}\n     */\n    get mode() { return this._mode; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set mode(value) {\n        this._mode = value;\n        this._modeChanged.next();\n    }\n    /**\n     * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n     * @return {?}\n     */\n    get disableClose() { return this._disableClose; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * @return {?}\n     */\n    get autoFocus() { return this._autoFocus; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n    /**\n     * Event emitted when the drawer has been opened.\n     * @return {?}\n     */\n    get _openedStream() {\n        return this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has started opening.\n     * @return {?}\n     */\n    get openedStart() {\n        return this._animationStarted.pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => e.fromState !== e.toState && e.toState.indexOf('open') === 0)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has been closed.\n     * @return {?}\n     */\n    get _closedStream() {\n        return this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has started closing.\n     * @return {?}\n     */\n    get closedStart() {\n        return this._animationStarted.pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => e.fromState !== e.toState && e.toState === 'void')), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * @return {?}\n     */\n    get _isFocusTrapEnabled() {\n        // The focus trap is only enabled when the drawer is open in any mode other than side.\n        return this.opened && this.mode !== 'side';\n    }\n    /**\n     * Traps focus inside the drawer.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then((/**\n         * @param {?} hasMovedFocus\n         * @return {?}\n         */\n        hasMovedFocus => {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                this._elementRef.nativeElement.focus();\n            }\n        }));\n    }\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        /** @type {?} */\n        const activeEl = this._doc && this._doc.activeElement;\n        if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n            if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n                this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n            }\n            else {\n                this._elementRef.nativeElement.blur();\n            }\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     * @return {?}\n     */\n    get opened() { return this._opened; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n    /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /**\n     * Close the drawer.\n     * @return {?}\n     */\n    close() {\n        return this.toggle(false);\n    }\n    /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    toggle(isOpen = !this.opened, openedVia = 'program') {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            this._restoreFocus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.enabled = this._isFocusTrapEnabled;\n        }\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => {\n            this.openedChange.pipe(take(1)).subscribe((/**\n             * @param {?} open\n             * @return {?}\n             */\n            open => resolve(open ? 'open' : 'close')));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get _width() {\n        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationStartListener(event) {\n        this._animationStarted.next(event);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDoneListener(event) {\n        this._animationEnd.next(event);\n    }\n}\nMatDrawer.decorators = [\n    { type: Component, args: [{selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    'tabIndex': '-1',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDrawer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: FocusMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatDrawer.propDecorators = {\n    position: [{ type: Input }],\n    mode: [{ type: Input }],\n    disableClose: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    _animationState: [{ type: HostBinding, args: ['@transform',] }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    openedStart: [{ type: Output }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    closedStart: [{ type: Output }],\n    onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n    opened: [{ type: Input }],\n    _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n    _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n};\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _ngZone\n     * @param {?} _changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?=} defaultAutosize\n     * @param {?=} _animationMode\n     */\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /**\n         * Event emitted when the drawer backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits on every ngDoCheck. Used for debouncing reflows.\n         */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            }));\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler.change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.updateContentMargins()));\n        this._autosize = defaultAutosize;\n    }\n    /**\n     * The drawer child with the `start` position.\n     * @return {?}\n     */\n    get start() { return this._start; }\n    /**\n     * The drawer child with the `end` position.\n     * @return {?}\n     */\n    get end() { return this._end; }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     * @return {?}\n     */\n    get autosize() { return this._autosize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     * @return {?}\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /**\n     * Reference to the CdkScrollable instance that wraps the scrollable content.\n     * @return {?}\n     */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._drawers.changes.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._validateDrawers();\n            this._drawers.forEach((/**\n             * @param {?} drawer\n             * @return {?}\n             */\n            (drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            }));\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        }));\n        this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => this.updateContentMargins()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n    open() {\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer.open()));\n    }\n    /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n    close() {\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer.close()));\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        /** @type {?} */\n        let left = 0;\n        /** @type {?} */\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._width;\n            }\n            else if (this._left.mode == 'push') {\n                /** @type {?} */\n                const width = this._left._width;\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._width;\n            }\n            else if (this._right.mode == 'push') {\n                /** @type {?} */\n                const width = this._right._width;\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || (/** @type {?} */ (null));\n        right = right || (/** @type {?} */ (null));\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => this._contentMarginChanges.next(this._contentMargins)));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => this._doCheckSubject.next()));\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event.fromState !== event.toState)), takeUntil(this._drawers.changes))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        }));\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe((/**\n             * @return {?}\n             */\n            () => this._setContainerClass(drawer.opened)));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._validateDrawers();\n            }));\n        }));\n    }\n    /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @private\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _setContainerClass(isAdd) {\n        if (isAdd) {\n            this._element.nativeElement.classList.add('mat-drawer-opened');\n        }\n        else {\n            this._element.nativeElement.classList.remove('mat-drawer-opened');\n        }\n    }\n    /**\n     * Validate the state of the drawer children components.\n     * @private\n     * @return {?}\n     */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        }));\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @private\n     * @return {?}\n     */\n    _isPushed() {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    }\n    /**\n     * @return {?}\n     */\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawer();\n    }\n    /**\n     * @return {?}\n     */\n    _closeModalDrawer() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)))\n            .forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => (/** @type {?} */ (drawer)).close()));\n    }\n    /**\n     * @return {?}\n     */\n    _isShowingBackdrop() {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.decorators = [\n    { type: Component, args: [{selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-drawer\\\"></ng-content><ng-content select=\\\"mat-drawer-content\\\"></ng-content><mat-drawer-content *ngIf=\\\"!_content\\\"><ng-content></ng-content></mat-drawer-content>\",\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDrawerContainer.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatDrawerContainer.propDecorators = {\n    _drawers: [{ type: ContentChildren, args: [MatDrawer,] }],\n    _content: [{ type: ContentChild, args: [MatDrawerContent, { static: false },] }],\n    _userContent: [{ type: ViewChild, args: [MatDrawerContent, { static: false },] }],\n    autosize: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    backdropClick: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavContent extends MatDrawerContent {\n    /**\n     * @param {?} changeDetectorRef\n     * @param {?} container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.decorators = [\n    { type: Component, args: [{selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatSidenavContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatSidenavContainer)),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /**\n     * Whether the sidenav is fixed in the viewport.\n     * @return {?}\n     */\n    get fixedInViewport() { return this._fixedInViewport; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     * @return {?}\n     */\n    get fixedTopGap() { return this._fixedTopGap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     * @return {?}\n     */\n    get fixedBottomGap() { return this._fixedBottomGap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n}\nMatSidenav.decorators = [\n    { type: Component, args: [{selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\"><ng-content></ng-content></div>\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\nMatSidenav.propDecorators = {\n    fixedInViewport: [{ type: Input }],\n    fixedTopGap: [{ type: Input }],\n    fixedBottomGap: [{ type: Input }]\n};\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.decorators = [\n    { type: Component, args: [{selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-sidenav\\\"></ng-content><ng-content select=\\\"mat-sidenav-content\\\"></ng-content><mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable><ng-content></ng-content></mat-sidenav-content>\",\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\"],\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\nMatSidenavContainer.propDecorators = {\n    _drawers: [{ type: ContentChildren, args: [MatSidenav,] }],\n    _content: [{ type: ContentChild, args: [MatSidenavContent, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ScrollingModule,\n                    PlatformModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MAT_DRAWER_DEFAULT_AUTOSIZE, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations };\n//# sourceMappingURL=sidenav.js.map\n"],"sourceRoot":""}