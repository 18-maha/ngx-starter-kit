{"version":3,"sources":["webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity-form.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.component.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.service.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/containers/entity/entity.model.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/index.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/esm2015/datepicker.js.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/shared-material-date.module.ts","webpack:////Developer/Work/SPA/ngx-starter-kit/libs/shared/src/lib/shared-material-date.module.ts.pre-build-optimizer.js","webpack:////Developer/Work/SPA/ngx-starter-kit/node_modules/rxjs/_esm2015/internal/operators/retry.js.pre-build-optimizer.js"],"names":["EntityFormComponent","[object Object]","data","dialogRef","this","title","entity","payload","buildForm","close","entityForm","value","entity_component_EntitiesComponent","entityService","dataSource","table","selection","collections","showToolbar","showColumnFilter","showActionColumn","maxSelectable","actionColumn","selectColumn","loading$","update","subscribe","filterPredicate","changed","pipe","Object","operators_filter","sc","added","length","_","selected","src","deselect","shift","sort","paginator","id","getById","item","delete","concatMap","put","post","getAll","getData","map","result","filteredData","every","isSelected","hasValue","isAllFilteredRowsSelected","isMasterToggleChecked","clear","forEach","select","filterValue","trim","toLowerCase","filter","displayedColumns","_displayedColumns","columns","column","visible","x","property","unshift","concat","toggle","showDetails","undefined","outlet","activatedRouteData","event","stopPropagation","stopImmediatePropagation","date","s","String","isString","parseISO","entity_service_EntityService","httpClient","baseUrl","environment","API_BASE_URL","loadingSubject","BehaviorSubject","asObservable","get","entityPath","catchError","handleError","order","skip","take","next","params","http","set","toString","retry","finalize","console","log","error","errorMessage","ErrorEvent","message","status","throwError","body","temporalFunctionToJson","Date","prototype","toJSON","format","jsonBody","JSON","stringify","Entity","init","assign","EntityColumnDef","header","displayFn","__webpack_require__","d","__webpack_exports__","MatDatepickerModule","MatCalendarHeader","MatCalendar","MatCalendarBody","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MAT_DATEPICKER_SCROLL_STRATEGY","MatDatepickerContent","MatDatepicker","MatDatepickerInput","MatDatepickerIntl","MatDatepickerToggle","MatMonthView","MatYearView","MatMultiYearView","_angular_core__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_7__","_angular_material_core__WEBPACK_IMPORTED_MODULE_8__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_9__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_12__","_angular_forms__WEBPACK_IMPORTED_MODULE_13__","createMissingDateImplError","provider","Error","changes","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","ngInjectableDef","factory","token","providedIn","MatCalendarCell","displayValue","ariaLabel","enabled","cssClasses","_elementRef","_ngZone","numCols","activeCell","cellAspectRatio","selectedValueChange","cell","emit","columnChanges","rows","_firstRowOffset","_cellPadding","_cellWidth","rowIndex","colIndex","cellNumber","runOutsideAngular","onStable","nativeElement","querySelector","focus","DAYS_PER_WEEK","_changeDetectorRef","_dateFormats","_dateAdapter","_dir","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","long","i","narrow","_weekdays","slice","_activeDate","today","activeDate","oldActiveDate","validDate","_getValidDateOrNull","deserialize","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selected","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","selectedYear","getYear","selectedMonth","getMonth","selectedDate","createDate","isRtl","_isRtl","keyCode","addCalendarDays","getDate","getNumDaysInMonth","altKey","addCalendarYears","addCalendarMonths","dateFilter","_dateSelected","preventDefault","compareDate","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","markForCheck","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","push","_shouldEnableDate","display","dateA11yLabel","cellClasses","dateClass","d1","d2","obj","isDateInstance","isValid","yearsPerPage","yearsPerRow","yearSelected","Math","floor","_selectedYear","_todayYear","activeYear","activeOffset","_years","row","year","_createCellForYear","month","min","_yearSelected","yearName","getYearName","_shouldEnableYear","monthSelected","_selectedMonth","_getMonthInCurrentYear","normalizedDate","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","_intl","calendar","changeDetectorRef","stateChanges","periodButtonText","currentView","monthYearLabel","periodButtonLabel","prevButtonLabel","multi-year","nextButtonLabel","_isSameView","date1","date2","_moveFocusOnNextTick","startView","_intlChanges","startAt","_startAt","_clampedActiveDate","_currentView","_calendarHeaderPortal","headerComponent","focusActiveCell","unsubscribe","complete","change","firstChange","view","_getCurrentViewComponent","detectChanges","monthView","yearView","multiYearView","ngAfterContentInit","sameDate","normalizedYear","normalizedMonth","datepickerUid","overlay","scrollStrategies","reposition","MatDatepickerContentBase","_MatDatepickerContentMixinBase","elementRef","super","_calendar","_dialog","_overlay","_viewContainerRef","scrollStrategy","_document","_touchUi","openedStream","closedStream","_opened","_validSelected","_focusedElementBeforeOpen","_inputSubscription","EMPTY","_disabledChange","_selectedChanged","_scrollStrategy","_datepickerInput","color","_color","_getThemePalette","touchUi","disabled","_disabled","newValue","opened","open","max","_dateFilter","_popupRef","dispose","_popupComponentRef","oldValue","input","_valueChange","activeElement","_openAsDialog","_openAsPopup","hasAttached","detach","_dialogRef","_calendarPortal","isAttached","completeClose","setTimeout","direction","viewContainerRef","panelClass","afterClosed","componentInstance","datepicker","_setColor","_createPopup","attach","instance","updatePosition","overlayConfig","positionStrategy","_createPopupPositionStrategy","hasBackdrop","backdropClass","create","overlayElement","setAttribute","backdropClick","detachments","keydownEvents","position","flexibleConnectedTo","getConnectedOverlayOrigin","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","MatDatepickerInputEvent","target","targetElement","_formField","dateChange","dateInput","_onTouched","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","control","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","matDatepickerFilter","_validator","compose","localeChanges","matDatepicker","_datepicker","_registerInput","_value","oldDate","_formatValue","_min","_max","element","blur","fn","c","isDisabled","readOnly","parse","defaultTabIndex","_stateChanges","parsedTabIndex","Number","tabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","SharedMaterialDateModule","Éµ0","_Subscriber__WEBPACK_IMPORTED_MODULE_0__","count","source","lift","RetryOperator","subscriber","RetrySubscriber","destination","err","isStopped","_unsubscribeAndRecycle"],"mappings":"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","file":"11-es2015.79443e4f973b1730ef59.js","sourcesContent":["import { Inject, OnInit } from '@angular/core';\nimport { Entity } from './entity.model';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\n\nexport abstract class EntityFormComponent<TEntity extends Entity> implements OnInit {\n  title: string;\n  entity: TEntity;\n  entityForm: FormGroup;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) protected data: { title: string; payload: TEntity },\n    protected dialogRef: MatDialogRef<EntityFormComponent<TEntity>>,\n  ) {\n    this.title = data.title;\n    this.entity = data.payload;\n  }\n\n  abstract buildForm(entity: TEntity);\n\n  ngOnInit() {\n    this.buildForm(this.entity);\n  }\n\n  submit() {\n    this.dialogRef.close(this.entityForm.value as Partial<TEntity>);\n  }\n}\n","import { AfterViewInit, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { EntityService } from './entity.service';\nimport { Entity, EntityColumnDef } from './entity.model';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { EntityFormComponent } from './entity-form.component';\nimport { ComponentType } from '@angular/cdk/portal/typings/portal';\nimport { SelectionChange, SelectionModel } from '@angular/cdk/collections';\nimport { untilDestroy } from '@ngx-starter-kit/ngx-utils';\nimport { parseISO } from 'date-fns/esm';\n\nexport abstract class EntitiesComponent<TEntity extends Entity, TService extends EntityService<TEntity>>\n  implements OnInit, OnDestroy, AfterViewInit {\n  dataSource = new MatTableDataSource<TEntity>([]);\n  selection = new SelectionModel<TEntity>(false, []);\n\n  @ViewChild(MatPaginator)\n  paginator: MatPaginator;\n  @ViewChild(MatSort)\n  sort: MatSort;\n  @ViewChild('filter')\n  filterRef: ElementRef;\n\n  readonly loading$;\n  readonly columns: Array<EntityColumnDef<TEntity>>;\n  readonly title?: string = null;\n  readonly showToolbar?: boolean = false;\n  readonly showColumnFilter?: boolean = false;\n  readonly showActionColumn?: boolean = false;\n  readonly maxSelectable?: number = 1;\n  readonly actionColumn?: string = 'Actions';\n  readonly selectColumn?: string = 'select';\n  // TODO: make them optional abstract\n  readonly formRef?: ComponentType<EntityFormComponent<TEntity>>;\n  getNewEntity?(): TEntity;\n  filterPredicate?(entity: TEntity, filter: string): boolean;\n  // TODO: make them optional abstract end\n\n  constructor(protected entityService: TService) {\n    this.loading$ = entityService.loading$;\n  }\n\n  ngOnInit() {\n    this.selection = new SelectionModel<TEntity>(this.maxSelectable > 1, []);\n\n    this.update().subscribe();\n    if (this.filterPredicate) {\n      this.dataSource.filterPredicate = this.filterPredicate;\n    }\n\n    // remove first selected entity if more then max selected.\n    if (this.maxSelectable > 1) {\n      // is multi select mode?\n      this.selection.changed\n        .pipe(\n          // tap(console.log),\n          filter((sc: SelectionChange<TEntity>) => sc.added.length > 0),\n          filter(_ => this.selection.selected.length > this.maxSelectable),\n          untilDestroy(this),\n        )\n        .subscribe(_ => this.selection.deselect(this.selection.selected.shift()));\n    }\n\n    // fromEvent(this.filterRef.nativeElement, 'keyup')\n    //   .pipe(\n    //     debounceTime(150),\n    //     distinctUntilChanged()\n    //   ).subscribe(() => {\n    //   this.paginator.pageIndex = 0;\n    //   this.applyFilter(this.filterRef.nativeElement.value)\n    // });\n  }\n\n  ngOnDestroy() {}\n\n  ngAfterViewInit() {\n    // Needs to be set up after the view is initialized since the data source will look at the sort\n    // and paginator's initial values to know what data should be rendered.\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  getById(id: number) {\n    return this.entityService.getById(id);\n  }\n\n  delete(item: TEntity) {\n    return this.entityService.delete(item.id).pipe(concatMap(_ => this.update()));\n  }\n\n  updateOrCreate(entity: TEntity, id: number) {\n    if (id) {\n      return this.entityService.put(id, entity).pipe(concatMap(_ => this.update()));\n    } else {\n      return this.entityService.post(entity).pipe(concatMap(_ => this.update()));\n    }\n  }\n\n  /**\n   * Overwrite this method, to get the data your way.\n   */\n  getData(): Observable<TEntity[]> {\n    return this.entityService.getAll();\n  }\n\n  protected update() {\n    return this.getData().pipe(\n      map(result => {\n        this.dataSource = new MatTableDataSource<TEntity>(result);\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n        // return nothing as we don't need.\n        // return result\n      }),\n    );\n  }\n\n  /** Whether all filtered rows are selected. */\n  isAllFilteredRowsSelected() {\n    return this.dataSource.filteredData.every(data => this.selection.isSelected(data));\n  }\n\n  /** Whether the selection it totally matches the filtered rows. */\n  isMasterToggleChecked() {\n    return (\n      this.selection.hasValue() &&\n      this.isAllFilteredRowsSelected() &&\n      this.selection.selected.length >= this.dataSource.filteredData.length\n    );\n  }\n\n  /**\n   * Whether there is a selection that doesn't capture all the\n   * filtered rows there are no filtered rows displayed.\n   */\n  isMasterToggleIndeterminate() {\n    return this.selection.hasValue() && (!this.isAllFilteredRowsSelected() || !this.dataSource.filteredData.length);\n  }\n\n  /** Selects all filtered rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isMasterToggleChecked()) {\n      this.selection.clear();\n    } else {\n      this.dataSource.filteredData.forEach(data => this.selection.select(data));\n    }\n  }\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n\n  get displayedColumns(): string[] {\n    // prettier-ignore\n    let _displayedColumns = this.columns\n      .filter(column => column.visible)\n      .map(x => x.property);\n\n    if (this.maxSelectable > 0) {\n      _displayedColumns.unshift(this.selectColumn);\n    }\n    if (this.showActionColumn) {\n      _displayedColumns = _displayedColumns.concat(this.actionColumn);\n    }\n    return _displayedColumns;\n  }\n\n  selectRow(entity: TEntity) {\n    if (this.maxSelectable > 0) {\n      this.selection.toggle(entity);\n      if (this.selection.isSelected(entity)) {\n        this.showDetails(entity);\n      } else {\n        this.showDetails(undefined);\n      }\n    }\n  }\n\n  getRouteAnimation(outlet) {\n    return outlet.activatedRouteData['depth'] || 5;\n    // return outlet.isActivated ? outlet.activatedRoute : ''\n  }\n\n  /**\n   * will be called with entity or undefined\n   */\n  showDetails(entity: TEntity) {}\n\n  toggleColumnVisibility(column, event) {\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    column.visible = !column.visible;\n  }\n\n  protected stringToDate(date: string | number | Date): number | Date {\n    const isString = s => typeof s === 'string' || s instanceof String;\n    return isString(date) ? parseISO(date) : date;\n  }\n}\n","import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Entity } from './entity.model';\nimport { catchError, finalize, retry } from 'rxjs/operators';\nimport { format } from 'date-fns/esm';\nimport { IPagination } from './pagination';\n\nexport interface Filter {\n  [name: string]: string | string[];\n}\n\nexport abstract class EntityService<T extends Entity> {\n  protected readonly baseUrl = environment.API_BASE_URL;\n  protected loadingSubject = new BehaviorSubject<boolean>(false);\n  public loading$ = this.loadingSubject.asObservable();\n\n  protected abstract entityPath: string;\n\n  constructor(protected httpClient: HttpClient) {}\n\n  getById(id: number | string) {\n    // this.loadingSubject.next(true);\n    return this.httpClient.get<T>(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      // finalize(() => this.loadingSubject.next(false))\n    );\n  }\n\n    // findAll(filter: Filter, order = 'DESC', skip = 0, take = 100): Observable<IPagination<T>> | Observable<never> {\n    findAll(filter: Filter, order = 'DESC', skip = 0, take = 100): Observable<T[]> | Observable<never> {\n    this.loadingSubject.next(true);\n    return this.httpClient\n      .get<T[]>(`${this.baseUrl}/${this.entityPath}`, {\n        params: new HttpParams()\n          .set('filter', 'filter TODO')\n          .set('order', order)\n          .set('skip', skip.toString())\n          .set('take', take.toString()),\n      })\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError),\n        finalize(() => this.loadingSubject.next(false)),\n      );\n  }\n\n  // getAll(): Observable<IPagination<T>> {\n  getAll(): Observable<T[]> {\n    this.loadingSubject.next(true);\n    return this.httpClient.get<T[]>(`${this.baseUrl}/${this.entityPath}`).pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  delete(id: number | string) {\n    this.loadingSubject.next(true);\n    return this.httpClient.delete(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  post(entity: T) {\n    this.loadingSubject.next(true);\n    return this.httpClient.post(`${this.baseUrl}/${this.entityPath}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  put(id: number | string, entity: T) {\n    console.log(entity);\n    this.loadingSubject.next(true);\n    return this.httpClient.put(`${this.baseUrl}/${this.entityPath}/${id}`, entity).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  protected handleError(error: HttpErrorResponse) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (typeof error === 'string') {\n      errorMessage = error;\n    } else {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${error.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${error.status}, with body ${error.message}`;\n      }\n    }\n    console.error(error);\n    // return an ErrorObservable with a user-facing error message\n    return throwError(errorMessage);\n  }\n\n  protected convertToJson(body: any) {\n    const temporalFunctionToJson = Date.prototype.toJSON;\n    Date.prototype.toJSON = function() {\n      return format(this, 'YYYY-MM-DD');\n    };\n\n    const jsonBody = JSON.stringify(body);\n\n    Date.prototype.toJSON = temporalFunctionToJson;\n    return jsonBody;\n  }\n}\n","import { TemplateRef } from '@angular/core';\n\nexport abstract class Entity {\n  abstract get id(): number | string;\n  [key: string]: any;\n  constructor(init?: Partial<Entity>) {\n    Object.assign(this, init);\n  }\n}\n\nexport class EntityColumnDef<T> {\n  readonly property: string;\n  readonly header = this.property;\n  public visible = true;\n  readonly sticky?: 'start' | 'end';\n  readonly template?: TemplateRef<any>;\n  readonly displayFn = (entity: T) => entity[this.property];\n\n  public constructor(init?: Partial<EntityColumnDef<T>>) {\n    Object.assign(this, init);\n  }\n}\n","export { SharedModule } from './lib/shared.module';\nexport { SharedFlexLayoutModule } from './lib/shared-flex-layout.module';\nexport { SharedPerfectScrollbarModule } from './lib/shared-perfect-scrollbar.module';\nexport { SharedMaterialDateModule } from './lib/shared-material-date.module';\n\nexport * from './lib/containers/entity/entity-form.component';\nexport * from './lib/containers/entity/entity.component';\nexport * from './lib/containers/entity/entity.service';\nexport * from './lib/containers/entity/entity.model';\nexport * from './lib/containers/entity/pagination';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, ElementRef, NgZone, InjectionToken, ViewContainerRef, Directive, Attribute, ContentChild, ÉµÉµdefineInjectable } from '@angular/core';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { take, filter } from 'rxjs/operators';\nimport { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, SPACE, ESCAPE } from '@angular/cdk/keycodes';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { A11yModule } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nfunction createMissingDateImplError(provider) {\n    return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Datepicker data that requires internationalization.\n */\nclass MatDatepickerIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * A label for the calendar popup (used by screen readers).\n         */\n        this.calendarLabel = 'Calendar';\n        /**\n         * A label for the button used to open the calendar popup (used by screen readers).\n         */\n        this.openCalendarLabel = 'Open calendar';\n        /**\n         * A label for the previous month button (used by screen readers).\n         */\n        this.prevMonthLabel = 'Previous month';\n        /**\n         * A label for the next month button (used by screen readers).\n         */\n        this.nextMonthLabel = 'Next month';\n        /**\n         * A label for the previous year button (used by screen readers).\n         */\n        this.prevYearLabel = 'Previous year';\n        /**\n         * A label for the next year button (used by screen readers).\n         */\n        this.nextYearLabel = 'Next year';\n        /**\n         * A label for the previous multi-year button (used by screen readers).\n         */\n        this.prevMultiYearLabel = 'Previous 20 years';\n        /**\n         * A label for the next multi-year button (used by screen readers).\n         */\n        this.nextMultiYearLabel = 'Next 20 years';\n        /**\n         * A label for the 'switch to month view' button (used by screen readers).\n         */\n        this.switchToMonthViewLabel = 'Choose date';\n        /**\n         * A label for the 'switch to year view' button (used by screen readers).\n         */\n        this.switchToMultiYearViewLabel = 'Choose month and year';\n    }\n}\nMatDatepickerIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */ MatDatepickerIntl.ngInjectableDef = ÉµÉµdefineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nclass MatCalendarCell {\n    /**\n     * @param {?} value\n     * @param {?} displayValue\n     * @param {?} ariaLabel\n     * @param {?} enabled\n     * @param {?=} cssClasses\n     */\n    constructor(value, displayValue, ariaLabel, enabled, cssClasses) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n    }\n}\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nclass MatCalendarBody {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _ngZone) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * The number of columns in the table.\n         */\n        this.numCols = 7;\n        /**\n         * The cell number of the active cell in the table.\n         */\n        this.activeCell = 0;\n        /**\n         * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n         * maintained even as the table resizes.\n         */\n        this.cellAspectRatio = 1;\n        /**\n         * Emits when a new value is selected.\n         */\n        this.selectedValueChange = new EventEmitter();\n    }\n    /**\n     * @param {?} cell\n     * @return {?}\n     */\n    _cellClicked(cell) {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const columnChanges = changes['numCols'];\n        const { rows, numCols } = this;\n        if (changes['rows'] || columnChanges) {\n            this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n            this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n        }\n        if (columnChanges || !this._cellWidth) {\n            this._cellWidth = `${100 / numCols}%`;\n        }\n    }\n    /**\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n    _isActiveCell(rowIndex, colIndex) {\n        /** @type {?} */\n        let cellNumber = rowIndex * this.numCols + colIndex;\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this._firstRowOffset;\n        }\n        return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            }));\n        }));\n    }\n}\nMatCalendarBody.decorators = [\n    { type: Component, args: [{selector: '[mat-calendar-body]',\n                template: \"<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\"><td class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"numCols\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{label}}</td></tr><tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\"><td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\" aria-hidden=\\\"true\\\" class=\\\"mat-calendar-body-label\\\" [attr.colspan]=\\\"_firstRowOffset\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\">{{_firstRowOffset >= labelMinRequiredCells ? label : ''}}</td><td *ngFor=\\\"let item of row; let colIndex = index\\\" role=\\\"gridcell\\\" class=\\\"mat-calendar-body-cell\\\" [ngClass]=\\\"item.cssClasses\\\" [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\" [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\" [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\" [attr.aria-label]=\\\"item.ariaLabel\\\" [attr.aria-disabled]=\\\"!item.enabled || null\\\" [attr.aria-selected]=\\\"selectedValue === item.value\\\" (click)=\\\"_cellClicked(item)\\\" [style.width]=\\\"_cellWidth\\\" [style.paddingTop]=\\\"_cellPadding\\\" [style.paddingBottom]=\\\"_cellPadding\\\"><div class=\\\"mat-calendar-body-cell-content\\\" [class.mat-calendar-body-selected]=\\\"selectedValue === item.value\\\" [class.mat-calendar-body-today]=\\\"todayValue === item.value\\\">{{item.displayValue}}</div></td></tr>\",\n                styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.71429%;padding-right:4.71429%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:0;cursor:pointer}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}@media (-ms-high-contrast:active){.mat-calendar-body-cell-content{border:none}}@media (-ms-high-contrast:active){.mat-calendar-body-selected,.mat-datepicker-popup:not(:empty){outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}}[dir=rtl] .mat-calendar-body-label{text-align:right}\"],\n                host: {\n                    'class': 'mat-calendar-body',\n                    'role': 'grid',\n                    'aria-readonly': 'true'\n                },\n                exportAs: 'matCalendarBody',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendarBody.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nMatCalendarBody.propDecorators = {\n    label: [{ type: Input }],\n    rows: [{ type: Input }],\n    todayValue: [{ type: Input }],\n    selectedValue: [{ type: Input }],\n    labelMinRequiredCells: [{ type: Input }],\n    numCols: [{ type: Input }],\n    activeCell: [{ type: Input }],\n    cellAspectRatio: [{ type: Input }],\n    selectedValueChange: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMonthView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateFormats\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new date is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        /** @type {?} */\n        const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n        /** @type {?} */\n        const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n        /** @type {?} */\n        const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        /** @type {?} */\n        let weekdays = longWeekdays.map((/**\n         * @param {?} long\n         * @param {?} i\n         * @return {?}\n         */\n        (long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        }));\n        this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedDate = this._getDateInCurrentMonth(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Handles when a new date is selected.\n     * @param {?} date\n     * @return {?}\n     */\n    _dateSelected(date) {\n        if (this._selectedDate != date) {\n            /** @type {?} */\n            const selectedYear = this._dateAdapter.getYear(this.activeDate);\n            /** @type {?} */\n            const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n            /** @type {?} */\n            const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n            this.selectedChange.emit(selectedDate);\n        }\n        this._userSelection.emit();\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                    this._dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n                    this._userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n    _init() {\n        this._selectedDate = this._getDateInCurrentMonth(this.selected);\n        this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n        this._monthLabel =\n            this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                .toLocaleUpperCase();\n        /** @type {?} */\n        let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n        this._firstWeekOffset =\n            (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n        this._createWeekCells();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n    _createWeekCells() {\n        /** @type {?} */\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n        /** @type {?} */\n        const dateNames = this._dateAdapter.getDateNames();\n        this._weeks = [[]];\n        for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell == DAYS_PER_WEEK) {\n                this._weeks.push([]);\n                cell = 0;\n            }\n            /** @type {?} */\n            const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n            /** @type {?} */\n            const enabled = this._shouldEnableDate(date);\n            /** @type {?} */\n            const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n            /** @type {?} */\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n            this._weeks[this._weeks.length - 1]\n                .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n    /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _shouldEnableDate(date) {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _getDateInCurrentMonth(date) {\n        return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n            this._dateAdapter.getDate(date) : null;\n    }\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n    _hasSameMonthAndYear(d1, d2) {\n        return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n            this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatMonthView.decorators = [\n    { type: Component, args: [{selector: 'mat-month-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th></tr><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_monthLabel\\\" [rows]=\\\"_weeks\\\" [todayValue]=\\\"_todayDate\\\" [selectedValue]=\\\"_selectedDate\\\" [labelMinRequiredCells]=\\\"3\\\" [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\" (selectedValueChange)=\\\"_dateSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matMonthView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatMonthView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatMonthView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    _userSelection: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst yearsPerPage = 24;\n/** @type {?} */\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatMultiYearView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new year is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected year. This doesn't imply a change on the selected date\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this multi-year view (everything other than the year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        let oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n            Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n    _init() {\n        this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n        /** @type {?} */\n        let activeYear = this._dateAdapter.getYear(this._activeDate);\n        /** @type {?} */\n        let activeOffset = activeYear % yearsPerPage;\n        this._years = [];\n        for (let i = 0, row = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length == yearsPerRow) {\n                this._years.push(row.map((/**\n                 * @param {?} year\n                 * @return {?}\n                 */\n                year => this._createCellForYear(year))));\n                row = [];\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Handles when a new year is selected.\n     * @param {?} year\n     * @return {?}\n     */\n    _yearSelected(year) {\n        this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n        /** @type {?} */\n        let month = this._dateAdapter.getMonth(this.activeDate);\n        /** @type {?} */\n        let daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    _getActiveCell() {\n        return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    _createCellForYear(year) {\n        /** @type {?} */\n        let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n        return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n    }\n    /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n    _shouldEnableYear(year) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatMultiYearView.decorators = [\n    { type: Component, args: [{selector: 'mat-multi-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [rows]=\\\"_years\\\" [todayValue]=\\\"_todayYear\\\" [selectedValue]=\\\"_selectedYear\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_getActiveCell()\\\" (selectedValueChange)=\\\"_yearSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matMultiYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatMultiYearView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatMultiYearView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    yearSelected: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatYearView {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dateFormats\n     * @param {?} _dateAdapter\n     * @param {?=} _dir\n     */\n    constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dateFormats = _dateFormats;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        /**\n         * Emits when a new month is selected.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the selected month. This doesn't imply a change on the selected date\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is activated.\n         */\n        this.activeDateChange = new EventEmitter();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._activeDate = this._dateAdapter.today();\n    }\n    /**\n     * The date to display in this year view (everything other than the year is ignored).\n     * @return {?}\n     */\n    get activeDate() { return this._activeDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        /** @type {?} */\n        let oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n        this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n        if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n            this._init();\n        }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._init();\n    }\n    /**\n     * Handles when a new month is selected.\n     * @param {?} month\n     * @return {?}\n     */\n    _monthSelected(month) {\n        /** @type {?} */\n        const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n        this.monthSelected.emit(normalizedDate);\n        /** @type {?} */\n        const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n        this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleCalendarBodyKeydown(event) {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n        /** @type {?} */\n        const oldActiveDate = this._activeDate;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                break;\n            case HOME:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n        if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n        this._focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n    /**\n     * Initializes this year view.\n     * @return {?}\n     */\n    _init() {\n        this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n        this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n        this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n        /** @type {?} */\n        let monthNames = this._dateAdapter.getMonthNames('short');\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((/**\n         * @param {?} row\n         * @return {?}\n         */\n        row => row.map((/**\n         * @param {?} month\n         * @return {?}\n         */\n        month => this._createCellForMonth(month, monthNames[month])))));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n    _focusActiveCell() {\n        this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n    _getMonthInCurrentYear(date) {\n        return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n            this._dateAdapter.getMonth(date) : null;\n    }\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n    _createCellForMonth(month, monthName) {\n        /** @type {?} */\n        let ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n        return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n    }\n    /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n    _shouldEnableMonth(month) {\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this.activeDate);\n        if (month === undefined || month === null ||\n            this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n        if (!this.dateFilter) {\n            return true;\n        }\n        /** @type {?} */\n        const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    _isYearAndMonthAfterMaxDate(year, month) {\n        if (this.maxDate) {\n            /** @type {?} */\n            const maxYear = this._dateAdapter.getYear(this.maxDate);\n            /** @type {?} */\n            const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n        return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n    _isYearAndMonthBeforeMinDate(year, month) {\n        if (this.minDate) {\n            /** @type {?} */\n            const minYear = this._dateAdapter.getYear(this.minDate);\n            /** @type {?} */\n            const minMonth = this._dateAdapter.getMonth(this.minDate);\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir && this._dir.value === 'rtl';\n    }\n}\nMatYearView.decorators = [\n    { type: Component, args: [{selector: 'mat-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\"><thead class=\\\"mat-calendar-table-header\\\"><tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr></thead><tbody mat-calendar-body [label]=\\\"_yearLabel\\\" [rows]=\\\"_months\\\" [todayValue]=\\\"_todayMonth\\\" [selectedValue]=\\\"_selectedMonth\\\" [labelMinRequiredCells]=\\\"2\\\" [numCols]=\\\"4\\\" [cellAspectRatio]=\\\"4 / 7\\\" [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\" (selectedValueChange)=\\\"_monthSelected($event)\\\" (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\"></tbody></table>\",\n                exportAs: 'matYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] },\n];\n/** @nocollapse */\nMatYearView.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatYearView.propDecorators = {\n    activeDate: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    activeDateChange: [{ type: Output }],\n    _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default header for MatCalendar\n * @template D\n */\nclass MatCalendarHeader {\n    /**\n     * @param {?} _intl\n     * @param {?} calendar\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} changeDetectorRef\n     */\n    constructor(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n        this._intl = _intl;\n        this.calendar = calendar;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this.calendar.stateChanges.subscribe((/**\n         * @return {?}\n         */\n        () => changeDetectorRef.markForCheck()));\n    }\n    /**\n     * The label for the current calendar view.\n     * @return {?}\n     */\n    get periodButtonText() {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter\n                .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                .toLocaleUpperCase();\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYearName(this.calendar.activeDate);\n        }\n        /** @type {?} */\n        const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n        /** @type {?} */\n        const firstYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        /** @type {?} */\n        const lastYearInView = this._dateAdapter.getYearName(this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n    /**\n     * @return {?}\n     */\n    get periodButtonLabel() {\n        return this.calendar.currentView == 'month' ?\n            this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n    }\n    /**\n     * The label for the previous button.\n     * @return {?}\n     */\n    get prevButtonLabel() {\n        return {\n            'month': this._intl.prevMonthLabel,\n            'year': this._intl.prevYearLabel,\n            'multi-year': this._intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n    /**\n     * The label for the next button.\n     * @return {?}\n     */\n    get nextButtonLabel() {\n        return {\n            'month': this._intl.nextMonthLabel,\n            'year': this._intl.nextYearLabel,\n            'multi-year': this._intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    currentPeriodClicked() {\n        this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n    previousClicked() {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n    nextClicked() {\n        this.calendar.activeDate = this.calendar.currentView == 'month' ?\n            this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n    previousEnabled() {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n        return !this.calendar.minDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n    nextEnabled() {\n        return !this.calendar.maxDate ||\n            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n    _isSameView(date1, date2) {\n        if (this.calendar.currentView == 'month') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView == 'year') {\n            return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n        }\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n            Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\nMatCalendarHeader.decorators = [\n    { type: Component, args: [{selector: 'mat-calendar-header',\n                template: \"<div class=\\\"mat-calendar-header\\\"><div class=\\\"mat-calendar-controls\\\"><button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\" (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\" cdkAriaLive=\\\"polite\\\">{{periodButtonText}}<div class=\\\"mat-calendar-arrow\\\" [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div></button><div class=\\\"mat-calendar-spacer\\\"></div><ng-content></ng-content><button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\" [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\" [attr.aria-label]=\\\"prevButtonLabel\\\"></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\" [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\" [attr.aria-label]=\\\"nextButtonLabel\\\"></button></div></div>\",\n                exportAs: 'matCalendarHeader',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendarHeader.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: MatCalendar, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatCalendar)),] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: ChangeDetectorRef }\n];\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\nclass MatCalendar {\n    /**\n     * @param {?} _intl\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Used for scheduling that focus should be moved to the active cell on the next tick.\n         * We need to schedule it, rather than do it immediately, because we have to wait\n         * for Angular to re-evaluate the view children.\n         */\n        this._moveFocusOnNextTick = false;\n        /**\n         * Whether the calendar should be started in month or year view.\n         */\n        this.startView = 'month';\n        /**\n         * Emits when the currently selected date changes.\n         */\n        this.selectedChange = new EventEmitter();\n        /**\n         * Emits the year chosen in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits the month chosen in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when any date is selected.\n         */\n        this._userSelection = new EventEmitter();\n        /**\n         * Emits whenever there is a state change that the header may need to respond to.\n         */\n        this.stateChanges = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        this._intlChanges = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            _changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * A date representing the period (month or year) to start the calendar in.\n     * @return {?}\n     */\n    get startAt() { return this._startAt; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set startAt(value) {\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get minDate() { return this._minDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minDate(value) {\n        this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get maxDate() { return this._maxDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxDate(value) {\n        this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     * @return {?}\n     */\n    get activeDate() { return this._clampedActiveDate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set activeDate(value) {\n        this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether the calendar is in month view.\n     * @return {?}\n     */\n    get currentView() { return this._currentView; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set currentView(value) {\n        this._currentView = value;\n        this._moveFocusOnNextTick = true;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n        this.activeDate = this.startAt || this._dateAdapter.today();\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        if (this._moveFocusOnNextTick) {\n            this._moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n        if (change && !change.firstChange) {\n            /** @type {?} */\n            const view = this._getCurrentViewComponent();\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                this._changeDetectorRef.detectChanges();\n                view._init();\n            }\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    focusActiveCell() {\n        this._getCurrentViewComponent()._focusActiveCell();\n    }\n    /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n    updateTodaysDate() {\n        /** @type {?} */\n        let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n        view.ngAfterContentInit();\n    }\n    /**\n     * Handles date selection in the month view.\n     * @param {?} date\n     * @return {?}\n     */\n    _dateSelected(date) {\n        if (!this._dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n    /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    _yearSelectedInMultiYearView(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    _monthSelectedInYearView(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * @return {?}\n     */\n    _userSelected() {\n        this._userSelection.emit();\n    }\n    /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n    _goToDateInView(date, view) {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n    _getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\nMatCalendar.decorators = [\n    { type: Component, args: [{selector: 'mat-calendar',\n                template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template><div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\"><mat-month-view *ngSwitchCase=\\\"'month'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" [dateClass]=\\\"dateClass\\\" (selectedChange)=\\\"_dateSelected($event)\\\" (_userSelection)=\\\"_userSelected()\\\"></mat-month-view><mat-year-view *ngSwitchCase=\\\"'year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (monthSelected)=\\\"_monthSelectedInYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'month')\\\"></mat-year-view><mat-multi-year-view *ngSwitchCase=\\\"'multi-year'\\\" [(activeDate)]=\\\"activeDate\\\" [selected]=\\\"selected\\\" [dateFilter]=\\\"dateFilter\\\" [maxDate]=\\\"maxDate\\\" [minDate]=\\\"minDate\\\" (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\" (selectedChange)=\\\"_goToDateInView($event, 'year')\\\"></mat-multi-year-view></div>\",\n                styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:0}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-next-button,.mat-calendar-previous-button{position:relative}.mat-calendar-next-button::after,.mat-calendar-previous-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:'';margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-next-button,[dir=rtl] .mat-calendar-previous-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:'';position:absolute;top:0;left:-8px;right:-8px;height:1px}\"],\n                host: {\n                    'class': 'mat-calendar',\n                },\n                exportAs: 'matCalendar',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatCalendar.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: ChangeDetectorRef }\n];\nMatCalendar.propDecorators = {\n    headerComponent: [{ type: Input }],\n    startAt: [{ type: Input }],\n    startView: [{ type: Input }],\n    selected: [{ type: Input }],\n    minDate: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    dateFilter: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    selectedChange: [{ type: Output }],\n    yearSelected: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    _userSelection: [{ type: Output }],\n    monthView: [{ type: ViewChild, args: [MatMonthView, { static: false },] }],\n    yearView: [{ type: ViewChild, args: [MatYearView, { static: false },] }],\n    multiYearView: [{ type: ViewChild, args: [MatMultiYearView, { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\nconst matDatepickerAnimations = {\n    /**\n     * Transforms the height of the datepicker's calendar.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * Fades in the content of the calendar.\n     */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n        // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/**\n * \\@docs-private\n */\nclass MatDatepickerContentBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/** @type {?} */\nconst _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template D\n */\nclass MatDatepickerContent extends _MatDatepickerContentMixinBase {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        super(elementRef);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._calendar.focusActiveCell();\n    }\n}\nMatDatepickerContent.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker-content',\n                template: \"<mat-calendar cdkTrapFocus [id]=\\\"datepicker.id\\\" [ngClass]=\\\"datepicker.panelClass\\\" [startAt]=\\\"datepicker.startAt\\\" [startView]=\\\"datepicker.startView\\\" [minDate]=\\\"datepicker._minDate\\\" [maxDate]=\\\"datepicker._maxDate\\\" [dateFilter]=\\\"datepicker._dateFilter\\\" [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\" [selected]=\\\"datepicker._selected\\\" [dateClass]=\\\"datepicker.dateClass\\\" [@fadeInCalendar]=\\\"'enter'\\\" (selectedChange)=\\\"datepicker.select($event)\\\" (yearSelected)=\\\"datepicker._selectYear($event)\\\" (monthSelected)=\\\"datepicker._selectMonth($event)\\\" (_userSelection)=\\\"datepicker.close()\\\"></mat-calendar>\",\n                styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation:landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation:portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\"],\n                host: {\n                    'class': 'mat-datepicker-content',\n                    '[@transformPanel]': '\"enter\"',\n                    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n                },\n                animations: [\n                    matDatepickerAnimations.transformPanel,\n                    matDatepickerAnimations.fadeInCalendar,\n                ],\n                exportAs: 'matDatepickerContent',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['color'],\n            },] },\n];\n/** @nocollapse */\nMatDatepickerContent.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatDatepickerContent.propDecorators = {\n    _calendar: [{ type: ViewChild, args: [MatCalendar, { static: false },] }]\n};\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\nclass MatDatepicker {\n    /**\n     * @param {?} _dialog\n     * @param {?} _overlay\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _dateAdapter\n     * @param {?} _dir\n     * @param {?} _document\n     */\n    constructor(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document) {\n        this._dialog = _dialog;\n        this._overlay = _overlay;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dateAdapter = _dateAdapter;\n        this._dir = _dir;\n        this._document = _document;\n        /**\n         * The view that the calendar should start in.\n         */\n        this.startView = 'month';\n        this._touchUi = false;\n        /**\n         * Emits selected year in multiyear view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.yearSelected = new EventEmitter();\n        /**\n         * Emits selected month in year view.\n         * This doesn't imply a change on the selected date.\n         */\n        this.monthSelected = new EventEmitter();\n        /**\n         * Emits when the datepicker has been opened.\n         */\n        this.openedStream = new EventEmitter();\n        /**\n         * Emits when the datepicker has been closed.\n         */\n        this.closedStream = new EventEmitter();\n        this._opened = false;\n        /**\n         * The id for the datepicker calendar.\n         */\n        this.id = `mat-datepicker-${datepickerUid++}`;\n        this._validSelected = null;\n        /**\n         * The element that was focused before the datepicker was opened.\n         */\n        this._focusedElementBeforeOpen = null;\n        /**\n         * Subscription to value changes in the associated input element.\n         */\n        this._inputSubscription = Subscription.EMPTY;\n        /**\n         * Emits when the datepicker is disabled.\n         */\n        this._disabledChange = new Subject();\n        /**\n         * Emits new selected date when selected date changes.\n         */\n        this._selectedChanged = new Subject();\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * The date to open the calendar to initially.\n     * @return {?}\n     */\n    get startAt() {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set startAt(value) {\n        this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * Color palette to use on the datepicker's calendar.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._color = value;\n    }\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     * @return {?}\n     */\n    get touchUi() { return this._touchUi; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set touchUi(value) {\n        this._touchUi = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the datepicker pop-up should be disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled === undefined && this._datepickerInput ?\n            this._datepickerInput.disabled : !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._disabledChange.next(newValue);\n        }\n    }\n    /**\n     * Whether the calendar is open.\n     * @return {?}\n     */\n    get opened() { return this._opened; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set opened(value) { value ? this.open() : this.close(); }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n    get _selected() { return this._validSelected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _selected(value) { this._validSelected = value; }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n    get _minDate() {\n        return this._datepickerInput && this._datepickerInput.min;\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n    get _maxDate() {\n        return this._datepickerInput && this._datepickerInput.max;\n    }\n    /**\n     * @return {?}\n     */\n    get _dateFilter() {\n        return this._datepickerInput && this._datepickerInput._dateFilter;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.close();\n        this._inputSubscription.unsubscribe();\n        this._disabledChange.complete();\n        if (this._popupRef) {\n            this._popupRef.dispose();\n            this._popupComponentRef = null;\n        }\n    }\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n    select(date) {\n        /** @type {?} */\n        let oldValue = this._selected;\n        this._selected = date;\n        if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n            this._selectedChanged.next(date);\n        }\n    }\n    /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n    _selectYear(normalizedYear) {\n        this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n    _selectMonth(normalizedMonth) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?}\n     */\n    _registerInput(input) {\n        if (this._datepickerInput) {\n            throw Error('A MatDatepicker can only be associated with a single input.');\n        }\n        this._datepickerInput = input;\n        this._inputSubscription =\n            this._datepickerInput._valueChange.subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => this._selected = value));\n    }\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n    open() {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this._datepickerInput) {\n            throw Error('Attempted to open an MatDatepicker with no associated input.');\n        }\n        if (this._document) {\n            this._focusedElementBeforeOpen = this._document.activeElement;\n        }\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\n        this._opened = true;\n        this.openedStream.emit();\n    }\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n    close() {\n        if (!this._opened) {\n            return;\n        }\n        if (this._popupRef && this._popupRef.hasAttached()) {\n            this._popupRef.detach();\n        }\n        if (this._dialogRef) {\n            this._dialogRef.close();\n            this._dialogRef = null;\n        }\n        if (this._calendarPortal && this._calendarPortal.isAttached) {\n            this._calendarPortal.detach();\n        }\n        /** @type {?} */\n        const completeClose = (/**\n         * @return {?}\n         */\n        () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this._focusedElementBeforeOpen = null;\n            }\n        });\n        if (this._focusedElementBeforeOpen &&\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this._focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        }\n        else {\n            completeClose();\n        }\n    }\n    /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n    _openAsDialog() {\n        // Usually this would be handled by `open` which ensures that we can only have one overlay\n        // open at a time, however since we reset the variables in async handlers some overlays\n        // may slip through if the user opens and closes multiple times in quick succession (e.g.\n        // by holding down the enter key).\n        if (this._dialogRef) {\n            this._dialogRef.close();\n        }\n        this._dialogRef = this._dialog.open(MatDatepickerContent, {\n            direction: this._dir ? this._dir.value : 'ltr',\n            viewContainerRef: this._viewContainerRef,\n            panelClass: 'mat-datepicker-dialog',\n        });\n        this._dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this.close()));\n        this._dialogRef.componentInstance.datepicker = this;\n        this._setColor();\n    }\n    /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n    _openAsPopup() {\n        if (!this._calendarPortal) {\n            this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n        }\n        if (!this._popupRef) {\n            this._createPopup();\n        }\n        if (!this._popupRef.hasAttached()) {\n            this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n            this._popupComponentRef.instance.datepicker = this;\n            this._setColor();\n            // Update the position once the calendar has rendered.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._popupRef.updatePosition();\n            }));\n        }\n    }\n    /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n    _createPopup() {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this._createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mat-overlay-transparent-backdrop',\n            direction: this._dir,\n            scrollStrategy: this._scrollStrategy(),\n            panelClass: 'mat-datepicker-popup',\n        });\n        this._popupRef = this._overlay.create(overlayConfig);\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\n            return event.keyCode === ESCAPE ||\n                (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n        })))).subscribe((/**\n         * @return {?}\n         */\n        () => this.close()));\n    }\n    /**\n     * Create the popup PositionStrategy.\n     * @private\n     * @return {?}\n     */\n    _createPopupPositionStrategy() {\n        return this._overlay.position()\n            .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n            .withTransformOriginOn('.mat-datepicker-content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top'\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom'\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top'\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom'\n            }\n        ]);\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n    /**\n     * Passes the current theme color along to the calendar overlay.\n     * @private\n     * @return {?}\n     */\n    _setColor() {\n        /** @type {?} */\n        const color = this.color;\n        if (this._popupComponentRef) {\n            this._popupComponentRef.instance.color = color;\n        }\n        if (this._dialogRef) {\n            this._dialogRef.componentInstance.color = color;\n        }\n    }\n}\nMatDatepicker.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker',\n                template: '',\n                exportAs: 'matDatepicker',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/** @nocollapse */\nMatDatepicker.ctorParameters = () => [\n    { type: MatDialog },\n    { type: Overlay },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatDatepicker.propDecorators = {\n    calendarHeaderComponent: [{ type: Input }],\n    startAt: [{ type: Input }],\n    startView: [{ type: Input }],\n    color: [{ type: Input }],\n    touchUi: [{ type: Input }],\n    disabled: [{ type: Input }],\n    yearSelected: [{ type: Output }],\n    monthSelected: [{ type: Output }],\n    panelClass: [{ type: Input }],\n    dateClass: [{ type: Input }],\n    openedStream: [{ type: Output, args: ['opened',] }],\n    closedStream: [{ type: Output, args: ['closed',] }],\n    opened: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatDatepickerInput)),\n    multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatDatepickerInput)),\n    multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D\n */\nclass MatDatepickerInputEvent {\n    /**\n     * @param {?} target\n     * @param {?} targetElement\n     */\n    constructor(target, targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n}\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\nclass MatDatepickerInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dateAdapter\n     * @param {?} _dateFormats\n     * @param {?} _formField\n     */\n    constructor(_elementRef, _dateAdapter, _dateFormats, _formField) {\n        this._elementRef = _elementRef;\n        this._dateAdapter = _dateAdapter;\n        this._dateFormats = _dateFormats;\n        this._formField = _formField;\n        /**\n         * Emits when a `change` event is fired on this `<input>`.\n         */\n        this.dateChange = new EventEmitter();\n        /**\n         * Emits when an `input` event is fired on this `<input>`.\n         */\n        this.dateInput = new EventEmitter();\n        /**\n         * Emits when the value changes (either due to user input or programmatic change).\n         */\n        this._valueChange = new EventEmitter();\n        /**\n         * Emits when the disabled state has changed\n         */\n        this._disabledChange = new EventEmitter();\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._cvaOnChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._validatorOnChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._datepickerSubscription = Subscription.EMPTY;\n        this._localeSubscription = Subscription.EMPTY;\n        /**\n         * The form control validator for whether the input parses.\n         */\n        this._parseValidator = (/**\n         * @return {?}\n         */\n        () => {\n            return this._lastValueValid ?\n                null : { 'matDatepickerParse': { 'text': this._elementRef.nativeElement.value } };\n        });\n        /**\n         * The form control validator for the min date.\n         */\n        this._minValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return (!this.min || !controlValue ||\n                this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n                null : { 'matDatepickerMin': { 'min': this.min, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the max date.\n         */\n        this._maxValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return (!this.max || !controlValue ||\n                this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n                null : { 'matDatepickerMax': { 'max': this.max, 'actual': controlValue } };\n        });\n        /**\n         * The form control validator for the date filter.\n         */\n        this._filterValidator = (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n            return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n                null : { 'matDatepickerFilter': true };\n        });\n        /**\n         * The combined form control validator for this input.\n         */\n        this._validator = Validators.compose([this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n        /**\n         * Whether the last value set on the input was valid.\n         */\n        this._lastValueValid = false;\n        if (!this._dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n            throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n        // Update the displayed date when the locale changes.\n        this._localeSubscription = _dateAdapter.localeChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.value = this.value;\n        }));\n    }\n    /**\n     * The datepicker that this input is associated with.\n     * @param {?} value\n     * @return {?}\n     */\n    set matDatepicker(value) {\n        if (!value) {\n            return;\n        }\n        this._datepicker = value;\n        this._datepicker._registerInput(this);\n        this._datepickerSubscription.unsubscribe();\n        this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((/**\n         * @param {?} selected\n         * @return {?}\n         */\n        (selected) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }));\n    }\n    /**\n     * Function that can be used to filter out dates within the datepicker.\n     * @param {?} value\n     * @return {?}\n     */\n    set matDatepickerFilter(value) {\n        this._dateFilter = value;\n        this._validatorOnChange();\n    }\n    /**\n     * The value of the input.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        value = this._dateAdapter.deserialize(value);\n        this._lastValueValid = !value || this._dateAdapter.isValid(value);\n        value = this._getValidDateOrNull(value);\n        /** @type {?} */\n        const oldDate = this.value;\n        this._value = value;\n        this._formatValue(value);\n        if (!this._dateAdapter.sameDate(oldDate, value)) {\n            this._valueChange.emit(value);\n        }\n    }\n    /**\n     * The minimum valid date.\n     * @return {?}\n     */\n    get min() { return this._min; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set min(value) {\n        this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._validatorOnChange();\n    }\n    /**\n     * The maximum valid date.\n     * @return {?}\n     */\n    get max() { return this._max; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set max(value) {\n        this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        this._validatorOnChange();\n    }\n    /**\n     * Whether the datepicker-input is disabled.\n     * @return {?}\n     */\n    get disabled() { return !!this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disabledChange.emit(newValue);\n        }\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._datepickerSubscription.unsubscribe();\n        this._localeSubscription.unsubscribe();\n        this._valueChange.complete();\n        this._disabledChange.complete();\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) {\n        this._validatorOnChange = fn;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n    validate(c) {\n        return this._validator ? this._validator(c) : null;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n    getPopupConnectionElementRef() {\n        return this.getConnectedOverlayOrigin();\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._cvaOnChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        /** @type {?} */\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n        if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n            this._datepicker.open();\n            event.preventDefault();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _onInput(value) {\n        /** @type {?} */\n        let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n        this._lastValueValid = !date || this._dateAdapter.isValid(date);\n        date = this._getValidDateOrNull(date);\n        if (!this._dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this._cvaOnChange(date);\n            this._valueChange.emit(date);\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n        else {\n            this._validatorOnChange();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onChange() {\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n    _getThemePalette() {\n        return this._formField ? this._formField.color : undefined;\n    }\n    /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n    _onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this._formatValue(this.value);\n        }\n        this._onTouched();\n    }\n    /**\n     * Formats a value and sets it on the input element.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _formatValue(value) {\n        this._elementRef.nativeElement.value =\n            value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n    _getValidDateOrNull(obj) {\n        return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\nMatDatepickerInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matDatepicker]',\n                providers: [\n                    MAT_DATEPICKER_VALUE_ACCESSOR,\n                    MAT_DATEPICKER_VALIDATORS,\n                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                ],\n                host: {\n                    '[attr.aria-haspopup]': 'true',\n                    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                    '[disabled]': 'disabled',\n                    '(input)': '_onInput($event.target.value)',\n                    '(change)': '_onChange()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                },\n                exportAs: 'matDatepickerInput',\n            },] },\n];\n/** @nocollapse */\nMatDatepickerInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DateAdapter, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n    { type: MatFormField, decorators: [{ type: Optional }] }\n];\nMatDatepickerInput.propDecorators = {\n    matDatepicker: [{ type: Input }],\n    matDatepickerFilter: [{ type: Input }],\n    value: [{ type: Input }],\n    min: [{ type: Input }],\n    max: [{ type: Input }],\n    disabled: [{ type: Input }],\n    dateChange: [{ type: Output }],\n    dateInput: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\nclass MatDatepickerToggleIcon {\n}\nMatDatepickerToggleIcon.decorators = [\n    { type: Directive, args: [{\n                selector: '[matDatepickerToggleIcon]'\n            },] },\n];\n/**\n * @template D\n */\nclass MatDatepickerToggle {\n    /**\n     * @param {?} _intl\n     * @param {?} _changeDetectorRef\n     * @param {?} defaultTabIndex\n     */\n    constructor(_intl, _changeDetectorRef, defaultTabIndex) {\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._stateChanges = Subscription.EMPTY;\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n    /**\n     * Whether the toggle button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        if (this._disabled === undefined && this.datepicker) {\n            return this.datepicker.disabled;\n        }\n        return !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['datepicker']) {\n            this._watchStateChanges();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._watchStateChanges();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _open(event) {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _watchStateChanges() {\n        /** @type {?} */\n        const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n        /** @type {?} */\n        const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n            this.datepicker._datepickerInput._disabledChange : of();\n        /** @type {?} */\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            of();\n        this._stateChanges.unsubscribe();\n        this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n}\nMatDatepickerToggle.decorators = [\n    { type: Component, args: [{selector: 'mat-datepicker-toggle',\n                template: \"<button #button mat-icon-button type=\\\"button\\\" aria-haspopup=\\\"true\\\" [attr.aria-label]=\\\"_intl.openCalendarLabel\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" [disableRipple]=\\\"disableRipple\\\" (click)=\\\"_open($event)\\\"><svg *ngIf=\\\"!_customIcon\\\" class=\\\"mat-datepicker-toggle-default-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" fill=\\\"currentColor\\\" focusable=\\\"false\\\"><path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/></svg><ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content></button>\",\n                styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\"],\n                host: {\n                    'class': 'mat-datepicker-toggle',\n                    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n                    // consumer may have provided, while still being able to receive focus.\n                    '[attr.tabindex]': '-1',\n                    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                    '(focus)': '_button.focus()',\n                },\n                exportAs: 'matDatepickerToggle',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n            },] },\n];\n/** @nocollapse */\nMatDatepickerToggle.ctorParameters = () => [\n    { type: MatDatepickerIntl },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatDatepickerToggle.propDecorators = {\n    datepicker: [{ type: Input, args: ['for',] }],\n    tabIndex: [{ type: Input }],\n    disabled: [{ type: Input }],\n    disableRipple: [{ type: Input }],\n    _customIcon: [{ type: ContentChild, args: [MatDatepickerToggleIcon, { static: false },] }],\n    _button: [{ type: ViewChild, args: ['button', { static: false },] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDatepickerModule {\n}\nMatDatepickerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatDialogModule,\n                    OverlayModule,\n                    A11yModule,\n                    PortalModule,\n                ],\n                exports: [\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                ],\n                declarations: [\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                ],\n                providers: [\n                    MatDatepickerIntl,\n                    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                ],\n                entryComponents: [\n                    MatDatepickerContent,\n                    MatCalendarHeader,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatDatepickerModule, MatCalendarHeader, MatCalendar, MatCalendarCell, MatCalendarBody, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MatDatepickerContent, MatDatepicker, matDatepickerAnimations, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, MatDatepickerInputEvent, MatDatepickerInput, MatDatepickerIntl, MatDatepickerToggleIcon, MatDatepickerToggle, MatMonthView, MatYearView, MatMultiYearView as Éµa34 };\n//# sourceMappingURL=datepicker.js.map\n","import { NgModule } from '@angular/core';\n\nimport { MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatDateFormats, MatNativeDateModule } from '@angular/material/core';\nimport {MatDatepickerModule  } from '@angular/material/datepicker';\n\n\nconst MODULE_EXPORTS = [MatDatepickerModule, MatNativeDateModule];\n\nconst DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: 'LL',\n  },\n  display: {\n    dateInput: 'LL',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@NgModule({\n  exports: MODULE_EXPORTS,\n  providers: [{ provide: MAT_DATE_FORMATS, useValue: DATE_FORMATS }, { provide: MAT_DATE_LOCALE, useValue: 'en-GB' }],\n})\nexport class SharedMaterialDateModule {}\n","import { MatDateFormats, MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nconst MODULE_EXPORTS = [MatDatepickerModule, MatNativeDateModule];\nconst DATE_FORMATS = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'LL',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\nconst Éµ0 = DATE_FORMATS;\nexport class SharedMaterialDateModule {\n}\nexport { Éµ0 };\n","import { Subscriber } from '../Subscriber';\nexport function retry(count = -1) {\n    return (source) => source.lift(new RetryOperator(count, source));\n}\nclass RetryOperator {\n    constructor(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    }\n}\nclass RetrySubscriber extends Subscriber {\n    constructor(destination, count, source) {\n        super(destination);\n        this.count = count;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { source, count } = this;\n            if (count === 0) {\n                return super.error(err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    }\n}\n//# sourceMappingURL=retry.js.map"],"sourceRoot":""}