{"version":3,"sources":["webpack:///Developer/Work/SPA/ngx-starter-kit/node_modules/@angular/material/__ivy_ngcc__/esm2015/button-toggle.js.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.component.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.component.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.component.html","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.service.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.service.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.module.ts","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/lib/app-confirm.module.ts.pre-build-optimizer.js","webpack:///Developer/Work/SPA/ngx-starter-kit/libs/app-confirm/src/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","MatButtonToggleGroup","MatButtonToggle","MatButtonToggleModule","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","_angular_material_core__WEBPACK_IMPORTED_MODULE_5__","_c0","_c1","_c2","_c3","_c4","_c5","_c6","_c7","_c8","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","A","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","m","useExisting","Object","mb","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","[object Object]","source","value","this","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","t","change","appearance","name","_buttonToggles","forEach","toggle","_markForCheck","vertical","c","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","select","filter","checked","markForCheck","fn","isDisabled","Array","isArray","length","event","isUserInput","deferEvents","deselect","_updateModelValue","isSelected","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","_emitChangeEvent","ngDirectiveDef","ec","type","selectors","factory","jc","k","contentQueries","rf","ctx","dirIndex","_t","ac","Nc","Ac","hostBindings","elIndex","Ub","pc","bd","Vb","Yb","cd","inputs","outputs","exportAs","features","Tb","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","super","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","_isSelected","_syncButtonToggle","_type","_isPrechecked","monitor","group","stopMonitoring","options","_buttonElement","nativeElement","focus","newChecked","ngComponentDef","dc","r","h","xc","viewQuery","md","first","zc","$event","disableRipple","ariaLabel","Rb","ngContentSelectors","consts","vars","template","Ic","qc","_onButtonClick","Hc","oc","kc","_r109","Oc","Jc","Uc","directives","u","styles","encapsulation","changeDetection","ngModuleDef","hc","ngInjectorDef","gc","imports","v","app_confirm_component_AppConfirmComponent","AppConfirmComponent","dialogRef","data","core","dialog","g","a","fd","close","gd","title","message","e","esm2015_button","b","flex","app_confirm_service_AppConfirmService","AppConfirmService","open","width","disableClose","afterClosed","ngInjectableDef","fc","token","wc","providedIn","app_confirm_module_AppConfirmModule","AppConfirmModule","providers","common","f","flex_layout"],"mappings":"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","file":"3-es2015.0553ba80899aeb296e80.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/core';\n\nconst _c0 = [\"role\", \"group\", 1, \"mat-button-toggle-group\"];\nconst _c1 = [\"button\"];\nconst _c2 = [1, \"mat-button-toggle\"];\nconst _c3 = [\"type\", \"button\", 1, \"mat-button-toggle-button\", 3, \"id\", \"disabled\", \"click\"];\nconst _c4 = [\"button\", \"\"];\nconst _c5 = [1, \"mat-button-toggle-label-content\"];\nconst _c6 = [1, \"mat-button-toggle-focus-overlay\"];\nconst _c7 = [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"];\nconst _c8 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatButtonToggleGroup)),\n    multi: true\n};\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatButtonToggleGroupMultiple {\n}\n/** @type {?} */\nlet _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nclass MatButtonToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nclass MatButtonToggleGroup {\n    /**\n     * @param {?} _changeDetector\n     * @param {?=} defaultOptions\n     */\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Event emitted when the group's value changes.\n         */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * `name` attribute for the underlying `input` element.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Whether the toggle group is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Value of the toggle group.\n     * @return {?}\n     */\n    get value() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle.value));\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /**\n     * Selected button toggles in the group.\n     * @return {?}\n     */\n    get selected() {\n        /** @type {?} */\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /**\n     * Whether multiple button toggles can be selected.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether multiple button toggle group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach((/**\n             * @param {?} toggle\n             * @return {?}\n             */\n            toggle => toggle._markForCheck()));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked)));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value Value to be set to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const selected = this.selected;\n        /** @type {?} */\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        /** @type {?} */\n        const event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param {?} toggle Toggle to be synced.\n     * @param {?} select Whether the toggle should be selected.\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\n     * @param {?=} deferEvents Whether to defer emitting the change events.\n     * @return {?}\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            ((/** @type {?} */ (this.selected))).checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /**\n     * Checks whether a button toggle is selected.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /**\n     * Determines whether a button toggle should be checked on init.\n     * @param {?} toggle\n     * @return {?}\n     */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => toggle.value != null && value === toggle.value));\n        }\n        return toggle.value === this._rawValue;\n    }\n    /**\n     * Updates the selection state of the toggles in the group based on a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            (currentValue) => this._selectValue(currentValue)));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /**\n     * Clears the selected toggles.\n     * @private\n     * @return {?}\n     */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => toggle.checked = false));\n    }\n    /**\n     * Selects a value if there's a toggle that corresponds to it.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this._buttonToggles.find((/**\n         * @param {?} toggle\n         * @return {?}\n         */\n        toggle => {\n            return toggle.value != null && toggle.value === value;\n        }));\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /**\n     * Syncs up the group's value with the model and emits the change event.\n     * @private\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], factory: function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); }, contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵallocHostVars(3);\n        ɵngcc0.ɵɵelementHostAttrs(_c0);\n        ɵngcc0.ɵɵstyling();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n        ɵngcc0.ɵɵstylingApply();\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n        ])] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { constructor: [], _changeDetector: [], _vertical: [], _multiple: [], _disabled: [], _controlValueAccessorChangeFn: [], _onTouched: [], _name: [], valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], name: [], vertical: [{\n            type: Input\n        }], vertical: [], value: [{\n            type: Input\n        }], value: [], selected: [], multiple: [{\n            type: Input\n        }], multiple: [], disabled: [{\n            type: Input\n        }], disabled: [], ngOnInit: [], _selectionModel: [], ngAfterContentInit: [], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], _emitChangeEvent: [], _syncButtonToggle: [], _isSelected: [], _isPrechecked: [], _setSelectionByValue: [], _rawValue: [], _clearSelection: [], _selectValue: [], _updateModelValue: [], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatButtonToggle))]\n        }] });\n/** @nocollapse */\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatButtonToggle)),] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/**\n * \\@docs-private\n */\nclass MatButtonToggleBase {\n}\n/** @type {?} */\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/**\n * Single button inside of a toggle group.\n */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    /**\n     * @param {?} toggleGroup\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     * @param {?} defaultTabIndex\n     * @param {?=} defaultOptions\n     */\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n    defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /**\n         * Event emitted when the group value changes.\n         */\n        this.change = new EventEmitter();\n        /** @type {?} */\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /**\n     * Unique ID for the underlying `button` element.\n     * @return {?}\n     */\n    get buttonId() { return `${this.id}-button`; }\n    /**\n     * The appearance style of the button.\n     * @return {?}\n     */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /**\n     * Whether the button is checked.\n     * @return {?}\n     */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = this.buttonToggleGroup.name;\n        }\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n            this.checked = true;\n        }\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /**\n     * Focuses the button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /**\n     * Checks the button toggle due to an interaction with the underlying native button.\n     * @return {?}\n     */\n    _onButtonClick() {\n        /** @type {?} */\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], factory: function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); }, viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostBindings: function MatButtonToggle_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵallocHostVars(7);\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler($event) { return ctx.focus(); });\n        ɵngcc0.ɵɵelementHostAttrs(_c2);\n        ɵngcc0.ɵɵstyling();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-checked\", ctx.checked);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n        ɵngcc0.ɵɵstylingApply();\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c8, consts: 6, vars: 9, template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", _c3, _c4);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener($event) { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", _c5);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", _c6);\n        ɵngcc0.ɵɵelement(5, \"div\", _c7);\n    } if (rf & 2) {\n        const _r109 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵselect(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r109)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc1.MatRipple], styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\n                styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()'\n                }\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }] }, { type: ChangeDetectorRef }, { type: ElementRef }, { type: FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { constructor: [], _changeDetectorRef: [], _elementRef: [], _focusMonitor: [], _isSingleSelector: [], _checked: [], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], _disabled: [], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], buttonToggleGroup: [], appearance: [{\n            type: Input\n        }], appearance: [], buttonId: [], _appearance: [], checked: [{\n            type: Input\n        }], checked: [], disabled: [{\n            type: Input\n        }], disabled: [], ngOnInit: [], _type: [], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ngOnDestroy: [], focus: [], _onButtonClick: [], _markForCheck: [], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button', { static: false }]\n        }], value: [{\n            type: Input\n        }] });\n/** @nocollapse */\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button', { static: false },] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); }, imports: [[MatCommonModule, MatRippleModule],\n        MatCommonModule] });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup,\n        MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule,\n        MatButtonToggleGroup,\n        MatButtonToggle]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggle, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Component, Inject } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/flex-layout/flex\";\nconst _c0 = [\"matDialogTitle\", \"\"];\nconst _c1 = [\"mat-dialog-content\", \"\"];\nconst _c2 = [\"mat-dialog-actions\", \"\"];\nconst _c3 = [\"type\", \"button\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"];\nconst _c4 = [\"fxFlex\", \"\"];\nconst _c5 = [\"type\", \"button\", \"color\", \"accent\", \"mat-raised-button\", \"\", 3, \"click\"];\nexport class AppConfirmComponent {\n    constructor(dialogRef, data) {\n        this.dialogRef = dialogRef;\n        this.data = data;\n    }\n}\nAppConfirmComponent.ngComponentDef = i0.ɵɵdefineComponent({ type: AppConfirmComponent, selectors: [[\"ngx-confirm\"]], factory: function AppConfirmComponent_Factory(t) { return new (t || AppConfirmComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA)); }, consts: 11, vars: 2, template: function AppConfirmComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", _c0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", _c1);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", _c2);\n        i0.ɵɵelementStart(5, \"button\", _c3);\n        i0.ɵɵlistener(\"click\", function AppConfirmComponent_Template_button_click_5_listener($event) { return ctx.dialogRef.close(true); });\n        i0.ɵɵtext(6, \"OK\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(7, \" \\u00A0 \");\n        i0.ɵɵelement(8, \"span\", _c4);\n        i0.ɵɵelementStart(9, \"button\", _c5);\n        i0.ɵɵlistener(\"click\", function AppConfirmComponent_Template_button_click_9_listener($event) { return ctx.dialogRef.close(false); });\n        i0.ɵɵtext(10, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵselect(1);\n        i0.ɵɵtextInterpolate(ctx.data.title);\n        i0.ɵɵselect(3);\n        i0.ɵɵtextInterpolate(ctx.data.message);\n    } }, directives: [i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i2.MatButton, i3.DefaultFlexDirective], styles: [\"\"] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AppConfirmComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-confirm',\n                templateUrl: './app-confirm.component.html',\n                styleUrls: ['./app-confirm.component.scss'],\n            }]\n    }], function () { return [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_DATA]\n            }] }]; }, null);\n","import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Component, Inject } from '@angular/core';\n\n@Component({\n  selector: 'ngx-confirm',\n  templateUrl: './app-confirm.component.html',\n  styleUrls: ['./app-confirm.component.scss'],\n})\nexport class AppConfirmComponent {\n  constructor(public dialogRef: MatDialogRef<AppConfirmComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {}\n}\n","<h1 matDialogTitle>{{ data.title }}</h1>\n<div mat-dialog-content>{{ data.message }}</div>\n<div mat-dialog-actions>\n  <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"dialogRef.close(true)\">OK</button> &nbsp;\n  <span fxFlex></span>\n  <button type=\"button\" color=\"accent\" mat-raised-button (click)=\"dialogRef.close(false)\">Cancel</button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MatDialogRef, MatDialog, MatDialogConfig } from '@angular/material/dialog';\n\nimport { AppConfirmComponent } from './app-confirm.component';\n\n@Injectable()\nexport class AppConfirmService {\n  constructor(private dialog: MatDialog) {}\n\n  public confirm(title: string, message: string): Observable<boolean> {\n    let dialogRef: MatDialogRef<AppConfirmComponent>;\n    dialogRef = this.dialog.open(AppConfirmComponent, {\n      width: '380px',\n      disableClose: true,\n      data: { title, message },\n    });\n    return dialogRef.afterClosed() as Observable<boolean>;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AppConfirmComponent } from './app-confirm.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nexport class AppConfirmService {\n    constructor(dialog) {\n        this.dialog = dialog;\n    }\n    confirm(title, message) {\n        let dialogRef;\n        dialogRef = this.dialog.open(AppConfirmComponent, {\n            width: '380px',\n            disableClose: true,\n            data: { title, message },\n        });\n        return dialogRef.afterClosed();\n    }\n}\nAppConfirmService.ngInjectableDef = i0.ɵɵdefineInjectable({ token: AppConfirmService, factory: function AppConfirmService_Factory(t) { return new (t || AppConfirmService)(i0.ɵɵinject(i1.MatDialog)); }, providedIn: null });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AppConfirmService, [{\n        type: Injectable\n    }], function () { return [{ type: i1.MatDialog }]; }, null);\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AppConfirmComponent } from './app-confirm.component';\nimport { AppConfirmService } from './app-confirm.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n  imports: [CommonModule, MatDialogModule, MatButtonModule, FlexLayoutModule],\n  declarations: [AppConfirmComponent],\n  providers: [AppConfirmService],\n  entryComponents: [AppConfirmComponent],\n})\nexport class AppConfirmModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AppConfirmComponent } from './app-confirm.component';\nimport { AppConfirmService } from './app-confirm.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport * as i0 from \"@angular/core\";\nexport class AppConfirmModule {\n}\nAppConfirmModule.ngModuleDef = i0.ɵɵdefineNgModule({ type: AppConfirmModule });\nAppConfirmModule.ngInjectorDef = i0.ɵɵdefineInjector({ factory: function AppConfirmModule_Factory(t) { return new (t || AppConfirmModule)(); }, providers: [AppConfirmService], imports: [[CommonModule, MatDialogModule, MatButtonModule, FlexLayoutModule]] });\n/*@__PURE__*/ i0.ɵɵsetNgModuleScope(AppConfirmModule, { declarations: [AppConfirmComponent], imports: [CommonModule, MatDialogModule, MatButtonModule, FlexLayoutModule] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(AppConfirmModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatDialogModule, MatButtonModule, FlexLayoutModule],\n                declarations: [AppConfirmComponent],\n                providers: [AppConfirmService],\n                entryComponents: [AppConfirmComponent],\n            }]\n    }], null, null);\n","export * from './lib/app-confirm.module';\nexport { AppConfirmService } from './lib/app-confirm.service';\n"]}